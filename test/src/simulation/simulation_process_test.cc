#include "doctest/doctest.h"

#include <chrono>
#include <cstdint>
#include <tuple>

#include "date/date.h"

#include "utl/enumerate.h"
#include "utl/timer.h"

#include "soro/base/time.h"

#include "soro/infrastructure/infrastructure.h"

#include "soro/timetable/interval.h"
#include "soro/timetable/timetable.h"

#include "soro/ordering/graph.h"

#include "soro/simulation/approach/topological_sort.h"
#include "soro/simulation/graph/graph.h"
#include "soro/simulation/simulator/simulator.h"

#include "test/file_paths.h"

namespace soro::sim::test {

using namespace soro::tt;
using namespace soro::infra;

uint32_t sleep_for(std::chrono::microseconds const us) {
  auto const until = std::chrono::system_clock::now() + us;
  uint32_t result = 0;
  while (std::chrono::system_clock::now() < until) {
    ++result;
    result *= result;
    result = result / ((result * 7 / 17) + 1);
    result *= (result * 19);
  }

  return result;
}

bool check_result(simulator::results_t const& result) {
  for (auto const [id, data] : utl::enumerate(result)) {
    CHECK_EQ(data.identity_, id);
  }

  return true;
}

TEST_SUITE("simulation process") {
  TEST_CASE("simulation process, follow") {
    auto opts = soro::test::SMALL_OPTS;
    auto tt_opts = soro::test::FOLLOW_OPTS;

    opts.exclusions_ = true;
    opts.interlocking_ = true;
    opts.layout_ = false;

    infrastructure const infra(opts);
    timetable const tt(tt_opts, infra);
    ordering::graph const og(infra, tt);
    sim::graph const sg(infra, tt, og);

    auto const results = topo::simulate(infra, tt, sg);
    std::ignore = results;
  }

  TEST_CASE("simulation process, cross") {
    auto opts = soro::test::SMALL_OPTS;
    auto tt_opts = soro::test::CROSS_OPTS;

    opts.exclusions_ = true;
    opts.interlocking_ = true;
    opts.layout_ = false;

    infrastructure const infra(opts);
    timetable const tt(tt_opts, infra);
    ordering::graph const og(infra, tt);
    graph const sg(infra, tt, og);
  }
}

TEST_SUITE("simulation process 2h") {
  using namespace date;

  constexpr interval const inter{
      .start_ = ymd_to_abs(2021_y / November / 13) + hours{7},
      .end_ = ymd_to_abs(2021_y / November / 13) + hours{9}};

  ordering::graph::filter const filter{
      .interval_ = inter, .include_trains_ = {}, .exclude_trains_ = {}};

  TEST_CASE("topological sort") {
    utl::scoped_timer const timer("topological sort approach");

    infrastructure const infra(soro::test::DE_ISS_OPTS);
    timetable const tt(soro::test::DE_KSS_OPTS, infra);

    ordering::graph const og(infra, tt, filter);
    sim::graph const sg(infra, tt, og);

    //    mock_runtime const runtime_calculator;

    //    auto const result = simulate_topo(sg, runtime_calculator);
    //    CHECK(check_result(result));
  }

  TEST_CASE("queue") {
    utl::scoped_timer const timer("queue approach");

    infrastructure const infra(soro::test::DE_ISS_OPTS);
    timetable const tt(soro::test::DE_KSS_OPTS, infra);

    ordering::graph const og(infra, tt, filter);
    sim::graph const sg(infra, tt, og);

    //    mock_runtime const runtime_calculator;

    //    auto const result = simulate_queue(sg, runtime_calculator);
    //    CHECK(check_result(result));
  }

#if defined(SORO_TBB)
  TEST_CASE("tbb") {
    utl::scoped_timer const timer("tbb approach");

    infrastructure const infra(soro::test::DE_ISS_OPTS);
    timetable const tt(soro::test::DE_KSS_OPTS, infra);

    ordering::graph const og(infra, tt, filter);
    simulation::graph const sg(infra, tt, og);

    mock_runtime const runtime_calculator;

    for (auto t = 1U; t < std::thread::hardware_concurrency() * 2; ++t) {
      auto const result = simulate_tbb(sg, runtime_calculator, t);
      CHECK(check_result(result));
    }
  }
#endif
}
//
// TEST_SUITE("simulation approach benchmarks 24h") {
//  using namespace date;
//
//  interval const inter{.start_ = ymd_to_abs(2021_y / November / 13),
//                       .end_ = ymd_to_abs(2021_y / November / 13) +
//                       hours{24}};
//
//  ordering::graph::filter const filter{
//      .interval_ = inter,
//      .include_trains_ = {},
//      .exclude_trains_ = {
//          {// for these we cannot determine a clear order in the timetable
//           7583, 19114,
//           // extra for 24h
//           7112, 8025, 8765, 11183, 12424, 12655, 17230, 18915, 18918, 18921,
//           18923, 18926, 18928, 18931, 18933, 18936, 18938, 19118, 19123,
//           19127, 19132, 19136, 19142, 19146, 19152, 19156, 19161, 21594,
//           22139, 23356, 23373, 23379, 23569, 24783, 24787, 24816, 24902,
//           24907, 24980, 29116, 29174, 30175, 32691, 32696, 32700, 32705,
//           32709, 32715, 32719, 32724, 32728, 32733, 32737, 32742, 34392,
//           35281, 36445, 37050, 37863, 39938, 40741, 42630, 42643, 48141,
//           48149, 48157, 48165, 48173, 48181, 48189, 48197, 48205, 48213,
//           48221, 48229, 48237, 48245, 48253, 48261, 48269, 48277, 48831,
//           49093, 49315, 49951, 51923, 51931, 51939, 51947, 52624, 52968,
//           54293, 55189, 56009, 58520, 58524, 58526, 58532, 58534, 58536,
//           58561, 58565, 58566, 58571, 58573, 58575, 58843, 58844,
//
//           // for these a train edge is transitive (likely a bug)
//           74, 347, 533, 3650, 4225, 4231, 4512, 4810, 5510, 7320, 7992, 8206,
//           8211, 8363, 12385, 17641, 17646, 17653, 19100, 19112, 19173, 19187,
//           19190, 21273, 22020, 23197, 23200, 24573, 24774, 24777, 24942,
//           24993, 24997, 25952, 26123, 29152, 29365, 29487, 29551, 29669,
//           29828, 29853, 29891, 30169, 30171, 30763, 30766, 30769, 30916,
//           32104, 32106, 32108, 33270, 34292, 34295, 34301, 35237, 36301,
//           36303, 36329, 36459, 38263, 38264, 38526, 41306, 43896, 43900,
//           43910, 43912, 43919, 45777, 45781, 45787, 47857, 47863, 49830,
//           49845, 50536, 50940, 50944, 51609, 51614, 52063, 52073, 52082,
//           52601, 52603, 52605, 52749, 52757, 52865, 53505, 54372, 54772,
//           54774, 54913, 54915, 54917, 55821, 57882, 57888, 58417, 58423,
//           58512, 58553, 58558, 58804, 58812, 58941, 59540, 59690, 59734,
//           60049, 60259, 60976, 60979, 60992, 61316, 61455, 62115, 62121,
//           62123, 62126, 64343, 64345, 64347, 64485, 66646, 66647, 67651,
//
//           // cycles in the sim graph
//           19634, 19639, 19644, 19648,
//
//           // for 24h
//           151, 189, 191, 193, 197, 199, 205, 207, 209, 211, 350, 354, 355,
//           357, 358, 360, 361, 362, 364, 365, 367, 368, 370, 372, 373, 375,
//           376, 378, 379, 380, 381, 383, 391, 464, 466, 523, 524, 536, 540,
//           542, 544, 547, 599, 1410, 1618, 1683, 1777, 1985, 1995, 1998, 2087,
//           2285, 2288, 2320, 2370, 2715, 3413, 4453, 4848, 5512, 5513, 5514,
//           5515, 5516, 5517, 5518, 5519, 5521, 5522, 5523, 5524, 5525, 5526,
//           5527, 5528, 5529, 5530, 5531, 5532, 5533, 5535, 5536, 5538, 5540,
//           5542, 5543, 5544, 5710, 5782, 6455, 6466, 7113, 7115, 7116, 7118,
//           7119, 7121, 7124, 7126, 7210, 7308, 7326, 7327, 7328, 7329, 7330,
//           7331, 7332, 7334, 7336, 7337, 7338, 7340, 7342, 7343, 7344, 7345,
//           7421, 7598, 7611, 7646, 7681, 7704, 7728, 7994, 7995, 8003, 8004,
//           8015, 8021, 8024, 8028, 8030, 8137, 8214, 8217, 8220, 8224, 8226,
//           8230, 8231, 8235, 8237, 8241, 8243, 8248, 8333, 8351, 8529, 9952,
//           10066, 10070, 10080, 10083, 10087, 10088, 10089, 10091, 10095,
//           10590, 10755, 11079, 11082, 11204, 11205, 11206, 11208, 11209,
//           11210, 11214, 11215, 11216, 11217, 11218, 11219, 11223, 11224,
//           11227, 11229, 11383, 11390, 11391, 11393, 11424, 11431, 11436,
//           11447, 11461, 11468, 11472, 11482, 11484, 11485, 11487, 11489,
//           11531, 11888, 11959, 12019, 12264, 12338, 12462, 12467, 12474,
//           12480, 12482, 12487, 12494, 12497, 12504, 12507, 12511, 12582,
//           12671, 12707, 12729, 12821, 12827, 12832, 12834, 12839, 12842,
//           12846, 12848, 12852, 12855, 12859, 12865, 12885, 13181, 13186,
//           13188, 13191, 13421, 13651, 13753, 14006, 14095, 14255, 14264,
//           14268, 14272, 14275, 14278, 14282, 14285, 14289, 14293, 14299,
//           14303, 14305, 14312, 14314, 14316, 14319, 14325, 17440, 17659,
//           17670, 17678, 17688, 17697, 17706, 17715, 17727, 17741, 17756,
//           17769, 17781, 17789, 17817, 18139, 18291, 18333, 18494, 18496,
//           18498, 18499, 18501, 18503, 18504, 18507, 18509, 18510, 18513,
//           18517, 18907, 19191, 19194, 19197, 19199, 19200, 19202, 19207,
//           19208, 19215, 19216, 19222, 19225, 19229, 19231, 19236, 19237,
//           19240, 19241, 19246, 19247, 19249, 19251, 19254, 19255, 19649,
//           19650, 19652, 19655, 19657, 19658, 19666, 19673, 19674, 19676,
//           19679, 19692, 19693, 19696, 19698, 19699, 19700, 19704, 19705,
//           19707, 19708, 19714, 19717, 19733, 19735, 19737, 19738, 19739,
//           19740, 19741, 19743, 19744, 19746, 19747, 19748, 19749, 19751,
//           19752, 19753, 19765, 19768, 19774, 19776, 19777, 19778, 19780,
//           19782, 19992, 19993, 20725, 20914, 20924, 20931, 20933, 20982,
//           21003, 21013, 21017, 21275, 21277, 21281, 21607, 21997, 21999,
//           22119, 22120, 22123, 22124, 22127, 22128, 22131, 22132, 22568,
//           22653, 22957, 23114, 23203, 23205, 23208, 23211, 23212, 23213,
//           23214, 23215, 23216, 23217, 23220, 23221, 23222, 23225, 23228,
//           23382, 23385, 23425, 23435, 23442, 23449, 23452, 23459, 23465,
//           23513, 23515, 23520, 23522, 23525, 23526, 23528, 23530, 23535,
//           23538, 23542, 23723, 23724, 23725, 23727, 23728, 23729, 23731,
//           23733, 24055, 24141, 24143, 24221, 24323, 24340, 24341, 24574,
//           24717, 24729, 24730, 24731, 24736, 24737, 24741, 24743, 24748,
//           24749, 24750, 24756, 24775, 24778, 24779, 24780, 24782, 24784,
//           24796, 24798, 24799, 24801, 24804, 24806, 24808, 24809, 24810,
//           24812, 24947, 24949, 24950, 24954, 24955, 24956, 24960, 24962,
//           24964, 24967, 24971, 24973, 24996, 24998, 25000, 25001, 25002,
//           25003, 25004, 25005, 25007, 25008, 25009, 25013, 25014, 25017,
//           25018, 25021, 25022, 25025, 25026, 25027, 25028, 25029, 25030,
//           25031, 25032, 25033, 25035, 25036, 25814, 25822, 25829, 25835,
//           25844, 25850, 25855, 25864, 25872, 25879, 25882, 25887, 25893,
//           27967, 28029, 28047, 28054, 28122, 28126, 28131, 28176, 28227,
//           28791, 28804, 28951, 29286, 29419, 29429, 29447, 29488, 29506,
//           29542, 29832, 29836, 29840, 29846, 29852, 29854, 29856, 29857,
//           29859, 29860, 29861, 29863, 29864, 29865, 29866, 29867, 29870,
//           29871, 29872, 29879, 29881, 29882, 29890, 29893, 29978, 30016,
//           30028, 30098, 30100, 30102, 30106, 30110, 30133, 30136, 30140,
//           30172, 30176, 30192, 30201, 30751, 30753, 30768, 30770, 30771,
//           30772, 30773, 30774, 30775, 30776, 30779, 30786, 30787, 30790,
//           30791, 30794, 30795, 30799, 30914, 30918, 30919, 30920, 30922,
//           30924, 30925, 30926, 30927, 30928, 30929, 30930, 30931, 30932,
//           30933, 30935, 30937, 30938, 30939, 30941, 30942, 30943, 30944,
//           30945, 30946, 30947, 30948, 30949, 30950, 30952, 31476, 31478,
//           31479, 31481, 31484, 31486, 31916, 32110, 32111, 32112, 32113,
//           32114, 32115, 32116, 32117, 32118, 32119, 32120, 32121, 32122,
//           32123, 32124, 32125, 32126, 32127, 32128, 32129, 32130, 32131,
//           32142, 32313, 32646, 32649, 32690, 32894, 32898, 32902, 32906,
//           32910, 32914, 32918, 32922, 32926, 32930, 32934, 32938, 33226,
//           33976, 34743, 35249, 35250, 35251, 35252, 35253, 35254, 35255,
//           35256, 35257, 35258, 35259, 35260, 35261, 35262, 35263, 35264,
//           35270, 35271, 35272, 35273, 35607, 35992, 36043, 36045, 36063,
//           36066, 36070, 36297, 36328, 36435, 36440, 36451, 36455, 36466,
//           36615, 36634, 36727, 36867, 36871, 37924, 38265, 38267, 38270,
//           38271, 38273, 38281, 38440, 38463, 38473, 38475, 38498, 38535,
//           38537, 38557, 38558, 38563, 38571, 38572, 38573, 38594, 38648,
//           38657, 38659, 38667, 38811, 39146, 39152, 39434, 39821, 40080,
//           40135, 40144, 41053, 41056, 41067, 41069, 41078, 41080, 41083,
//           41087, 41311, 41315, 41320, 41326, 41331, 41339, 41341, 41344,
//           41346, 41350, 41357, 41362, 41363, 41370, 41384, 41388, 41394,
//           41399, 41405, 41407, 41414, 41417, 41620, 41621, 41662, 41664,
//           41665, 41666, 41668, 41669, 41670, 41671, 41673, 41681, 41682,
//           41683, 41685, 41686, 41687, 41688, 41689, 41690, 42097, 42101,
//           42103, 42116, 42118, 42128, 42130, 42132, 42136, 42148, 42170,
//           42179, 42180, 42183, 42185, 42186, 42359, 42625, 42628, 42629,
//           42633, 42635, 42638, 42639, 42641, 42642, 42645, 42647, 43129,
//           43610, 43986, 44006, 44008, 44010, 44716, 44955, 45009, 45011,
//           45013, 45015, 45017, 45019, 45022, 45026, 45028, 45030, 45051,
//           45053, 45055, 45057, 45059, 45061, 45063, 45597, 45950, 45970,
//           45995, 46001, 46063, 46395, 46414, 46430, 46431, 46434, 46447,
//           46476, 46485, 46490, 46494, 46501, 46510, 46513, 46516, 46521,
//           46524, 46884, 46898, 46900, 47070, 47095, 47598, 47623, 47649,
//           47652, 47654, 47656, 47657, 47661, 47663, 47665, 47666, 47669,
//           47671, 47673, 47674, 47678, 47869, 47875, 47881, 47887, 47893,
//           47899, 47905, 47911, 47917, 47923, 47929, 47935, 48357, 48360,
//           48890, 48895, 49098, 49111, 49158, 49303, 49318, 49326, 49397,
//           49453, 50135, 50143, 50176, 50203, 50934, 50938, 51616, 51618,
//           51620, 51621, 51622, 51623, 51624, 51626, 51629, 51630, 51632,
//           51634, 51635, 51636, 51642, 51643, 51644, 51650, 51653, 51655,
//           51657, 52050, 52092, 52101, 52115, 52120, 52126, 52130, 52135,
//           52138, 52145, 52149, 52154, 52157, 52163, 52169, 52173, 52176,
//           52183, 52187, 52192, 52196, 52202, 52207, 52210, 52214, 52221,
//           52225, 52230, 52234, 52240, 52244, 52249, 52252, 52259, 52263,
//           52268, 52272, 52277, 52282, 52287, 52291, 52301, 52305, 52309,
//           52318, 52322, 52327, 52338, 52607, 52609, 52610, 52611, 52612,
//           52613, 52614, 52615, 52616, 52617, 52618, 52619, 52620, 52622,
//           52623, 52625, 52626, 52627, 52628, 52629, 52630, 52631, 52632,
//           52633, 52634, 52637, 52771, 52779, 52788, 52791, 52803, 52806,
//           52818, 52821, 52833, 52836, 52851, 52979, 52991, 52998, 53031,
//           54161, 54180, 54378, 54703, 54706, 54711, 54715, 54767, 54768,
//           54769, 54771, 54773, 54775, 54776, 54777, 54778, 54779, 54781,
//           54782, 54785, 54912, 54916, 54919, 54921, 54923, 54925, 54926,
//           54927, 54928, 54929, 54931, 54932, 54933, 54934, 54935, 54936,
//           54937, 54938, 54939, 54940, 54941, 54942, 54943, 54944, 54945,
//           54946, 54947, 54948, 54949, 54950, 54951, 54952, 54953, 54954,
//           54955, 54956, 54957, 54958, 54959, 54960, 54961, 54962, 54963,
//           54964, 54966, 54967, 54968, 54970, 54972, 54974, 55215, 55234,
//           55825, 55829, 55833, 55837, 55841, 55845, 55849, 55853, 55857,
//           55861, 55865, 56016, 56038, 56056, 56059, 57516, 57519, 57525,
//           57528, 57532, 57539, 57864, 57892, 57895, 57896, 57899, 57900,
//           57903, 57904, 57907, 57908, 57911, 57914, 57917, 57918, 57921,
//           57922, 57925, 57926, 57929, 57930, 57933, 57934, 57937, 57938,
//           57941, 58060, 58070, 58087, 58096, 58104, 58119, 58518, 58560,
//           58569, 58577, 58838, 58842, 58858, 58859, 58862, 58864, 58866,
//           58901, 58903, 58905, 58915, 58978, 59082, 59096, 59109, 59121,
//           59194, 59203, 59218, 59225, 59233, 59288, 59455, 59456, 59698,
//           59702, 59705, 59710, 59725, 59727, 59741, 59743, 59747, 59813,
//           60050, 60052, 60055, 60064, 60099, 60100, 60101, 60104, 60151,
//           60198, 60428, 60450, 60636, 60960, 61009, 61024, 61053, 61063,
//           61077, 61164, 61330, 61335, 61341, 61347, 61483, 61491, 61495,
//           61501, 62117, 62119, 62122, 62124, 62127, 62128, 62130, 62132,
//           62133, 62134, 62135, 62138, 62139, 62142, 62143, 62146, 62147,
//           62148, 62151, 62152, 62153, 62156, 62159, 62160, 62161, 62163,
//           62165, 62166, 62167, 62169, 62171, 62172, 62173, 62174, 62177,
//           62178, 62730, 63010, 63022, 63054, 63285, 63288, 63290, 63292,
//           63295, 63297, 63298, 63300, 63363, 63364, 63365, 63366, 63367,
//           63368, 63369, 63370, 63373, 63374, 63375, 63376, 63377, 63378,
//           63379, 63380, 63381, 63382, 63383, 63384, 63385, 63386, 63387,
//           63388, 63405, 63417, 63421, 63429, 63434, 63438, 63684, 63701,
//           64348, 64349, 64350, 64351, 64352, 64353, 64354, 64355, 64357,
//           64359, 64361, 64363, 64365, 64366, 64367, 64368, 64369, 64371,
//           64372, 64615, 64633, 64643, 64646, 64647, 64662, 65094, 65096,
//           65630, 65959, 66109, 66210, 66351, 66640, 66649, 66650, 66652,
//           66653, 66655, 66657, 66658, 66659, 66660, 66662, 66663, 66664,
//           66665, 66666, 66667, 66668, 66669, 66670, 66671, 66673, 66675,
//           66677, 67513, 67654, 67730
//
//          }}};
//
//  TEST_CASE("queue, 24h") {
//    utl::scoped_timer const timer("queue approach");
//
//    infrastructure const infra(soro::test::DE_ISS_OPTS);
//    timetable const tt(soro::test::DE_KSS_OPTS, infra);
//
//    ordering::graph const og(infra, tt, filter);
//    simulation::graph const sg(infra, tt, og);
//
//    mock_runtime const runtime_calculator;
//
//    auto const result = simulate_queue(sg, runtime_calculator);
//    CHECK(check_result(result));
//  }
//
// #if defined(SORO_TBB)
//  TEST_CASE("tbb, 24h") {
//    utl::scoped_timer const timer("tbb approach");
//
//    infrastructure const infra(soro::test::DE_ISS_OPTS);
//    timetable const tt(soro::test::DE_KSS_OPTS, infra);
//
//    ordering::graph const og(infra, tt, filter);
//    simulation::graph const sg(infra, tt, og);
//
//    mock_runtime const runtime_calculator;
//
//    for (auto t = 1U; t < std::thread::hardware_concurrency() * 2; ++t) {
//      auto const result = simulate_tbb(sg, runtime_calculator, t);
//      CHECK(check_result(result));
//    }
//  }
// #endif
//
//  TEST_CASE("topological sort, 24h") {
//    utl::scoped_timer const timer("topological sort approach");
//
//    infrastructure const infra(soro::test::DE_ISS_OPTS);
//    timetable const tt(soro::test::DE_KSS_OPTS, infra);
//
//    ordering::graph const og(infra, tt, filter);
//    simulation::graph const sg(infra, tt, og);
//
//    mock_runtime const runtime_calculator;
//
//    auto const result = simulate_topo(sg, runtime_calculator);
//    CHECK(check_result(result));
//  }
//}
//
}  // namespace soro::sim::test
