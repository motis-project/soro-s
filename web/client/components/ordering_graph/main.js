(()=>{var t={796:t=>{t.exports=function(t,e){var r=e.length;if(0!==r){var i=t.length;t.length+=r;for(var a=0;a<r;a++)t[i+a]=e[a]}}},187:t=>{"use strict";var e,r="object"==typeof Reflect?Reflect:null,i=r&&"function"==typeof r.apply?r.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};e=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function o(){o.init.call(this)}t.exports=o,t.exports.once=function(t,e){return new Promise((function(r,i){function a(r){t.removeListener(e,o),i(r)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",a),r([].slice.call(arguments))}y(t,e,o,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&y(t,"error",e,{once:!0})}(t,a)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var n=10;function s(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function u(t){return void 0===t._maxListeners?o.defaultMaxListeners:t._maxListeners}function d(t,e,r,i){var a,o,n,d;if(s(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),n=o[e]),void 0===n)n=o[e]=r,++t._eventsCount;else if("function"==typeof n?n=o[e]=i?[r,n]:[n,r]:i?n.unshift(r):n.push(r),(a=u(t))>0&&n.length>a&&!n.warned){n.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=t,c.type=e,c.count=n.length,d=c,console&&console.warn&&console.warn(d)}return t}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(t,e,r){var i={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},a=c.bind(i);return a.listener=r,i.wrapFn=a,a}function l(t,e,r){var i=t._events;if(void 0===i)return[];var a=i[e];return void 0===a?[]:"function"==typeof a?r?[a.listener||a]:[a]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(a):p(a,a.length)}function g(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function p(t,e){for(var r=new Array(e),i=0;i<e;++i)r[i]=t[i];return r}function y(t,e,r,i){if("function"==typeof t.on)i.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function a(o){i.once&&t.removeEventListener(e,a),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return n},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");n=t}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var a="error"===t,o=this._events;if(void 0!==o)a=a&&void 0===o.error;else if(!a)return!1;if(a){var n;if(e.length>0&&(n=e[0]),n instanceof Error)throw n;var s=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw s.context=n,s}var u=o[t];if(void 0===u)return!1;if("function"==typeof u)i(u,this,e);else{var d=u.length,c=p(u,d);for(r=0;r<d;++r)i(c[r],this,e)}return!0},o.prototype.addListener=function(t,e){return d(this,t,e,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(t,e){return d(this,t,e,!0)},o.prototype.once=function(t,e){return s(e),this.on(t,h(this,t,e)),this},o.prototype.prependOnceListener=function(t,e){return s(e),this.prependListener(t,h(this,t,e)),this},o.prototype.removeListener=function(t,e){var r,i,a,o,n;if(s(e),void 0===(i=this._events))return this;if(void 0===(r=i[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(a=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){n=r[o].listener,a=o;break}if(a<0)return this;0===a?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,a),1===r.length&&(i[t]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",t,n||e)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(t){var e,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var a,o=Object.keys(r);for(i=0;i<o.length;++i)"removeListener"!==(a=o[i])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this},o.prototype.listeners=function(t){return l(this,t,!0)},o.prototype.rawListeners=function(t){return l(this,t,!1)},o.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):g.call(t,e)},o.prototype.listenerCount=g,o.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},695:(t,e,r)=>{var i=r(829),a=r(672);void 0===a.myNameSpace&&(a.myNameSpace=i),t.exports=i},672:(t,e,r)=>{"use strict";t.exports=function(){if("object"==typeof globalThis)return globalThis;var t;try{t=this||new Function("return this")()}catch(t){if("object"==typeof window)return window;if("object"==typeof self)return self;if(void 0!==r.g)return r.g}return t}()},186:t=>{t.exports=function(t){return null!==t&&"object"==typeof t&&"function"==typeof t.addUndirectedEdgeWithKey&&"function"==typeof t.dropNode&&"boolean"==typeof t.multi}},698:function(t){t.exports=function(){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,i(t,e)}function r(t){return r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},r(t)}function i(t,e){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},i(t,e)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function o(t,e,r){return o=a()?Reflect.construct.bind():function(t,e,r){var a=[null];a.push.apply(a,e);var o=new(Function.bind.apply(t,a));return r&&i(o,r.prototype),o},o.apply(null,arguments)}function n(t){var e="function"==typeof Map?new Map:void 0;return n=function(t){if(null===t||(a=t,-1===Function.toString.call(a).indexOf("[native code]")))return t;var a;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return o(t,arguments,r(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),i(n,t)},n(t)}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var u=function(){for(var t=arguments[0],e=1,r=arguments.length;e<r;e++)if(arguments[e])for(var i in arguments[e])t[i]=arguments[e][i];return t};function d(t,e,r,i){var a=t._nodes.get(e),o=null;return a?o="mixed"===i?a.out&&a.out[r]||a.undirected&&a.undirected[r]:"directed"===i?a.out&&a.out[r]:a.undirected&&a.undirected[r]:o}function c(e){return"object"===t(e)&&null!==e&&e.constructor===Object}function h(t){var e;for(e in t)return!1;return!0}function l(t,e,r){Object.defineProperty(t,e,{enumerable:!1,configurable:!1,writable:!0,value:r})}function g(t,e,r){var i={enumerable:!0,configurable:!0};"function"==typeof r?i.get=r:(i.value=r,i.writable=!1),Object.defineProperty(t,e,i)}function p(t){return!(!c(t)||t.attributes&&!Array.isArray(t.attributes))}"function"==typeof Object.assign&&(u=Object.assign);var y,f={exports:{}},b="object"==typeof Reflect?Reflect:null,v=b&&"function"==typeof b.apply?b.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};y=b&&"function"==typeof b.ownKeys?b.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var _=Number.isNaN||function(t){return t!=t};function m(){m.init.call(this)}f.exports=m,f.exports.once=function(t,e){return new Promise((function(r,i){function a(r){t.removeListener(e,o),i(r)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",a),r([].slice.call(arguments))}F(t,e,o,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&F(t,"error",e,{once:!0})}(t,a)}))},m.EventEmitter=m,m.prototype._events=void 0,m.prototype._eventsCount=0,m.prototype._maxListeners=void 0;var w=10;function k(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function x(t){return void 0===t._maxListeners?m.defaultMaxListeners:t._maxListeners}function E(t,e,r,i){var a,o,n,s;if(k(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),n=o[e]),void 0===n)n=o[e]=r,++t._eventsCount;else if("function"==typeof n?n=o[e]=i?[r,n]:[n,r]:i?n.unshift(r):n.push(r),(a=x(t))>0&&n.length>a&&!n.warned){n.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=n.length,s=u,console&&console.warn&&console.warn(s)}return t}function L(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function A(t,e,r){var i={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},a=L.bind(i);return a.listener=r,i.wrapFn=a,a}function S(t,e,r){var i=t._events;if(void 0===i)return[];var a=i[e];return void 0===a?[]:"function"==typeof a?r?[a.listener||a]:[a]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(a):G(a,a.length)}function C(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function G(t,e){for(var r=new Array(e),i=0;i<e;++i)r[i]=t[i];return r}function F(t,e,r,i){if("function"==typeof t.on)i.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function a(o){i.once&&t.removeEventListener(e,a),r(o)}))}}function D(t){if("function"!=typeof t)throw new Error("obliterator/iterator: expecting a function!");this.next=t}Object.defineProperty(m,"defaultMaxListeners",{enumerable:!0,get:function(){return w},set:function(t){if("number"!=typeof t||t<0||_(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");w=t}}),m.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},m.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||_(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},m.prototype.getMaxListeners=function(){return x(this)},m.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var i="error"===t,a=this._events;if(void 0!==a)i=i&&void 0===a.error;else if(!i)return!1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var n=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw n.context=o,n}var s=a[t];if(void 0===s)return!1;if("function"==typeof s)v(s,this,e);else{var u=s.length,d=G(s,u);for(r=0;r<u;++r)v(d[r],this,e)}return!0},m.prototype.addListener=function(t,e){return E(this,t,e,!1)},m.prototype.on=m.prototype.addListener,m.prototype.prependListener=function(t,e){return E(this,t,e,!0)},m.prototype.once=function(t,e){return k(e),this.on(t,A(this,t,e)),this},m.prototype.prependOnceListener=function(t,e){return k(e),this.prependListener(t,A(this,t,e)),this},m.prototype.removeListener=function(t,e){var r,i,a,o,n;if(k(e),void 0===(i=this._events))return this;if(void 0===(r=i[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(a=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){n=r[o].listener,a=o;break}if(a<0)return this;0===a?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,a),1===r.length&&(i[t]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",t,n||e)}return this},m.prototype.off=m.prototype.removeListener,m.prototype.removeAllListeners=function(t){var e,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var a,o=Object.keys(r);for(i=0;i<o.length;++i)"removeListener"!==(a=o[i])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this},m.prototype.listeners=function(t){return S(this,t,!0)},m.prototype.rawListeners=function(t){return S(this,t,!1)},m.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):C.call(t,e)},m.prototype.listenerCount=C,m.prototype.eventNames=function(){return this._eventsCount>0?y(this._events):[]},"undefined"!=typeof Symbol&&(D.prototype[Symbol.iterator]=function(){return this}),D.of=function(){var t=arguments,e=t.length,r=0;return new D((function(){return r>=e?{done:!0}:{done:!1,value:t[r++]}}))},D.empty=function(){return new D((function(){return{done:!0}}))},D.fromSequence=function(t){var e=0,r=t.length;return new D((function(){return e>=r?{done:!0}:{done:!1,value:t[e++]}}))},D.is=function(t){return t instanceof D||"object"==typeof t&&null!==t&&"function"==typeof t.next};var P=D,T={};T.ARRAY_BUFFER_SUPPORT="undefined"!=typeof ArrayBuffer,T.SYMBOL_SUPPORT="undefined"!=typeof Symbol;var O=P,M=T,R=M.ARRAY_BUFFER_SUPPORT,N=M.SYMBOL_SUPPORT,j=function(t){var e=function(t){return"string"==typeof t||Array.isArray(t)||R&&ArrayBuffer.isView(t)?O.fromSequence(t):"object"!=typeof t||null===t?null:N&&"function"==typeof t[Symbol.iterator]?t[Symbol.iterator]():"function"==typeof t.next?t:null}(t);if(!e)throw new Error("obliterator: target is not iterable nor a valid iterator.");return e},U=j,z=function(t,e){for(var r,i=arguments.length>1?e:1/0,a=i!==1/0?new Array(i):[],o=0,n=U(t);;){if(o===i)return a;if((r=n.next()).done)return o!==e&&(a.length=o),a;a[o++]=r.value}},B=function(t){function r(e){var r;return(r=t.call(this)||this).name="GraphError",r.message=e,r}return e(r,t),r}(n(Error)),I=function(t){function r(e){var i;return(i=t.call(this,e)||this).name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(i),r.prototype.constructor),i}return e(r,t),r}(B),W=function(t){function r(e){var i;return(i=t.call(this,e)||this).name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(i),r.prototype.constructor),i}return e(r,t),r}(B),q=function(t){function r(e){var i;return(i=t.call(this,e)||this).name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(i),r.prototype.constructor),i}return e(r,t),r}(B);function H(t,e){this.key=t,this.attributes=e,this.clear()}function Y(t,e){this.key=t,this.attributes=e,this.clear()}function V(t,e){this.key=t,this.attributes=e,this.clear()}function K(t,e,r,i,a){this.key=e,this.attributes=a,this.undirected=t,this.source=r,this.target=i}function Z(t,e,r,i,a,o,n){var s,u,d,c;if(i=""+i,0===r){if(!(s=t._nodes.get(i)))throw new W("Graph.".concat(e,': could not find the "').concat(i,'" node in the graph.'));d=a,c=o}else if(3===r){if(a=""+a,!(u=t._edges.get(a)))throw new W("Graph.".concat(e,': could not find the "').concat(a,'" edge in the graph.'));var h=u.source.key,l=u.target.key;if(i===h)s=u.target;else{if(i!==l)throw new W("Graph.".concat(e,': the "').concat(i,'" node is not attached to the "').concat(a,'" edge (').concat(h,", ").concat(l,")."));s=u.source}d=o,c=n}else{if(!(u=t._edges.get(i)))throw new W("Graph.".concat(e,': could not find the "').concat(i,'" edge in the graph.'));s=1===r?u.source:u.target,d=a,c=o}return[s,d,c]}H.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}},Y.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}},V.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}},K.prototype.attach=function(){var t="out",e="in";this.undirected&&(t=e="undirected");var r=this.source.key,i=this.target.key;this.source[t][i]=this,this.undirected&&r===i||(this.target[e][r]=this)},K.prototype.attachMulti=function(){var t="out",e="in",r=this.source.key,i=this.target.key;this.undirected&&(t=e="undirected");var a=this.source[t],o=a[i];if(void 0===o)return a[i]=this,void(this.undirected&&r===i||(this.target[e][r]=this));o.previous=this,this.next=o,a[i]=this,this.target[e][r]=this},K.prototype.detach=function(){var t=this.source.key,e=this.target.key,r="out",i="in";this.undirected&&(r=i="undirected"),delete this.source[r][e],delete this.target[i][t]},K.prototype.detachMulti=function(){var t=this.source.key,e=this.target.key,r="out",i="in";this.undirected&&(r=i="undirected"),void 0===this.previous?void 0===this.next?(delete this.source[r][e],delete this.target[i][t]):(this.next.previous=void 0,this.source[r][e]=this.next,this.target[i][t]=this.next):(this.previous.next=this.next,void 0!==this.next&&(this.next.previous=this.previous))};var X=[{name:function(t){return"get".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=Z(this,e,r,t,i,a),n=o[0],s=o[1];return n.attributes[s]}}},{name:function(t){return"get".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i){return Z(this,e,r,t,i)[0].attributes}}},{name:function(t){return"has".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=Z(this,e,r,t,i,a),n=o[0],s=o[1];return n.attributes.hasOwnProperty(s)}}},{name:function(t){return"set".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a,o){var n=Z(this,e,r,t,i,a,o),s=n[0],u=n[1],d=n[2];return s.attributes[u]=d,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(t){return"update".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a,o){var n=Z(this,e,r,t,i,a,o),s=n[0],u=n[1],d=n[2];if("function"!=typeof d)throw new I("Graph.".concat(e,": updater should be a function."));var c=s.attributes,h=d(c[u]);return c[u]=h,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:u}),this}}},{name:function(t){return"remove".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=Z(this,e,r,t,i,a),n=o[0],s=o[1];return delete n.attributes[s],this.emit("nodeAttributesUpdated",{key:n.key,type:"remove",attributes:n.attributes,name:s}),this}}},{name:function(t){return"replace".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=Z(this,e,r,t,i,a),n=o[0],s=o[1];if(!c(s))throw new I("Graph.".concat(e,": provided attributes are not a plain object."));return n.attributes=s,this.emit("nodeAttributesUpdated",{key:n.key,type:"replace",attributes:n.attributes}),this}}},{name:function(t){return"merge".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=Z(this,e,r,t,i,a),n=o[0],s=o[1];if(!c(s))throw new I("Graph.".concat(e,": provided attributes are not a plain object."));return u(n.attributes,s),this.emit("nodeAttributesUpdated",{key:n.key,type:"merge",attributes:n.attributes,data:s}),this}}},{name:function(t){return"update".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o=Z(this,e,r,t,i,a),n=o[0],s=o[1];if("function"!=typeof s)throw new I("Graph.".concat(e,": provided updater is not a function."));return n.attributes=s(n.attributes),this.emit("nodeAttributesUpdated",{key:n.key,type:"update",attributes:n.attributes}),this}}}],Q=[{name:function(t){return"get".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return a.attributes[i]}}},{name:function(t){return"get".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>1){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+t,o=""+arguments[1];if(!(i=d(this,a,o,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(a,'" - "').concat(o,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(i=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return i.attributes}}},{name:function(t){return"has".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return a.attributes.hasOwnProperty(i)}}},{name:function(t){return"set".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,s=""+i;if(i=arguments[2],a=arguments[3],!(o=d(this,n,s,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(n,'" - "').concat(s,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(o=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return o.attributes[i]=a,this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:i}),this}}},{name:function(t){return"update".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i,a){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var n=""+t,s=""+i;if(i=arguments[2],a=arguments[3],!(o=d(this,n,s,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(n,'" - "').concat(s,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(o=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if("function"!=typeof a)throw new I("Graph.".concat(e,": updater should be a function."));return o.attributes[i]=a(o.attributes[i]),this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:i}),this}}},{name:function(t){return"remove".concat(t,"Attribute")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}return delete a.attributes[i],this.emit("edgeAttributesUpdated",{key:a.key,type:"remove",attributes:a.attributes,name:i}),this}}},{name:function(t){return"replace".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if(!c(i))throw new I("Graph.".concat(e,": provided attributes are not a plain object."));return a.attributes=i,this.emit("edgeAttributesUpdated",{key:a.key,type:"replace",attributes:a.attributes}),this}}},{name:function(t){return"merge".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if(!c(i))throw new I("Graph.".concat(e,": provided attributes are not a plain object."));return u(a.attributes,i),this.emit("edgeAttributesUpdated",{key:a.key,type:"merge",attributes:a.attributes,data:i}),this}}},{name:function(t){return"update".concat(t,"Attributes")},attacher:function(t,e,r){t.prototype[e]=function(t,i){var a;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(e,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(e,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+t,n=""+i;if(i=arguments[2],!(a=d(this,o,n,r)))throw new W("Graph.".concat(e,': could not find an edge for the given path ("').concat(o,'" - "').concat(n,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(e,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(t=""+t,!(a=this._edges.get(t)))throw new W("Graph.".concat(e,': could not find the "').concat(t,'" edge in the graph.'))}if("function"!=typeof i)throw new I("Graph.".concat(e,": provided updater is not a function."));return a.attributes=i(a.attributes),this.emit("edgeAttributesUpdated",{key:a.key,type:"update",attributes:a.attributes}),this}}}],J=P,$=j,tt=function(){var t=arguments,e=null,r=-1;return new J((function(){for(var i=null;;){if(null===e){if(++r>=t.length)return{done:!0};e=$(t[r])}if(!0!==(i=e.next()).done)break;e=null}return i}))},et=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function rt(t,e,r,i){var a=!1;for(var o in e)if(o!==i){var n=e[o];if(a=r(n.key,n.attributes,n.source.key,n.target.key,n.source.attributes,n.target.attributes,n.undirected),t&&a)return n.key}}function it(t,e,r,i){var a,o,n,s=!1;for(var u in e)if(u!==i){a=e[u];do{if(o=a.source,n=a.target,s=r(a.key,a.attributes,o.key,n.key,o.attributes,n.attributes,a.undirected),t&&s)return a.key;a=a.next}while(void 0!==a)}}function at(t,e){var r,i=Object.keys(t),a=i.length,o=0;return new P((function(){do{if(r)r=r.next;else{if(o>=a)return{done:!0};var n=i[o++];if(n===e){r=void 0;continue}r=t[n]}}while(!r);return{done:!1,value:{edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected}}}))}function ot(t,e,r,i){var a=e[r];if(a){var o=a.source,n=a.target;return i(a.key,a.attributes,o.key,n.key,o.attributes,n.attributes,a.undirected)&&t?a.key:void 0}}function nt(t,e,r,i){var a=e[r];if(a){var o=!1;do{if(o=i(a.key,a.attributes,a.source.key,a.target.key,a.source.attributes,a.target.attributes,a.undirected),t&&o)return a.key;a=a.next}while(void 0!==a)}}function st(t,e){var r=t[e];return void 0!==r.next?new P((function(){if(!r)return{done:!0};var t={edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected};return r=r.next,{done:!1,value:t}})):P.of({edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected})}function ut(t,e){if(0===t.size)return[];if("mixed"===e||e===t.type)return"function"==typeof Array.from?Array.from(t._edges.keys()):z(t._edges.keys(),t._edges.size);for(var r,i,a="undirected"===e?t.undirectedSize:t.directedSize,o=new Array(a),n="undirected"===e,s=t._edges.values(),u=0;!0!==(r=s.next()).done;)(i=r.value).undirected===n&&(o[u++]=i.key);return o}function dt(t,e,r,i){if(0!==e.size)for(var a,o,n="mixed"!==r&&r!==e.type,s="undirected"===r,u=!1,d=e._edges.values();!0!==(a=d.next()).done;)if(o=a.value,!n||o.undirected===s){var c=o,h=c.key,l=c.attributes,g=c.source,p=c.target;if(u=i(h,l,g.key,p.key,g.attributes,p.attributes,o.undirected),t&&u)return h}}function ct(t,e){if(0===t.size)return P.empty();var r="mixed"!==e&&e!==t.type,i="undirected"===e,a=t._edges.values();return new P((function(){for(var t,e;;){if((t=a.next()).done)return t;if(e=t.value,!r||e.undirected===i)break}return{value:{edge:e.key,attributes:e.attributes,source:e.source.key,target:e.target.key,sourceAttributes:e.source.attributes,targetAttributes:e.target.attributes,undirected:e.undirected},done:!1}}))}function ht(t,e,r,i,a,o){var n,s=e?it:rt;if("undirected"!==r){if("out"!==i&&(n=s(t,a.in,o),t&&n))return n;if("in"!==i&&(n=s(t,a.out,o,i?void 0:a.key),t&&n))return n}if("directed"!==r&&(n=s(t,a.undirected,o),t&&n))return n}function lt(t,e,r,i){var a=[];return ht(!1,t,e,r,i,(function(t){a.push(t)})),a}function gt(t,e,r){var i=P.empty();return"undirected"!==t&&("out"!==e&&void 0!==r.in&&(i=tt(i,at(r.in))),"in"!==e&&void 0!==r.out&&(i=tt(i,at(r.out,e?void 0:r.key)))),"directed"!==t&&void 0!==r.undirected&&(i=tt(i,at(r.undirected))),i}function pt(t,e,r,i,a,o,n){var s,u=r?nt:ot;if("undirected"!==e){if(void 0!==a.in&&"out"!==i&&(s=u(t,a.in,o,n),t&&s))return s;if(void 0!==a.out&&"in"!==i&&(i||a.key!==o)&&(s=u(t,a.out,o,n),t&&s))return s}if("directed"!==e&&void 0!==a.undirected&&(s=u(t,a.undirected,o,n),t&&s))return s}function yt(t,e,r,i,a){var o=[];return pt(!1,t,e,r,i,a,(function(t){o.push(t)})),o}function ft(t,e,r,i){var a=P.empty();return"undirected"!==t&&(void 0!==r.in&&"out"!==e&&i in r.in&&(a=tt(a,st(r.in,i))),void 0!==r.out&&"in"!==e&&i in r.out&&(e||r.key!==i)&&(a=tt(a,st(r.out,i)))),"directed"!==t&&void 0!==r.undirected&&i in r.undirected&&(a=tt(a,st(r.undirected,i))),a}var bt=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function vt(){this.A=null,this.B=null}function _t(t,e,r,i,a){for(var o in i){var n=i[o],s=n.source,u=n.target,d=s===r?u:s;if(!e||!e.has(d.key)){var c=a(d.key,d.attributes);if(t&&c)return d.key}}}function mt(t,e,r,i,a){if("mixed"!==e){if("undirected"===e)return _t(t,null,i,i.undirected,a);if("string"==typeof r)return _t(t,null,i,i[r],a)}var o,n=new vt;if("undirected"!==e){if("out"!==r){if(o=_t(t,null,i,i.in,a),t&&o)return o;n.wrap(i.in)}if("in"!==r){if(o=_t(t,n,i,i.out,a),t&&o)return o;n.wrap(i.out)}}if("directed"!==e&&(o=_t(t,n,i,i.undirected,a),t&&o))return o}function wt(t,e,r){var i=Object.keys(r),a=i.length,o=0;return new P((function(){var n=null;do{if(o>=a)return t&&t.wrap(r),{done:!0};var s=r[i[o++]],u=s.source,d=s.target;n=u===e?d:u,t&&t.has(n.key)&&(n=null)}while(null===n);return{done:!1,value:{neighbor:n.key,attributes:n.attributes}}}))}function kt(t,e,r,i,a){for(var o,n,s,u,d,c,h,l=i._nodes.values(),g=i.type;!0!==(o=l.next()).done;){var p=!1;if(n=o.value,"undirected"!==g)for(s in u=n.out){d=u[s];do{if(c=d.target,p=!0,h=a(n.key,c.key,n.attributes,c.attributes,d.key,d.attributes,d.undirected),t&&h)return d;d=d.next}while(d)}if("directed"!==g)for(s in u=n.undirected)if(!(e&&n.key>s)){d=u[s];do{if((c=d.target).key!==s&&(c=d.source),p=!0,h=a(n.key,c.key,n.attributes,c.attributes,d.key,d.attributes,d.undirected),t&&h)return d;d=d.next}while(d)}if(r&&!p&&(h=a(n.key,null,n.attributes,null,null,null,null),t&&h))return null}}function xt(t){if(!c(t))throw new I('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in t))throw new I("Graph.import: serialized node is missing its key.");if("attributes"in t&&(!c(t.attributes)||null===t.attributes))throw new I("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function Et(t){if(!c(t))throw new I('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in t))throw new I("Graph.import: serialized edge is missing its source.");if(!("target"in t))throw new I("Graph.import: serialized edge is missing its target.");if("attributes"in t&&(!c(t.attributes)||null===t.attributes))throw new I("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in t&&"boolean"!=typeof t.undirected)throw new I("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}vt.prototype.wrap=function(t){null===this.A?this.A=t:null===this.B&&(this.B=t)},vt.prototype.has=function(t){return null!==this.A&&t in this.A||null!==this.B&&t in this.B};var Lt,At=(Lt=255&Math.floor(256*Math.random()),function(){return Lt++}),St=new Set(["directed","undirected","mixed"]),Ct=new Set(["domain","_events","_eventsCount","_maxListeners"]),Gt={allowSelfLoops:!0,multi:!1,type:"mixed"};function Ft(t,e,r){var i=new t.NodeDataClass(e,r);return t._nodes.set(e,i),t.emit("nodeAdded",{key:e,attributes:r}),i}function Dt(t,e,r,i,a,o,n,s){if(!i&&"undirected"===t.type)throw new q("Graph.".concat(e,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(i&&"directed"===t.type)throw new q("Graph.".concat(e,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(s&&!c(s))throw new I("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(s,'"'));if(o=""+o,n=""+n,s=s||{},!t.allowSelfLoops&&o===n)throw new q("Graph.".concat(e,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var u=t._nodes.get(o),d=t._nodes.get(n);if(!u)throw new W("Graph.".concat(e,': source node "').concat(o,'" not found.'));if(!d)throw new W("Graph.".concat(e,': target node "').concat(n,'" not found.'));var h={key:null,undirected:i,source:o,target:n,attributes:s};if(r)a=t._edgeKeyGenerator();else if(a=""+a,t._edges.has(a))throw new q("Graph.".concat(e,': the "').concat(a,'" edge already exists in the graph.'));if(!t.multi&&(i?void 0!==u.undirected[n]:void 0!==u.out[n]))throw new q("Graph.".concat(e,': an edge linking "').concat(o,'" to "').concat(n,"\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option."));var l=new K(i,a,u,d,s);t._edges.set(a,l);var g=o===n;return i?(u.undirectedDegree++,d.undirectedDegree++,g&&(u.undirectedLoops++,t._undirectedSelfLoopCount++)):(u.outDegree++,d.inDegree++,g&&(u.directedLoops++,t._directedSelfLoopCount++)),t.multi?l.attachMulti():l.attach(),i?t._undirectedSize++:t._directedSize++,h.key=a,t.emit("edgeAdded",h),a}function Pt(t,e,r,i,a,o,n,s,d){if(!i&&"undirected"===t.type)throw new q("Graph.".concat(e,": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));if(i&&"directed"===t.type)throw new q("Graph.".concat(e,": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));if(s)if(d){if("function"!=typeof s)throw new I("Graph.".concat(e,': invalid updater function. Expecting a function but got "').concat(s,'"'))}else if(!c(s))throw new I("Graph.".concat(e,': invalid attributes. Expecting an object but got "').concat(s,'"'));var h;if(o=""+o,n=""+n,d&&(h=s,s=void 0),!t.allowSelfLoops&&o===n)throw new q("Graph.".concat(e,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var l,g,p=t._nodes.get(o),y=t._nodes.get(n);if(!r&&(l=t._edges.get(a))){if(!(l.source.key===o&&l.target.key===n||i&&l.source.key===n&&l.target.key===o))throw new q("Graph.".concat(e,': inconsistency detected when attempting to merge the "').concat(a,'" edge with "').concat(o,'" source & "').concat(n,'" target vs. ("').concat(l.source.key,'", "').concat(l.target.key,'").'));g=l}if(g||t.multi||!p||(g=i?p.undirected[n]:p.out[n]),g){var f=[g.key,!1,!1,!1];if(d?!h:!s)return f;if(d){var b=g.attributes;g.attributes=h(b),t.emit("edgeAttributesUpdated",{type:"replace",key:g.key,attributes:g.attributes})}else u(g.attributes,s),t.emit("edgeAttributesUpdated",{type:"merge",key:g.key,attributes:g.attributes,data:s});return f}s=s||{},d&&h&&(s=h(s));var v={key:null,undirected:i,source:o,target:n,attributes:s};if(r)a=t._edgeKeyGenerator();else if(a=""+a,t._edges.has(a))throw new q("Graph.".concat(e,': the "').concat(a,'" edge already exists in the graph.'));var _=!1,m=!1;p||(p=Ft(t,o,{}),_=!0,o===n&&(y=p,m=!0)),y||(y=Ft(t,n,{}),m=!0),l=new K(i,a,p,y,s),t._edges.set(a,l);var w=o===n;return i?(p.undirectedDegree++,y.undirectedDegree++,w&&(p.undirectedLoops++,t._undirectedSelfLoopCount++)):(p.outDegree++,y.inDegree++,w&&(p.directedLoops++,t._directedSelfLoopCount++)),t.multi?l.attachMulti():l.attach(),i?t._undirectedSize++:t._directedSize++,v.key=a,t.emit("edgeAdded",v),[a,!0,_,m]}function Tt(t,e){t._edges.delete(e.key);var r=e.source,i=e.target,a=e.attributes,o=e.undirected,n=r===i;o?(r.undirectedDegree--,i.undirectedDegree--,n&&(r.undirectedLoops--,t._undirectedSelfLoopCount--)):(r.outDegree--,i.inDegree--,n&&(r.directedLoops--,t._directedSelfLoopCount--)),t.multi?e.detachMulti():e.detach(),o?t._undirectedSize--:t._directedSize--,t.emit("edgeDropped",{key:e.key,attributes:a,source:r.key,target:i.key,undirected:o})}var Ot=function(r){function i(t){var e;if(e=r.call(this)||this,"boolean"!=typeof(t=u({},Gt,t)).multi)throw new I("Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"".concat(t.multi,'".'));if(!St.has(t.type))throw new I('Graph.constructor: invalid \'type\' option. Should be one of "mixed", "directed" or "undirected" but got "'.concat(t.type,'".'));if("boolean"!=typeof t.allowSelfLoops)throw new I("Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"".concat(t.allowSelfLoops,'".'));var i="mixed"===t.type?H:"directed"===t.type?Y:V;l(s(e),"NodeDataClass",i);var a="geid_"+At()+"_",o=0;return l(s(e),"_attributes",{}),l(s(e),"_nodes",new Map),l(s(e),"_edges",new Map),l(s(e),"_directedSize",0),l(s(e),"_undirectedSize",0),l(s(e),"_directedSelfLoopCount",0),l(s(e),"_undirectedSelfLoopCount",0),l(s(e),"_edgeKeyGenerator",(function(){var t;do{t=a+o++}while(e._edges.has(t));return t})),l(s(e),"_options",t),Ct.forEach((function(t){return l(s(e),t,e[t])})),g(s(e),"order",(function(){return e._nodes.size})),g(s(e),"size",(function(){return e._edges.size})),g(s(e),"directedSize",(function(){return e._directedSize})),g(s(e),"undirectedSize",(function(){return e._undirectedSize})),g(s(e),"selfLoopCount",(function(){return e._directedSelfLoopCount+e._undirectedSelfLoopCount})),g(s(e),"directedSelfLoopCount",(function(){return e._directedSelfLoopCount})),g(s(e),"undirectedSelfLoopCount",(function(){return e._undirectedSelfLoopCount})),g(s(e),"multi",e._options.multi),g(s(e),"type",e._options.type),g(s(e),"allowSelfLoops",e._options.allowSelfLoops),g(s(e),"implementation",(function(){return"graphology"})),e}e(i,r);var a=i.prototype;return a._resetInstanceCounters=function(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0},a.hasNode=function(t){return this._nodes.has(""+t)},a.hasDirectedEdge=function(t,e){if("undirected"===this.type)return!1;if(1===arguments.length){var r=""+t,i=this._edges.get(r);return!!i&&!i.undirected}if(2===arguments.length){t=""+t,e=""+e;var a=this._nodes.get(t);return!!a&&a.out.hasOwnProperty(e)}throw new I("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},a.hasUndirectedEdge=function(t,e){if("directed"===this.type)return!1;if(1===arguments.length){var r=""+t,i=this._edges.get(r);return!!i&&i.undirected}if(2===arguments.length){t=""+t,e=""+e;var a=this._nodes.get(t);return!!a&&a.undirected.hasOwnProperty(e)}throw new I("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},a.hasEdge=function(t,e){if(1===arguments.length){var r=""+t;return this._edges.has(r)}if(2===arguments.length){t=""+t,e=""+e;var i=this._nodes.get(t);return!!i&&(void 0!==i.out&&i.out.hasOwnProperty(e)||void 0!==i.undirected&&i.undirected.hasOwnProperty(e))}throw new I("Graph.hasEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},a.directedEdge=function(t,e){if("undirected"!==this.type){if(t=""+t,e=""+e,this.multi)throw new q("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");var r=this._nodes.get(t);if(!r)throw new W('Graph.directedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.directedEdge: could not find the "'.concat(e,'" target node in the graph.'));var i=r.out&&r.out[e]||void 0;return i?i.key:void 0}},a.undirectedEdge=function(t,e){if("directed"!==this.type){if(t=""+t,e=""+e,this.multi)throw new q("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");var r=this._nodes.get(t);if(!r)throw new W('Graph.undirectedEdge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.undirectedEdge: could not find the "'.concat(e,'" target node in the graph.'));var i=r.undirected&&r.undirected[e]||void 0;return i?i.key:void 0}},a.edge=function(t,e){if(this.multi)throw new q("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.edge: could not find the "'.concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W('Graph.edge: could not find the "'.concat(e,'" target node in the graph.'));var i=r.out&&r.out[e]||r.undirected&&r.undirected[e]||void 0;if(i)return i.key},a.areDirectedNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areDirectedNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&(e in r.in||e in r.out)},a.areOutNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areOutNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.out},a.areInNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areInNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.in},a.areUndirectedNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areUndirectedNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"directed"!==this.type&&e in r.undirected},a.areNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&(e in r.in||e in r.out)||"directed"!==this.type&&e in r.undirected},a.areInboundNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areInboundNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.in||"directed"!==this.type&&e in r.undirected},a.areOutboundNeighbors=function(t,e){t=""+t,e=""+e;var r=this._nodes.get(t);if(!r)throw new W('Graph.areOutboundNeighbors: could not find the "'.concat(t,'" node in the graph.'));return"undirected"!==this.type&&e in r.out||"directed"!==this.type&&e in r.undirected},a.inDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree},a.outDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.outDegree},a.directedDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.directedDegree: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree+e.outDegree},a.undirectedDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.undirectedDegree: could not find the "'.concat(t,'" node in the graph.'));return"directed"===this.type?0:e.undirectedDegree},a.inboundDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inboundDegree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.inDegree),r},a.outboundDegree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outboundDegree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.outDegree),r},a.degree=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.degree: could not find the "'.concat(t,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=e.undirectedDegree),"undirected"!==this.type&&(r+=e.inDegree+e.outDegree),r},a.inDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree-e.directedLoops},a.outDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.outDegree-e.directedLoops},a.directedDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"undirected"===this.type?0:e.inDegree+e.outDegree-2*e.directedLoops},a.undirectedDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));return"directed"===this.type?0:e.undirectedDegree-2*e.undirectedLoops},a.inboundDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,i=0;return"directed"!==this.type&&(r+=e.undirectedDegree,i+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.inDegree,i+=e.directedLoops),r-i},a.outboundDegreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,i=0;return"directed"!==this.type&&(r+=e.undirectedDegree,i+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.outDegree,i+=e.directedLoops),r-i},a.degreeWithoutSelfLoops=function(t){t=""+t;var e=this._nodes.get(t);if(!e)throw new W('Graph.degreeWithoutSelfLoops: could not find the "'.concat(t,'" node in the graph.'));var r=0,i=0;return"directed"!==this.type&&(r+=e.undirectedDegree,i+=2*e.undirectedLoops),"undirected"!==this.type&&(r+=e.inDegree+e.outDegree,i+=2*e.directedLoops),r-i},a.source=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.source: could not find the "'.concat(t,'" edge in the graph.'));return e.source.key},a.target=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.target: could not find the "'.concat(t,'" edge in the graph.'));return e.target.key},a.extremities=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.extremities: could not find the "'.concat(t,'" edge in the graph.'));return[e.source.key,e.target.key]},a.opposite=function(t,e){t=""+t,e=""+e;var r=this._edges.get(e);if(!r)throw new W('Graph.opposite: could not find the "'.concat(e,'" edge in the graph.'));var i=r.source.key,a=r.target.key;if(t===i)return a;if(t===a)return i;throw new W('Graph.opposite: the "'.concat(t,'" node is not attached to the "').concat(e,'" edge (').concat(i,", ").concat(a,")."))},a.hasExtremity=function(t,e){t=""+t,e=""+e;var r=this._edges.get(t);if(!r)throw new W('Graph.hasExtremity: could not find the "'.concat(t,'" edge in the graph.'));return r.source.key===e||r.target.key===e},a.isUndirected=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isUndirected: could not find the "'.concat(t,'" edge in the graph.'));return e.undirected},a.isDirected=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isDirected: could not find the "'.concat(t,'" edge in the graph.'));return!e.undirected},a.isSelfLoop=function(t){t=""+t;var e=this._edges.get(t);if(!e)throw new W('Graph.isSelfLoop: could not find the "'.concat(t,'" edge in the graph.'));return e.source===e.target},a.addNode=function(t,e){var r=function(t,e,r){if(r&&!c(r))throw new I('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(r,'"'));if(e=""+e,r=r||{},t._nodes.has(e))throw new q('Graph.addNode: the "'.concat(e,'" node already exist in the graph.'));var i=new t.NodeDataClass(e,r);return t._nodes.set(e,i),t.emit("nodeAdded",{key:e,attributes:r}),i}(this,t,e);return r.key},a.mergeNode=function(t,e){if(e&&!c(e))throw new I('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(e,'"'));t=""+t,e=e||{};var r=this._nodes.get(t);return r?(e&&(u(r.attributes,e),this.emit("nodeAttributesUpdated",{type:"merge",key:t,attributes:r.attributes,data:e})),[t,!1]):(r=new this.NodeDataClass(t,e),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:e}),[t,!0])},a.updateNode=function(t,e){if(e&&"function"!=typeof e)throw new I('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(e,'"'));t=""+t;var r=this._nodes.get(t);if(r){if(e){var i=r.attributes;r.attributes=e(i),this.emit("nodeAttributesUpdated",{type:"replace",key:t,attributes:r.attributes})}return[t,!1]}var a=e?e({}):{};return r=new this.NodeDataClass(t,a),this._nodes.set(t,r),this.emit("nodeAdded",{key:t,attributes:a}),[t,!0]},a.dropNode=function(t){t=""+t;var e,r=this._nodes.get(t);if(!r)throw new W('Graph.dropNode: could not find the "'.concat(t,'" node in the graph.'));if("undirected"!==this.type){for(var i in r.out){e=r.out[i];do{Tt(this,e),e=e.next}while(e)}for(var a in r.in){e=r.in[a];do{Tt(this,e),e=e.next}while(e)}}if("directed"!==this.type)for(var o in r.undirected){e=r.undirected[o];do{Tt(this,e),e=e.next}while(e)}this._nodes.delete(t),this.emit("nodeDropped",{key:t,attributes:r.attributes})},a.dropEdge=function(t){var e;if(arguments.length>1){var r=""+arguments[0],i=""+arguments[1];if(!(e=d(this,r,i,this.type)))throw new W('Graph.dropEdge: could not find the "'.concat(r,'" -> "').concat(i,'" edge in the graph.'))}else if(t=""+t,!(e=this._edges.get(t)))throw new W('Graph.dropEdge: could not find the "'.concat(t,'" edge in the graph.'));return Tt(this,e),this},a.dropDirectedEdge=function(t,e){if(arguments.length<2)throw new q("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new q("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=d(this,t=""+t,e=""+e,"directed");if(!r)throw new W('Graph.dropDirectedEdge: could not find a "'.concat(t,'" -> "').concat(e,'" edge in the graph.'));return Tt(this,r),this},a.dropUndirectedEdge=function(t,e){if(arguments.length<2)throw new q("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new q("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=d(this,t,e,"undirected");if(!r)throw new W('Graph.dropUndirectedEdge: could not find a "'.concat(t,'" -> "').concat(e,'" edge in the graph.'));return Tt(this,r),this},a.clear=function(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")},a.clearEdges=function(){for(var t,e=this._nodes.values();!0!==(t=e.next()).done;)t.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")},a.getAttribute=function(t){return this._attributes[t]},a.getAttributes=function(){return this._attributes},a.hasAttribute=function(t){return this._attributes.hasOwnProperty(t)},a.setAttribute=function(t,e){return this._attributes[t]=e,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},a.updateAttribute=function(t,e){if("function"!=typeof e)throw new I("Graph.updateAttribute: updater should be a function.");var r=this._attributes[t];return this._attributes[t]=e(r),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:t}),this},a.removeAttribute=function(t){return delete this._attributes[t],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:t}),this},a.replaceAttributes=function(t){if(!c(t))throw new I("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=t,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this},a.mergeAttributes=function(t){if(!c(t))throw new I("Graph.mergeAttributes: provided attributes are not a plain object.");return u(this._attributes,t),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:t}),this},a.updateAttributes=function(t){if("function"!=typeof t)throw new I("Graph.updateAttributes: provided updater is not a function.");return this._attributes=t(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this},a.updateEachNodeAttributes=function(t,e){if("function"!=typeof t)throw new I("Graph.updateEachNodeAttributes: expecting an updater function.");if(e&&!p(e))throw new I("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,i,a=this._nodes.values();!0!==(r=a.next()).done;)(i=r.value).attributes=t(i.key,i.attributes);this.emit("eachNodeAttributesUpdated",{hints:e||null})},a.updateEachEdgeAttributes=function(t,e){if("function"!=typeof t)throw new I("Graph.updateEachEdgeAttributes: expecting an updater function.");if(e&&!p(e))throw new I("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,i,a,o,n=this._edges.values();!0!==(r=n.next()).done;)a=(i=r.value).source,o=i.target,i.attributes=t(i.key,i.attributes,a.key,o.key,a.attributes,o.attributes,i.undirected);this.emit("eachEdgeAttributesUpdated",{hints:e||null})},a.forEachAdjacencyEntry=function(t){if("function"!=typeof t)throw new I("Graph.forEachAdjacencyEntry: expecting a callback.");kt(!1,!1,!1,this,t)},a.forEachAdjacencyEntryWithOrphans=function(t){if("function"!=typeof t)throw new I("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");kt(!1,!1,!0,this,t)},a.forEachAssymetricAdjacencyEntry=function(t){if("function"!=typeof t)throw new I("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");kt(!1,!0,!1,this,t)},a.forEachAssymetricAdjacencyEntryWithOrphans=function(t){if("function"!=typeof t)throw new I("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");kt(!1,!0,!0,this,t)},a.nodes=function(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):z(this._nodes.keys(),this._nodes.size)},a.forEachNode=function(t){if("function"!=typeof t)throw new I("Graph.forEachNode: expecting a callback.");for(var e,r,i=this._nodes.values();!0!==(e=i.next()).done;)t((r=e.value).key,r.attributes)},a.findNode=function(t){if("function"!=typeof t)throw new I("Graph.findNode: expecting a callback.");for(var e,r,i=this._nodes.values();!0!==(e=i.next()).done;)if(t((r=e.value).key,r.attributes))return r.key},a.mapNodes=function(t){if("function"!=typeof t)throw new I("Graph.mapNode: expecting a callback.");for(var e,r,i=this._nodes.values(),a=new Array(this.order),o=0;!0!==(e=i.next()).done;)r=e.value,a[o++]=t(r.key,r.attributes);return a},a.someNode=function(t){if("function"!=typeof t)throw new I("Graph.someNode: expecting a callback.");for(var e,r,i=this._nodes.values();!0!==(e=i.next()).done;)if(t((r=e.value).key,r.attributes))return!0;return!1},a.everyNode=function(t){if("function"!=typeof t)throw new I("Graph.everyNode: expecting a callback.");for(var e,r,i=this._nodes.values();!0!==(e=i.next()).done;)if(!t((r=e.value).key,r.attributes))return!1;return!0},a.filterNodes=function(t){if("function"!=typeof t)throw new I("Graph.filterNodes: expecting a callback.");for(var e,r,i=this._nodes.values(),a=[];!0!==(e=i.next()).done;)t((r=e.value).key,r.attributes)&&a.push(r.key);return a},a.reduceNodes=function(t,e){if("function"!=typeof t)throw new I("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new I("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");for(var r,i,a=e,o=this._nodes.values();!0!==(r=o.next()).done;)a=t(a,(i=r.value).key,i.attributes);return a},a.nodeEntries=function(){var t=this._nodes.values();return new P((function(){var e=t.next();if(e.done)return e;var r=e.value;return{value:{node:r.key,attributes:r.attributes},done:!1}}))},a.export=function(){var t=this,e=new Array(this._nodes.size),r=0;this._nodes.forEach((function(t,i){e[r++]=function(t,e){var r={key:t};return h(e.attributes)||(r.attributes=u({},e.attributes)),r}(i,t)}));var i=new Array(this._edges.size);return r=0,this._edges.forEach((function(e,a){i[r++]=function(t,e,r){var i={key:e,source:r.source.key,target:r.target.key};return h(r.attributes)||(i.attributes=u({},r.attributes)),"mixed"===t&&r.undirected&&(i.undirected=!0),i}(t.type,a,e)})),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:e,edges:i}},a.import=function(t){var e,r,a,o,n,s=this,u=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t instanceof i)return t.forEachNode((function(t,e){u?s.mergeNode(t,e):s.addNode(t,e)})),t.forEachEdge((function(t,e,r,i,a,o,n){u?n?s.mergeUndirectedEdgeWithKey(t,r,i,e):s.mergeDirectedEdgeWithKey(t,r,i,e):n?s.addUndirectedEdgeWithKey(t,r,i,e):s.addDirectedEdgeWithKey(t,r,i,e)})),this;if(!c(t))throw new I("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(t.attributes){if(!c(t.attributes))throw new I("Graph.import: invalid attributes. Expecting a plain object.");u?this.mergeAttributes(t.attributes):this.replaceAttributes(t.attributes)}if(t.nodes){if(a=t.nodes,!Array.isArray(a))throw new I("Graph.import: invalid nodes. Expecting an array.");for(e=0,r=a.length;e<r;e++){xt(o=a[e]);var d=o,h=d.key,l=d.attributes;u?this.mergeNode(h,l):this.addNode(h,l)}}if(t.edges){var g=!1;if("undirected"===this.type&&(g=!0),a=t.edges,!Array.isArray(a))throw new I("Graph.import: invalid edges. Expecting an array.");for(e=0,r=a.length;e<r;e++){Et(n=a[e]);var p=n,y=p.source,f=p.target,b=p.attributes,v=p.undirected,_=void 0===v?g:v;"key"in n?(u?_?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:_?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey).call(this,n.key,y,f,b):(u?_?this.mergeUndirectedEdge:this.mergeDirectedEdge:_?this.addUndirectedEdge:this.addDirectedEdge).call(this,y,f,b)}}return this},a.nullCopy=function(t){var e=new i(u({},this._options,t));return e.replaceAttributes(u({},this.getAttributes())),e},a.emptyCopy=function(t){var e=this.nullCopy(t);return this._nodes.forEach((function(t,r){var i=u({},t.attributes);t=new e.NodeDataClass(r,i),e._nodes.set(r,t)})),e},a.copy=function(t){if("string"==typeof(t=t||{}).type&&t.type!==this.type&&"mixed"!==t.type)throw new q('Graph.copy: cannot create an incompatible copy from "'.concat(this.type,'" type to "').concat(t.type,'" because this would mean losing information about the current graph.'));if("boolean"==typeof t.multi&&t.multi!==this.multi&&!0!==t.multi)throw new q("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if("boolean"==typeof t.allowSelfLoops&&t.allowSelfLoops!==this.allowSelfLoops&&!0!==t.allowSelfLoops)throw new q("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");for(var e,r,i=this.emptyCopy(t),a=this._edges.values();!0!==(e=a.next()).done;)Dt(i,"copy",!1,(r=e.value).undirected,r.key,r.source.key,r.target.key,u({},r.attributes));return i},a.toJSON=function(){return this.export()},a.toString=function(){return"[object Graph]"},a.inspect=function(){var e=this,r={};this._nodes.forEach((function(t,e){r[e]=t.attributes}));var i={},a={};this._edges.forEach((function(t,r){var o,n=t.undirected?"--":"->",s="",u=t.source.key,d=t.target.key;t.undirected&&u>d&&(o=u,u=d,d=o);var c="(".concat(u,")").concat(n,"(").concat(d,")");r.startsWith("geid_")?e.multi&&(void 0===a[c]?a[c]=0:a[c]++,s+="".concat(a[c],". ")):s+="[".concat(r,"]: "),i[s+=c]=t.attributes}));var o={};for(var n in this)this.hasOwnProperty(n)&&!Ct.has(n)&&"function"!=typeof this[n]&&"symbol"!==t(n)&&(o[n]=this[n]);return o.attributes=this._attributes,o.nodes=r,o.edges=i,l(o,"constructor",this.constructor),o},i}(f.exports.EventEmitter);"undefined"!=typeof Symbol&&(Ot.prototype[Symbol.for("nodejs.util.inspect.custom")]=Ot.prototype.inspect),[{name:function(t){return"".concat(t,"Edge")},generateKey:!0},{name:function(t){return"".concat(t,"DirectedEdge")},generateKey:!0,type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdge")},generateKey:!0,type:"undirected"},{name:function(t){return"".concat(t,"EdgeWithKey")}},{name:function(t){return"".concat(t,"DirectedEdgeWithKey")},type:"directed"},{name:function(t){return"".concat(t,"UndirectedEdgeWithKey")},type:"undirected"}].forEach((function(t){["add","merge","update"].forEach((function(e){var r=t.name(e),i="add"===e?Dt:Pt;t.generateKey?Ot.prototype[r]=function(a,o,n){return i(this,r,!0,"undirected"===(t.type||this.type),null,a,o,n,"update"===e)}:Ot.prototype[r]=function(a,o,n,s){return i(this,r,!1,"undirected"===(t.type||this.type),a,o,n,s,"update"===e)}}))})),function(t){X.forEach((function(e){var r=e.name,i=e.attacher;i(t,r("Node"),0),i(t,r("Source"),1),i(t,r("Target"),2),i(t,r("Opposite"),3)}))}(Ot),function(t){Q.forEach((function(e){var r=e.name,i=e.attacher;i(t,r("Edge"),"mixed"),i(t,r("DirectedEdge"),"directed"),i(t,r("UndirectedEdge"),"undirected")}))}(Ot),function(t){et.forEach((function(e){!function(t,e){var r=e.name,i=e.type,a=e.direction;t.prototype[r]=function(t,e){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return[];if(!arguments.length)return ut(this,i);if(1===arguments.length){t=""+t;var o=this._nodes.get(t);if(void 0===o)throw new W("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return lt(this.multi,"mixed"===i?this.type:i,a,o)}if(2===arguments.length){t=""+t,e=""+e;var n=this._nodes.get(t);if(!n)throw new W("Graph.".concat(r,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(r,':  could not find the "').concat(e,'" target node in the graph.'));return yt(i,this.multi,a,n,e)}throw new I("Graph.".concat(r,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e,r){if("mixed"===i||"mixed"===this.type||i===this.type){if(1===arguments.length)return dt(!1,this,i,r=t);if(2===arguments.length){t=""+t,r=e;var n=this._nodes.get(t);if(void 0===n)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return ht(!1,this.multi,"mixed"===i?this.type:i,a,n,r)}if(3===arguments.length){t=""+t,e=""+e;var s=this._nodes.get(t);if(!s)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return pt(!1,i,this.multi,a,s,e,r)}throw new I("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))}};var n="map"+r[0].toUpperCase()+r.slice(1);t.prototype[n]=function(){var t,e=Array.prototype.slice.call(arguments),r=e.pop();if(0===e.length){var a=0;"directed"!==i&&(a+=this.undirectedSize),"undirected"!==i&&(a+=this.directedSize),t=new Array(a);var n=0;e.push((function(e,i,a,o,s,u,d){t[n++]=r(e,i,a,o,s,u,d)}))}else t=[],e.push((function(e,i,a,o,n,s,u){t.push(r(e,i,a,o,n,s,u))}));return this[o].apply(this,e),t};var s="filter"+r[0].toUpperCase()+r.slice(1);t.prototype[s]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop(),r=[];return t.push((function(t,i,a,o,n,s,u){e(t,i,a,o,n,s,u)&&r.push(t)})),this[o].apply(this,t),r};var u="reduce"+r[0].toUpperCase()+r.slice(1);t.prototype[u]=function(){var t,e,r=Array.prototype.slice.call(arguments);if(r.length<2||r.length>4)throw new I("Graph.".concat(u,": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(r.length,")."));if("function"==typeof r[r.length-1]&&"function"!=typeof r[r.length-2])throw new I("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));2===r.length?(t=r[0],e=r[1],r=[]):3===r.length?(t=r[1],e=r[2],r=[r[0]]):4===r.length&&(t=r[2],e=r[3],r=[r[0],r[1]]);var i=e;return r.push((function(e,r,a,o,n,s,u){i=t(i,e,r,a,o,n,s,u)})),this[o].apply(this,r),i}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o="find"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e,r){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return!1;if(1===arguments.length)return dt(!0,this,i,r=t);if(2===arguments.length){t=""+t,r=e;var n=this._nodes.get(t);if(void 0===n)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return ht(!0,this.multi,"mixed"===i?this.type:i,a,n,r)}if(3===arguments.length){t=""+t,e=""+e;var s=this._nodes.get(t);if(!s)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return pt(!0,i,this.multi,a,s,e,r)}throw new I("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))};var n="some"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[n]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop();return t.push((function(t,r,i,a,o,n,s){return e(t,r,i,a,o,n,s)})),!!this[o].apply(this,t)};var s="every"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[s]=function(){var t=Array.prototype.slice.call(arguments),e=t.pop();return t.push((function(t,r,i,a,o,n,s){return!e(t,r,i,a,o,n,s)})),!this[o].apply(this,t)}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o=r.slice(0,-1)+"Entries";t.prototype[o]=function(t,e){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return P.empty();if(!arguments.length)return ct(this,i);if(1===arguments.length){t=""+t;var r=this._nodes.get(t);if(!r)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return gt(i,a,r)}if(2===arguments.length){t=""+t,e=""+e;var n=this._nodes.get(t);if(!n)throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" source node in the graph.'));if(!this._nodes.has(e))throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" target node in the graph.'));return ft(i,a,n,e)}throw new I("Graph.".concat(o,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(t,e)}))}(Ot),function(t){bt.forEach((function(e){(function(t,e){var r=e.name,i=e.type,a=e.direction;t.prototype[r]=function(t){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return[];t=""+t;var e=this._nodes.get(t);if(void 0===e)throw new W("Graph.".concat(r,': could not find the "').concat(t,'" node in the graph.'));return function(t,e,r){if("mixed"!==t){if("undirected"===t)return Object.keys(r.undirected);if("string"==typeof e)return Object.keys(r[e])}var i=[];return mt(!1,t,e,r,(function(t){i.push(t)})),i}("mixed"===i?this.type:i,a,e)}})(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);t.prototype[o]=function(t,e){if("mixed"===i||"mixed"===this.type||i===this.type){t=""+t;var r=this._nodes.get(t);if(void 0===r)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));mt(!1,"mixed"===i?this.type:i,a,r,e)}};var n="map"+r[0].toUpperCase()+r.slice(1);t.prototype[n]=function(t,e){var r=[];return this[o](t,(function(t,i){r.push(e(t,i))})),r};var s="filter"+r[0].toUpperCase()+r.slice(1);t.prototype[s]=function(t,e){var r=[];return this[o](t,(function(t,i){e(t,i)&&r.push(t)})),r};var u="reduce"+r[0].toUpperCase()+r.slice(1);t.prototype[u]=function(t,e,r){if(arguments.length<3)throw new I("Graph.".concat(u,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));var i=r;return this[o](t,(function(t,r){i=e(i,t,r)})),i}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o=r[0].toUpperCase()+r.slice(1,-1),n="find"+o;t.prototype[n]=function(t,e){if("mixed"===i||"mixed"===this.type||i===this.type){t=""+t;var r=this._nodes.get(t);if(void 0===r)throw new W("Graph.".concat(n,': could not find the "').concat(t,'" node in the graph.'));return mt(!0,"mixed"===i?this.type:i,a,r,e)}};var s="some"+o;t.prototype[s]=function(t,e){return!!this[n](t,e)};var u="every"+o;t.prototype[u]=function(t,e){return!this[n](t,(function(t,r){return!e(t,r)}))}}(t,e),function(t,e){var r=e.name,i=e.type,a=e.direction,o=r.slice(0,-1)+"Entries";t.prototype[o]=function(t){if("mixed"!==i&&"mixed"!==this.type&&i!==this.type)return P.empty();t=""+t;var e=this._nodes.get(t);if(void 0===e)throw new W("Graph.".concat(o,': could not find the "').concat(t,'" node in the graph.'));return function(t,e,r){if("mixed"!==t){if("undirected"===t)return wt(null,r,r.undirected);if("string"==typeof e)return wt(null,r,r[e])}var i=P.empty(),a=new vt;return"undirected"!==t&&("out"!==e&&(i=tt(i,wt(a,r,r.in))),"in"!==e&&(i=tt(i,wt(a,r,r.out)))),"directed"!==t&&(i=tt(i,wt(a,r,r.undirected))),i}("mixed"===i?this.type:i,a,e)}}(t,e)}))}(Ot);var Mt=function(t){function r(e){var r=u({type:"directed"},e);if("multi"in r&&!1!==r.multi)throw new I("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==r.type)throw new I('DirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Ot),Rt=function(t){function r(e){var r=u({type:"undirected"},e);if("multi"in r&&!1!==r.multi)throw new I("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==r.type)throw new I('UndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Ot),Nt=function(t){function r(e){var r=u({multi:!0},e);if("multi"in r&&!0!==r.multi)throw new I("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");return t.call(this,r)||this}return e(r,t),r}(Ot),jt=function(t){function r(e){var r=u({type:"directed",multi:!0},e);if("multi"in r&&!0!==r.multi)throw new I("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==r.type)throw new I('MultiDirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Ot),Ut=function(t){function r(e){var r=u({type:"undirected",multi:!0},e);if("multi"in r&&!0!==r.multi)throw new I("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==r.type)throw new I('MultiUndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return t.call(this,r)||this}return e(r,t),r}(Ot);function zt(t){t.from=function(e,r){var i=u({},e.options,r),a=new t(i);return a.import(e),a}}return zt(Ot),zt(Mt),zt(Rt),zt(Nt),zt(jt),zt(Ut),Ot.Graph=Ot,Ot.DirectedGraph=Mt,Ot.UndirectedGraph=Rt,Ot.MultiGraph=Nt,Ot.MultiDirectedGraph=jt,Ot.MultiUndirectedGraph=Ut,Ot.InvalidArgumentsGraphError=I,Ot.NotFoundGraphError=W,Ot.UsageGraphError=q,Ot}()},554:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(227),s=o(r(941)),u=r(524),d=r(291),c=1.5,h=function(t){function e(){var e=t.call(this)||this;return e.x=.5,e.y=.5,e.angle=0,e.ratio=1,e.minRatio=null,e.maxRatio=null,e.nextFrame=null,e.previousState=null,e.enabled=!0,e.previousState=e.getState(),e}return a(e,t),e.from=function(t){return(new e).setState(t)},e.prototype.enable=function(){return this.enabled=!0,this},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.getState=function(){return{x:this.x,y:this.y,angle:this.angle,ratio:this.ratio}},e.prototype.hasState=function(t){return this.x===t.x&&this.y===t.y&&this.ratio===t.ratio&&this.angle===t.angle},e.prototype.getPreviousState=function(){var t=this.previousState;return t?{x:t.x,y:t.y,angle:t.angle,ratio:t.ratio}:null},e.prototype.getBoundedRatio=function(t){var e=t;return"number"==typeof this.minRatio&&(e=Math.max(e,this.minRatio)),"number"==typeof this.maxRatio&&(e=Math.min(e,this.maxRatio)),e},e.prototype.validateState=function(t){var e={};return"number"==typeof t.x&&(e.x=t.x),"number"==typeof t.y&&(e.y=t.y),"number"==typeof t.angle&&(e.angle=t.angle),"number"==typeof t.ratio&&(e.ratio=this.getBoundedRatio(t.ratio)),e},e.prototype.isAnimated=function(){return!!this.nextFrame},e.prototype.setState=function(t){if(!this.enabled)return this;this.previousState=this.getState();var e=this.validateState(t);return"number"==typeof e.x&&(this.x=e.x),"number"==typeof e.y&&(this.y=e.y),"number"==typeof e.angle&&(this.angle=e.angle),"number"==typeof e.ratio&&(this.ratio=e.ratio),this.hasState(this.previousState)||this.emit("updated",this.getState()),this},e.prototype.updateState=function(t){return this.setState(t(this.getState())),this},e.prototype.animate=function(t,e,r){var i=this;if(this.enabled){var a=Object.assign({},n.ANIMATE_DEFAULTS,e),o=this.validateState(t),d="function"==typeof a.easing?a.easing:s.default[a.easing],c=Date.now(),h=this.getState(),l=function(){var t=(Date.now()-c)/a.duration;if(t>=1)return i.nextFrame=null,i.setState(o),void(i.animationCallback&&(i.animationCallback.call(null),i.animationCallback=void 0));var e=d(t),r={};"number"==typeof o.x&&(r.x=h.x+(o.x-h.x)*e),"number"==typeof o.y&&(r.y=h.y+(o.y-h.y)*e),"number"==typeof o.angle&&(r.angle=h.angle+(o.angle-h.angle)*e),"number"==typeof o.ratio&&(r.ratio=h.ratio+(o.ratio-h.ratio)*e),i.setState(r),i.nextFrame=(0,u.requestFrame)(l)};this.nextFrame?((0,u.cancelFrame)(this.nextFrame),this.animationCallback&&this.animationCallback.call(null),this.nextFrame=(0,u.requestFrame)(l)):l(),this.animationCallback=r}},e.prototype.animatedZoom=function(t){if(t){if("number"==typeof t)return this.animate({ratio:this.ratio/t});this.animate({ratio:this.ratio/(t.factor||c)},t)}else this.animate({ratio:this.ratio/c})},e.prototype.animatedUnzoom=function(t){if(t){if("number"==typeof t)return this.animate({ratio:this.ratio*t});this.animate({ratio:this.ratio*(t.factor||c)},t)}else this.animate({ratio:this.ratio*c})},e.prototype.animatedReset=function(t){this.animate({x:.5,y:.5,ratio:1,angle:0},t)},e.prototype.copy=function(){return e.from(this.getState())},e}(d.TypedEventEmitter);e.default=h},760:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var a in e=arguments[r])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t},o.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.getWheelDelta=e.getTouchCoords=e.getTouchesArray=e.getWheelCoords=e.getMouseCoords=e.getPosition=void 0;var n=r(291);function s(t,e){var r=e.getBoundingClientRect();return{x:t.clientX-r.left,y:t.clientY-r.top}}function u(t,e){var r=o(o({},s(t,e)),{sigmaDefaultPrevented:!1,preventSigmaDefault:function(){r.sigmaDefaultPrevented=!0},original:t});return r}function d(t){for(var e=[],r=0,i=Math.min(t.length,2);r<i;r++)e.push(t[r]);return e}function c(t){if(void 0!==t.deltaY)return-3*t.deltaY/360;if(void 0!==t.detail)return t.detail/-9;throw new Error("Captor: could not extract delta from event.")}e.getPosition=s,e.getMouseCoords=u,e.getWheelCoords=function(t,e){return o(o({},u(t,e)),{delta:c(t)})},e.getTouchesArray=d,e.getTouchCoords=function(t,e){return{touches:d(t.touches).map((function(t){return s(t,e)})),original:t}},e.getWheelDelta=c;var h=function(t){function e(e,r){var i=t.call(this)||this;return i.container=e,i.renderer=r,i}return a(e,t),e}(n.TypedEventEmitter);e.default=h},886:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return n(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var u=s(r(760)),d=function(t){function e(e,r){var i=t.call(this,e,r)||this;return i.enabled=!0,i.draggedEvents=0,i.downStartTime=null,i.lastMouseX=null,i.lastMouseY=null,i.isMouseDown=!1,i.isMoving=!1,i.movingTimeout=null,i.startCameraState=null,i.clicks=0,i.doubleClickTimeout=null,i.currentWheelDirection=0,i.handleClick=i.handleClick.bind(i),i.handleRightClick=i.handleRightClick.bind(i),i.handleDown=i.handleDown.bind(i),i.handleUp=i.handleUp.bind(i),i.handleMove=i.handleMove.bind(i),i.handleWheel=i.handleWheel.bind(i),i.handleOut=i.handleOut.bind(i),e.addEventListener("click",i.handleClick,!1),e.addEventListener("contextmenu",i.handleRightClick,!1),e.addEventListener("mousedown",i.handleDown,!1),e.addEventListener("wheel",i.handleWheel,!1),e.addEventListener("mouseout",i.handleOut,!1),document.addEventListener("mousemove",i.handleMove,!1),document.addEventListener("mouseup",i.handleUp,!1),i}return a(e,t),e.prototype.kill=function(){var t=this.container;t.removeEventListener("click",this.handleClick),t.removeEventListener("contextmenu",this.handleRightClick),t.removeEventListener("mousedown",this.handleDown),t.removeEventListener("wheel",this.handleWheel),t.removeEventListener("mouseout",this.handleOut),document.removeEventListener("mousemove",this.handleMove),document.removeEventListener("mouseup",this.handleUp)},e.prototype.handleClick=function(t){var e=this;if(this.enabled){if(this.clicks++,2===this.clicks)return this.clicks=0,"number"==typeof this.doubleClickTimeout&&(clearTimeout(this.doubleClickTimeout),this.doubleClickTimeout=null),this.handleDoubleClick(t);setTimeout((function(){e.clicks=0,e.doubleClickTimeout=null}),300),this.draggedEvents<3&&this.emit("click",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleRightClick=function(t){this.enabled&&this.emit("rightClick",(0,u.getMouseCoords)(t,this.container))},e.prototype.handleDoubleClick=function(t){if(this.enabled){t.preventDefault(),t.stopPropagation();var e=(0,u.getMouseCoords)(t,this.container);if(this.emit("doubleClick",e),!e.sigmaDefaultPrevented){var r=this.renderer.getCamera(),i=r.getBoundedRatio(r.getState().ratio/2.2);r.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(t,this.container),i),{easing:"quadraticInOut",duration:200})}}},e.prototype.handleDown=function(t){if(this.enabled){if(0===t.button){this.startCameraState=this.renderer.getCamera().getState();var e=(0,u.getPosition)(t,this.container),r=e.x,i=e.y;this.lastMouseX=r,this.lastMouseY=i,this.draggedEvents=0,this.downStartTime=Date.now(),this.isMouseDown=!0}this.emit("mousedown",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleUp=function(t){var e=this;if(this.enabled&&this.isMouseDown){var r=this.renderer.getCamera();this.isMouseDown=!1,"number"==typeof this.movingTimeout&&(clearTimeout(this.movingTimeout),this.movingTimeout=null);var i=(0,u.getPosition)(t,this.container),a=i.x,o=i.y,n=r.getState(),s=r.getPreviousState()||{x:0,y:0};this.isMoving?r.animate({x:n.x+3*(n.x-s.x),y:n.y+3*(n.y-s.y)},{duration:200,easing:"quadraticOut"}):this.lastMouseX===a&&this.lastMouseY===o||r.setState({x:n.x,y:n.y}),this.isMoving=!1,setTimeout((function(){e.draggedEvents=0,e.renderer.refresh()}),0),this.emit("mouseup",(0,u.getMouseCoords)(t,this.container))}},e.prototype.handleMove=function(t){var e=this;if(this.enabled){var r=(0,u.getMouseCoords)(t,this.container);if(this.emit("mousemovebody",r),t.target===this.container&&this.emit("mousemove",r),!r.sigmaDefaultPrevented&&this.isMouseDown){this.isMoving=!0,this.draggedEvents++,"number"==typeof this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){e.movingTimeout=null,e.isMoving=!1}),100);var i=this.renderer.getCamera(),a=(0,u.getPosition)(t,this.container),o=a.x,n=a.y,s=this.renderer.viewportToFramedGraph({x:this.lastMouseX,y:this.lastMouseY}),d=this.renderer.viewportToFramedGraph({x:o,y:n}),c=s.x-d.x,h=s.y-d.y,l=i.getState(),g=l.x+c,p=l.y+h;i.setState({x:g,y:p}),this.lastMouseX=o,this.lastMouseY=n,t.preventDefault(),t.stopPropagation()}}},e.prototype.handleWheel=function(t){var e=this;if(this.enabled){t.preventDefault(),t.stopPropagation();var r=(0,u.getWheelDelta)(t);if(r){var i=(0,u.getWheelCoords)(t,this.container);if(this.emit("wheel",i),!i.sigmaDefaultPrevented){var a=r>0?1/1.7:1.7,o=this.renderer.getCamera(),n=o.getBoundedRatio(o.getState().ratio*a),s=r>0?1:-1,d=Date.now();this.currentWheelDirection===s&&this.lastWheelTriggerTime&&d-this.lastWheelTriggerTime<50||(o.animate(this.renderer.getViewportZoomedState((0,u.getPosition)(t,this.container),n),{easing:"quadraticOut",duration:250},(function(){e.currentWheelDirection=0})),this.currentWheelDirection=s,this.lastWheelTriggerTime=d)}}}},e.prototype.handleOut=function(){},e}(u.default);e.default=d},311:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return n(e,t),e},u=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,a,o=r.call(t),n=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)n.push(i.value)}catch(t){a={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return n};Object.defineProperty(e,"__esModule",{value:!0});var d=s(r(760)),c=function(t){function e(e,r){var i=t.call(this,e,r)||this;return i.enabled=!0,i.isMoving=!1,i.hasMoved=!1,i.touchMode=0,i.startTouchesPositions=[],i.handleStart=i.handleStart.bind(i),i.handleLeave=i.handleLeave.bind(i),i.handleMove=i.handleMove.bind(i),e.addEventListener("touchstart",i.handleStart,!1),e.addEventListener("touchend",i.handleLeave,!1),e.addEventListener("touchcancel",i.handleLeave,!1),e.addEventListener("touchmove",i.handleMove,!1),i}return a(e,t),e.prototype.kill=function(){var t=this.container;t.removeEventListener("touchstart",this.handleStart),t.removeEventListener("touchend",this.handleLeave),t.removeEventListener("touchcancel",this.handleLeave),t.removeEventListener("touchmove",this.handleMove)},e.prototype.getDimensions=function(){return{width:this.container.offsetWidth,height:this.container.offsetHeight}},e.prototype.dispatchRelatedMouseEvent=function(t,e,r,i){var a=r||e.touches[0],o=new MouseEvent(t,{clientX:a.clientX,clientY:a.clientY,altKey:e.altKey,ctrlKey:e.ctrlKey});o.isFakeSigmaMouseEvent=!0,(i||this.container).dispatchEvent(o)},e.prototype.handleStart=function(t){var e=this;if(this.enabled){t.preventDefault(),1===t.touches.length&&this.dispatchRelatedMouseEvent("mousedown",t);var r=(0,d.getTouchesArray)(t.touches);if(this.touchMode=r.length,this.startCameraState=this.renderer.getCamera().getState(),this.startTouchesPositions=r.map((function(t){return(0,d.getPosition)(t,e.container)})),this.lastTouches=r,this.lastTouchesPositions=this.startTouchesPositions,2===this.touchMode){var i=u(this.startTouchesPositions,2),a=i[0],o=a.x,n=a.y,s=i[1],c=s.x,h=s.y;this.startTouchesAngle=Math.atan2(h-n,c-o),this.startTouchesDistance=Math.sqrt(Math.pow(c-o,2)+Math.pow(h-n,2))}this.emit("touchdown",(0,d.getTouchCoords)(t,this.container))}},e.prototype.handleLeave=function(t){if(this.enabled){switch(t.preventDefault(),0===t.touches.length&&this.lastTouches&&this.lastTouches.length&&(this.dispatchRelatedMouseEvent("mouseup",t,this.lastTouches[0],document),this.hasMoved||this.dispatchRelatedMouseEvent("click",t,this.lastTouches[0])),this.movingTimeout&&(this.isMoving=!1,clearTimeout(this.movingTimeout)),this.touchMode){case 2:if(1===t.touches.length){this.handleStart(t),t.preventDefault();break}case 1:if(this.isMoving){var e=this.renderer.getCamera(),r=e.getState(),i=e.getPreviousState()||{x:0,y:0};e.animate({x:r.x+3*(r.x-i.x),y:r.y+3*(r.y-i.y)},{duration:200,easing:"quadraticOut"})}this.hasMoved=!1,this.isMoving=!1,this.touchMode=0}this.emit("touchup",(0,d.getTouchCoords)(t,this.container))}},e.prototype.handleMove=function(t){var e,r=this;if(this.enabled){t.preventDefault(),1===t.touches.length&&this.dispatchRelatedMouseEvent("mousemove",t);var i=(0,d.getTouchesArray)(t.touches),a=i.map((function(t){return(0,d.getPosition)(t,r.container)}));if(this.lastTouches=i,this.lastTouchesPositions=a,this.hasMoved||(this.hasMoved=a.some((function(t,e){var i=r.startTouchesPositions[e];return t.x!==i.x||t.y!==i.y}))),this.hasMoved){this.isMoving=!0,this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){r.isMoving=!1}),200);var o=this.renderer.getCamera(),n=this.startCameraState;switch(this.touchMode){case 1:var s=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0]),c=s.x,h=s.y,l=this.renderer.viewportToFramedGraph(a[0]),g=l.x,p=l.y;o.setState({x:n.x+c-g,y:n.y+h-p});break;case 2:var y={},f=a[0],b=f.x,v=f.y,_=a[1],m=_.x,w=_.y,k=Math.atan2(w-v,m-b)-this.startTouchesAngle,x=Math.hypot(w-v,m-b)/this.startTouchesDistance,E=o.getBoundedRatio(n.ratio/x);y.ratio=E,y.angle=n.angle+k;var L=this.getDimensions(),A=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0],{cameraState:n}),S=Math.min(L.width,L.height),C=S/L.width,G=E/S;p=v-S/2/(S/L.height),g=(e=u([(g=b-S/2/C)*Math.cos(-y.angle)-p*Math.sin(-y.angle),p*Math.cos(-y.angle)+g*Math.sin(-y.angle)],2))[0],p=e[1],y.x=A.x-g*G,y.y=A.y+p*G,o.setState(y)}this.emit("touchmove",(0,d.getTouchCoords)(t,this.container))}}},e}(d.default);e.default=c},98:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.edgeLabelsToDisplayFromNodes=e.LabelGrid=void 0;var r=function(){function t(t,e){this.key=t,this.size=e}return t.compare=function(t,e){return t.size>e.size?-1:t.size<e.size||t.key>e.key?1:-1},t}(),i=function(){function t(){this.width=0,this.height=0,this.cellSize=0,this.columns=0,this.rows=0,this.cells={}}return t.prototype.resizeAndClear=function(t,e){this.width=t.width,this.height=t.height,this.cellSize=e,this.columns=Math.ceil(t.width/e),this.rows=Math.ceil(t.height/e),this.cells={}},t.prototype.getIndex=function(t){var e=Math.floor(t.x/this.cellSize);return Math.floor(t.y/this.cellSize)*this.columns+e},t.prototype.add=function(t,e,i){var a=new r(t,e),o=this.getIndex(i),n=this.cells[o];n||(n=[],this.cells[o]=n),n.push(a)},t.prototype.organize=function(){for(var t in this.cells)this.cells[t].sort(r.compare)},t.prototype.getLabelsToDisplay=function(t,e){var r=this.cellSize*this.cellSize,i=r/t/t*e/r,a=Math.ceil(i),o=[];for(var n in this.cells)for(var s=this.cells[n],u=0;u<Math.min(a,s.length);u++)o.push(s[u].key);return o},t}();e.LabelGrid=i,e.edgeLabelsToDisplayFromNodes=function(t){var e=t.graph,r=t.hoveredNode,i=t.highlightedNodes,a=t.displayedNodeLabels,o=[];return e.forEachEdge((function(t,e,n,s){(n===r||s===r||i.has(n)||i.has(s)||a.has(n)&&a.has(s))&&o.push(t)})),o}},461:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.rectangleCollidesWithQuad=e.squareCollidesWithQuad=e.getCircumscribedAlignedRectangle=e.isRectangleAligned=void 0;var a=i(r(796)),o=!1;function n(t){return t.x1===t.x2||t.y1===t.y2}function s(t){var e=Math.sqrt(Math.pow(t.x2-t.x1,2)+Math.pow(t.y2-t.y1,2)),r=(t.y1-t.y2)*t.height/e,i=(t.x2-t.x1)*t.height/e,a={x:t.x1,y:t.y1},o={x:t.x2,y:t.y2},n={x:t.x1+r,y:t.y1+i},s={x:t.x2+r,y:t.y2+i},u=Math.min(a.x,o.x,n.x,s.x),d=Math.max(a.x,o.x,n.x,s.x),c=Math.min(a.y,o.y,n.y,s.y);return{x1:u,y1:c,x2:d,y2:c,height:Math.max(a.y,o.y,n.y,s.y)-c}}function u(t,e,r,i,a,o,n){return t<i+o&&t+r>i&&e<a+n&&e+r>a}function d(t,e,r,i,a,o,n,s){return t<a+n&&t+r>a&&e<o+s&&e+i>o}function c(t,e,r,i,a,o){var n=t<r+a/2;return e<i+o/2?n?1:2:n?3:4}e.isRectangleAligned=n,e.getCircumscribedAlignedRectangle=s,e.squareCollidesWithQuad=u,e.rectangleCollidesWithQuad=d;var h=function(){function t(t){var e;void 0===t&&(t={}),this.containers=((e={})[5460]=[],e),this.cache=null,this.lastRectangle=null;var r=Math.pow(4,5);this.data=new Float32Array((4*r-1)/3*4),t.boundaries?this.resize(t.boundaries):this.resize({x:0,y:0,width:1,height:1})}return t.prototype.add=function(t,e,r,i){return function(t,e,r,i,a,n,s){for(var d=a-s,c=n-s,h=2*s,l=0,g=0;;){if(l>=5)return r[g]=r[g]||[],void r[g].push(i);var p=4*g+4,y=4*g+8,f=4*g+12,b=4*g+16,v=u(d,c,h,e[p+0],e[p+1],e[p+2],e[p+3]),_=u(d,c,h,e[y+0],e[y+1],e[y+2],e[y+3]),m=u(d,c,h,e[f+0],e[f+1],e[f+2],e[f+3]),w=u(d,c,h,e[b+0],e[b+1],e[b+2],e[b+3]),k=[v,_,m,w].reduce((function(t,e){return e?t+1:t}),0);if(0===k&&0===l)return r[5460].push(i),void(!o&&r[5460].length>=5&&(o=!0,console.warn("sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. You might have a problem with the normalization function or the custom bounding box.")));if(0===k)throw new Error("sigma/quadtree.insertNode: no collision (level: ".concat(l,", key: ").concat(i,", x: ").concat(a,", y: ").concat(n,", size: ").concat(s,")."));if(3===k)throw new Error("sigma/quadtree.insertNode: 3 impossible collisions (level: ".concat(l,", key: ").concat(i,", x: ").concat(a,", y: ").concat(n,", size: ").concat(s,")."));if(k>1)return r[g]=r[g]||[],void r[g].push(i);l++,v&&(g=p),_&&(g=y),m&&(g=f),w&&(g=b)}}(0,this.data,this.containers,t,e,r,i),this},t.prototype.resize=function(t){this.clear(),this.data[0]=t.x,this.data[1]=t.y,this.data[2]=t.width,this.data[3]=t.height,function(t,e){for(var r=[0,0];r.length;){var i=r.pop(),a=r.pop(),o=4*a+4,n=4*a+8,s=4*a+12,u=4*a+16,d=e[a+0],c=e[a+1],h=e[a+2]/2,l=e[a+3]/2;e[o+0]=d,e[o+1]=c,e[o+2]=h,e[o+3]=l,e[n+0]=d+h,e[n+1]=c,e[n+2]=h,e[n+3]=l,e[s+0]=d,e[s+1]=c+l,e[s+2]=h,e[s+3]=l,e[u+0]=d+h,e[u+1]=c+l,e[u+2]=h,e[u+3]=l,i<4&&(r.push(u,i+1),r.push(s,i+1),r.push(n,i+1),r.push(o,i+1))}}(0,this.data)},t.prototype.clear=function(){var t;return this.containers=((t={})[5460]=[],t),this},t.prototype.point=function(t,e){var r=this.containers[5460].slice(),i=0,o=0;do{this.containers[i]&&(0,a.default)(r,this.containers[i]),i=4*i+4*c(t,e,this.data[i+0],this.data[i+1],this.data[i+2],this.data[i+3]),o++}while(o<=5);return r},t.prototype.rectangle=function(t,e,r,i,o){var u=this.lastRectangle;return u&&t===u.x1&&r===u.x2&&e===u.y1&&i===u.y2&&o===u.height||(this.lastRectangle={x1:t,y1:e,x2:r,y2:i,height:o},n(this.lastRectangle)||(this.lastRectangle=s(this.lastRectangle)),this.cache=function(t,e,r,i,o,n,s){for(var u,c=[0,0],h=[];c.length;){var l=c.pop(),g=c.pop();if((u=r[g])&&(0,a.default)(h,u),!(l>=5)){var p=4*g+4,y=4*g+8,f=4*g+12,b=4*g+16,v=d(i,o,n,s,e[p+0],e[p+1],e[p+2],e[p+3]),_=d(i,o,n,s,e[y+0],e[y+1],e[y+2],e[y+3]),m=d(i,o,n,s,e[f+0],e[f+1],e[f+2],e[f+3]),w=d(i,o,n,s,e[b+0],e[b+1],e[b+2],e[b+3]);v&&c.push(p,l+1),_&&c.push(y,l+1),m&&c.push(f,l+1),w&&c.push(b,l+1)}}return h}(0,this.data,this.containers,t,e,Math.abs(t-r)||Math.abs(e-i),o),(0,a.default)(this.cache,this.containers[5460])),this.cache},t}();e.default=h},26:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Sigma=e.MouseCaptor=e.QuadTree=e.Camera=void 0;var a=i(r(248));e.Sigma=a.default;var o=i(r(554));e.Camera=o.default;var n=i(r(461));e.QuadTree=n.default;var s=i(r(886));e.MouseCaptor=s.default,e.default=a.default},294:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r,i,a){var o=a.edgeLabelSize,n=a.edgeLabelFont,s=a.edgeLabelWeight,u=a.edgeLabelColor.attribute?e[a.edgeLabelColor.attribute]||a.edgeLabelColor.color||"#000":a.edgeLabelColor.color,d=e.label;if(d){t.fillStyle=u,t.font="".concat(s," ").concat(o,"px ").concat(n);var c,h,l=r.size,g=i.size,p=r.x,y=r.y,f=i.x,b=i.y,v=f-p,_=b-y,m=Math.sqrt(v*v+_*_);if(!(m<l+g)){c=((p+=v*l/m)+(f-=v*g/m))/2,h=((y+=_*l/m)+(b-=_*g/m))/2,v=f-p,_=b-y,m=Math.sqrt(v*v+_*_);var w,k=t.measureText(d).width;if(k>m){for(d+="…",k=t.measureText(d).width;k>m&&d.length>1;)d=d.slice(0,-2)+"…",k=t.measureText(d).width;if(d.length<4)return}w=v>0?_>0?Math.acos(v/m):Math.asin(_/m):_>0?Math.acos(v/m)+Math.PI:Math.asin(v/m)+Math.PI/2,t.save(),t.translate(c,h),t.rotate(w),t.fillText(d,-k/2,e.size/2+o),t.restore()}}}},607:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=i(r(577));e.default=function(t,e,r){var i=r.labelSize,o=r.labelFont,n=r.labelWeight;if(t.font="".concat(n," ").concat(i,"px ").concat(o),t.fillStyle="#FFF",t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowBlur=8,t.shadowColor="#000","string"==typeof e.label){var s=t.measureText(e.label).width,u=Math.round(s+5),d=Math.round(i+4),c=Math.max(e.size,i/2)+2,h=Math.asin(d/2/c),l=Math.sqrt(Math.abs(Math.pow(c,2)-Math.pow(d/2,2)));t.beginPath(),t.moveTo(e.x+l,e.y+d/2),t.lineTo(e.x+c+u,e.y+d/2),t.lineTo(e.x+c+u,e.y-d/2),t.lineTo(e.x+l,e.y-d/2),t.arc(e.x,e.y,c,h,-h),t.closePath(),t.fill()}else t.beginPath(),t.arc(e.x,e.y,e.size+2,0,2*Math.PI),t.closePath(),t.fill();t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowBlur=0,(0,a.default)(t,e,r)}},577:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){if(e.label){var i=r.labelSize,a=r.labelFont,o=r.labelWeight,n=r.labelColor.attribute?e[r.labelColor.attribute]||r.labelColor.color||"#000":r.labelColor.color;t.fillStyle=n,t.font="".concat(o," ").concat(i,"px ").concat(a),t.fillText(e.label,e.x+e.size+3,e.y+i/3)}}},917:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.createEdgeCompoundProgram=e.AbstractEdgeProgram=void 0;var o=function(t){function e(e,r,i,a,o){return t.call(this,e,r,i,a,o)||this}return a(e,t),e}(r(973).AbstractProgram);e.AbstractEdgeProgram=o,e.createEdgeCompoundProgram=function(t){return function(){function e(e,r){this.programs=t.map((function(t){return new t(e,r)}))}return e.prototype.bufferData=function(){this.programs.forEach((function(t){return t.bufferData()}))},e.prototype.allocate=function(t){this.programs.forEach((function(e){return e.allocate(t)}))},e.prototype.bind=function(){},e.prototype.computeIndices=function(){this.programs.forEach((function(t){return t.computeIndices()}))},e.prototype.render=function(t){this.programs.forEach((function(e){e.bind(),e.bufferData(),e.render(t)}))},e.prototype.process=function(t,e,r,i,a){this.programs.forEach((function(o){return o.process(t,e,r,i,a)}))},e}()}},533:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.createNodeCompoundProgram=e.AbstractNodeProgram=void 0;var o=function(t){function e(e,r,i,a,o){var n=t.call(this,e,r,i,a,o)||this;n.positionLocation=e.getAttribLocation(n.program,"a_position"),n.sizeLocation=e.getAttribLocation(n.program,"a_size"),n.colorLocation=e.getAttribLocation(n.program,"a_color");var s=e.getUniformLocation(n.program,"u_matrix");if(null===s)throw new Error("AbstractNodeProgram: error while getting matrixLocation");n.matrixLocation=s;var u=e.getUniformLocation(n.program,"u_ratio");if(null===u)throw new Error("AbstractNodeProgram: error while getting ratioLocation");n.ratioLocation=u;var d=e.getUniformLocation(n.program,"u_scale");if(null===d)throw new Error("AbstractNodeProgram: error while getting scaleLocation");return n.scaleLocation=d,n}return a(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.sizeLocation),t.enableVertexAttribArray(this.colorLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.sizeLocation,1,t.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12)},e}(r(973).AbstractProgram);e.AbstractNodeProgram=o,e.createNodeCompoundProgram=function(t){return function(){function e(e,r){this.programs=t.map((function(t){return new t(e,r)}))}return e.prototype.bufferData=function(){this.programs.forEach((function(t){return t.bufferData()}))},e.prototype.allocate=function(t){this.programs.forEach((function(e){return e.allocate(t)}))},e.prototype.bind=function(){},e.prototype.render=function(t){this.programs.forEach((function(e){e.bind(),e.bufferData(),e.render(t)}))},e.prototype.process=function(t,e,r){this.programs.forEach((function(i){return i.process(t,e,r)}))},e}()}},973:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractProgram=void 0;var i=r(538),a=function(){function t(t,e,r,a,o){this.array=new Float32Array,this.points=a,this.attributes=o,this.gl=t,this.vertexShaderSource=e,this.fragmentShaderSource=r;var n=t.createBuffer();if(null===n)throw new Error("AbstractProgram: error while creating the buffer");this.buffer=n,t.bindBuffer(t.ARRAY_BUFFER,this.buffer),this.vertexShader=(0,i.loadVertexShader)(t,this.vertexShaderSource),this.fragmentShader=(0,i.loadFragmentShader)(t,this.fragmentShaderSource),this.program=(0,i.loadProgram)(t,[this.vertexShader,this.fragmentShader])}return t.prototype.bufferData=function(){var t=this.gl;t.bufferData(t.ARRAY_BUFFER,this.array,t.DYNAMIC_DRAW)},t.prototype.allocate=function(t){this.array=new Float32Array(this.points*this.attributes*t)},t.prototype.hasNothingToRender=function(){return 0===this.array.length},t}();e.AbstractProgram=a},638:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(917),o=i(r(747)),n=i(r(874)),s=(0,a.createEdgeCompoundProgram)([n.default,o.default]);e.default=s},747:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(524),s=o(r(191)),u=o(r(83)),d=function(t){function e(e){var r=t.call(this,e,s.default,u.default,3,9)||this;r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal"),r.radiusLocation=e.getAttribLocation(r.program,"a_radius"),r.barycentricLocation=e.getAttribLocation(r.program,"a_barycentric");var i=e.getUniformLocation(r.program,"u_matrix");if(null===i)throw new Error("EdgeArrowHeadProgram: error while getting matrixLocation");r.matrixLocation=i;var a=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===a)throw new Error("EdgeArrowHeadProgram: error while getting sqrtZoomRatioLocation");r.sqrtZoomRatioLocation=a;var o=e.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("EdgeArrowHeadProgram: error while getting correctionRatioLocation");return r.correctionRatioLocation=o,r.bind(),r}return a(e,t),e.prototype.bind=function(){var t=this.gl;t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.radiusLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.barycentricLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.radiusLocation,1,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,9*Float32Array.BYTES_PER_ELEMENT,20),t.vertexAttribPointer(this.barycentricLocation,3,t.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,24)},e.prototype.computeIndices=function(){},e.prototype.process=function(t,e,r,i,a){if(i)for(var o=27*a,s=o+27;o<s;o++)this.array[o]=0;else{var u=r.size||1,d=e.size||1,c=t.x,h=t.y,l=e.x,g=e.y,p=(0,n.floatColor)(r.color),y=l-c,f=g-h,b=y*y+f*f,v=0,_=0;b&&(v=-f*(b=1/Math.sqrt(b))*u,_=y*b*u);var m=27*a,w=this.array;w[m++]=l,w[m++]=g,w[m++]=-v,w[m++]=-_,w[m++]=d,w[m++]=p,w[m++]=1,w[m++]=0,w[m++]=0,w[m++]=l,w[m++]=g,w[m++]=-v,w[m++]=-_,w[m++]=d,w[m++]=p,w[m++]=0,w[m++]=1,w[m++]=0,w[m++]=l,w[m++]=g,w[m++]=-v,w[m++]=-_,w[m++]=d,w[m++]=p,w[m++]=0,w[m++]=0,w[m]=1}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawArrays(e.TRIANGLES,0,this.array.length/9)}},e}(r(917).AbstractEdgeProgram);e.default=d},874:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(917),s=r(524),u=o(r(73)),d=o(r(879)),c=function(t){function e(e){var r=t.call(this,e,u.default,d.default,4,6)||this,i=e.createBuffer();if(null===i)throw new Error("EdgeClampedProgram: error while getting resolutionLocation");r.indicesBuffer=i,r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal"),r.radiusLocation=e.getAttribLocation(r.program,"a_radius");var a=e.getUniformLocation(r.program,"u_matrix");if(null===a)throw new Error("EdgeClampedProgram: error while getting matrixLocation");r.matrixLocation=a;var o=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===o)throw new Error("EdgeClampedProgram: error while getting cameraRatioLocation");r.sqrtZoomRatioLocation=o;var n=e.getUniformLocation(r.program,"u_correctionRatio");if(null===n)throw new Error("EdgeClampedProgram: error while getting viewportRatioLocation");return r.correctionRatioLocation=n,r.canUse32BitsIndices=(0,s.canUse32BitsIndices)(e),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.bind(),r}return a(e,t),e.prototype.bind=function(){var t=this.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.colorLocation),t.enableVertexAttribArray(this.radiusLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,6*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(this.radiusLocation,1,t.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,20)},e.prototype.process=function(t,e,r,i,a){if(i)for(var o=24*a,n=o+24;o<n;o++)this.array[o]=0;else{var u=r.size||1,d=t.x,c=t.y,h=e.x,l=e.y,g=e.size||1,p=(0,s.floatColor)(r.color),y=h-d,f=l-c,b=y*y+f*f,v=0,_=0;b&&(v=-f*(b=1/Math.sqrt(b))*u,_=y*b*u);var m=24*a,w=this.array;w[m++]=d,w[m++]=c,w[m++]=v,w[m++]=_,w[m++]=p,w[m++]=0,w[m++]=d,w[m++]=c,w[m++]=-v,w[m++]=-_,w[m++]=p,w[m++]=0,w[m++]=h,w[m++]=l,w[m++]=v,w[m++]=_,w[m++]=p,w[m++]=g,w[m++]=h,w[m++]=l,w[m++]=-v,w[m++]=-_,w[m++]=p,w[m]=-g}},e.prototype.computeIndices=function(){for(var t=this.array.length/6,e=t+t/2,r=new this.IndicesArray(e),i=0,a=0;i<t;i+=4)r[a++]=i,r[a++]=i+1,r[a++]=i+2,r[a++]=i+2,r[a++]=i+1,r[a++]=i+3;this.indicesArray=r},e.prototype.bufferData=function(){t.prototype.bufferData.call(this);var e=this.gl;e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawElements(e.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},e}(n.AbstractEdgeProgram);e.default=c},857:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(524),s=o(r(372)),u=o(r(879)),d=function(t){function e(e){var r=t.call(this,e,s.default,u.default,4,5)||this,i=e.createBuffer();if(null===i)throw new Error("EdgeProgram: error while creating indicesBuffer");r.indicesBuffer=i,r.positionLocation=e.getAttribLocation(r.program,"a_position"),r.colorLocation=e.getAttribLocation(r.program,"a_color"),r.normalLocation=e.getAttribLocation(r.program,"a_normal");var a=e.getUniformLocation(r.program,"u_matrix");if(null===a)throw new Error("EdgeProgram: error while getting matrixLocation");r.matrixLocation=a;var o=e.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("EdgeProgram: error while getting correctionRatioLocation");r.correctionRatioLocation=o;var d=e.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===d)throw new Error("EdgeProgram: error while getting sqrtZoomRatioLocation");return r.sqrtZoomRatioLocation=d,r.canUse32BitsIndices=(0,n.canUse32BitsIndices)(e),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?e.UNSIGNED_INT:e.UNSIGNED_SHORT,r.bind(),r}return a(e,t),e.prototype.bind=function(){var t=this.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),t.enableVertexAttribArray(this.positionLocation),t.enableVertexAttribArray(this.normalLocation),t.enableVertexAttribArray(this.colorLocation),t.vertexAttribPointer(this.positionLocation,2,t.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(this.normalLocation,2,t.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(this.colorLocation,4,t.UNSIGNED_BYTE,!0,5*Float32Array.BYTES_PER_ELEMENT,16)},e.prototype.computeIndices=function(){for(var t=this.array.length/5,e=t+t/2,r=new this.IndicesArray(e),i=0,a=0;i<t;i+=4)r[a++]=i,r[a++]=i+1,r[a++]=i+2,r[a++]=i+2,r[a++]=i+1,r[a++]=i+3;this.indicesArray=r},e.prototype.bufferData=function(){t.prototype.bufferData.call(this);var e=this.gl;e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesArray,e.STATIC_DRAW)},e.prototype.process=function(t,e,r,i,a){if(i)for(var o=20*a,s=o+20;o<s;o++)this.array[o]=0;else{var u=r.size||1,d=t.x,c=t.y,h=e.x,l=e.y,g=(0,n.floatColor)(r.color),p=h-d,y=l-c,f=p*p+y*y,b=0,v=0;f&&(b=-y*(f=1/Math.sqrt(f))*u,v=p*f*u);var _=20*a,m=this.array;m[_++]=d,m[_++]=c,m[_++]=b,m[_++]=v,m[_++]=g,m[_++]=d,m[_++]=c,m[_++]=-b,m[_++]=-v,m[_++]=g,m[_++]=h,m[_++]=l,m[_++]=b,m[_++]=v,m[_++]=g,m[_++]=h,m[_++]=l,m[_++]=-b,m[_++]=-v,m[_]=g}},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(t.ratio)),e.uniform1f(this.correctionRatioLocation,t.correctionRatio),e.drawElements(e.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},e}(r(917).AbstractEdgeProgram);e.default=d},37:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var n=r(524),s=o(r(146)),u=o(r(546)),d=function(t){function e(e){var r=t.call(this,e,s.default,u.default,1,4)||this;return r.bind(),r}return a(e,t),e.prototype.process=function(t,e,r){var i=this.array,a=1*r*4;if(e)return i[a++]=0,i[a++]=0,i[a++]=0,void(i[a++]=0);var o=(0,n.floatColor)(t.color);i[a++]=t.x,i[a++]=t.y,i[a++]=t.size,i[a]=o},e.prototype.render=function(t){if(!this.hasNothingToRender()){var e=this.gl,r=this.program;e.useProgram(r),e.uniform1f(this.ratioLocation,1/Math.sqrt(t.ratio)),e.uniform1f(this.scaleLocation,t.scalingRatio),e.uniformMatrix3fv(this.matrixLocation,!1,t.matrix),e.drawArrays(e.POINTS,0,this.array.length/4)}},e}(r(533).AbstractNodeProgram);e.default=d},83:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="precision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n}\n";t.exports=r})()},191:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadWidthLengthRatio = 0.66;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl and\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\n  // happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n  float adaptedWebGLNodeRadius = a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n  float adaptedWebGLArrowHeadHalfWidth = adaptedWebGLArrowHeadLength * arrowHeadWidthLengthRatio / 2.0;\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  vec2 delta = vec2(\n      da * (adaptedWebGLNodeRadius * unitNormal.y)\n    + db * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y + adaptedWebGLArrowHeadHalfWidth * unitNormal.x)\n    + dc * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y - adaptedWebGLArrowHeadHalfWidth * unitNormal.x),\n\n      da * (-adaptedWebGLNodeRadius * unitNormal.x)\n    + db * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x + adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n    + dc * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x - adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n  );\n\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\n\n  gl_Position = vec4(position, 0, 1);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},73:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\nattribute float a_radius;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl. Please read it to\n  // get better comments on what's happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here, we move the point to leave space for the arrow head:\n  float direction = sign(a_radius);\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\n\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},879:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float feather = 0.001;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_normal) * v_thickness;\n\n  float t = smoothstep(\n    v_thickness - feather,\n    v_thickness,\n    dist\n  );\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";t.exports=r})()},372:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i='attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // We require edges to be at least `minThickness` pixels thick *on screen*\n  // (so we need to compensate the SQRT zoom ratio):\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\n  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction\n  // ratio:\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n\n  // Finally, we adapt the edge thickness to the "SQRT rule" in sigma (so that\n  // items are not too big when zoomed in, and not too small when zoomed out).\n  // The exact computation should be `adapted = value * zoom / sqrt(zoom)`, but\n  // it\'s simpler like this:\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness, 1)).xy, 0, 1);\n\n  // For the fragment shader though, we need a thickness that takes the "magic"\n  // correction ratio into account (as in webGLThickness), but so that the\n  // antialiasing effect does not depend on the zoom level. So here\'s yet\n  // another thickness version:\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n';t.exports=r})()},546:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="precision mediump float;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float radius = 0.5;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  vec2 m = gl_PointCoord - vec2(0.5, 0.5);\n  float dist = radius - length(m);\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(transparent, v_color, t);\n}\n";t.exports=r})()},146:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{default:()=>i});const i="attribute vec2 a_position;\nattribute float a_size;\nattribute vec4 a_color;\n\nuniform float u_ratio;\nuniform float u_scale;\nuniform mat3 u_matrix;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  gl_Position = vec4(\n    (u_matrix * vec3(a_position, 1)).xy,\n    0,\n    1\n  );\n\n  // Multiply the point size twice:\n  //  - x SCALING_RATIO to correct the canvas scaling\n  //  - x 2 to correct the formulae\n  gl_PointSize = a_size * u_ratio * u_scale * 2.0;\n\n  v_border = (1.0 / u_ratio) * (0.5 / a_size);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";t.exports=r})()},538:(t,e)=>{"use strict";function r(t,e,r){var i="VERTEX"===t?e.VERTEX_SHADER:e.FRAGMENT_SHADER,a=e.createShader(i);if(null===a)throw new Error("loadShader: error while creating the shader");if(e.shaderSource(a,r),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS)){var o=e.getShaderInfoLog(a);throw e.deleteShader(a),new Error("loadShader: error while compiling the shader:\n".concat(o,"\n").concat(r))}return a}Object.defineProperty(e,"__esModule",{value:!0}),e.loadProgram=e.loadFragmentShader=e.loadVertexShader=void 0,e.loadVertexShader=function(t,e){return r("VERTEX",t,e)},e.loadFragmentShader=function(t,e){return r("FRAGMENT",t,e)},e.loadProgram=function(t,e){var r,i,a=t.createProgram();if(null===a)throw new Error("loadProgram: error while creating the program.");for(r=0,i=e.length;r<i;r++)t.attachShader(a,e[r]);if(t.linkProgram(a),!t.getProgramParameter(a,t.LINK_STATUS))throw t.deleteProgram(a),new Error("loadProgram: error while linking the program.");return a}},482:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.resolveSettings=e.validateSettings=e.DEFAULT_EDGE_PROGRAM_CLASSES=e.DEFAULT_NODE_PROGRAM_CLASSES=e.DEFAULT_SETTINGS=void 0;var a=r(524),o=i(r(577)),n=i(r(607)),s=i(r(294)),u=i(r(37)),d=i(r(857)),c=i(r(638));e.DEFAULT_SETTINGS={hideEdgesOnMove:!1,hideLabelsOnMove:!1,renderLabels:!0,renderEdgeLabels:!1,enableEdgeClickEvents:!1,enableEdgeWheelEvents:!1,enableEdgeHoverEvents:!1,defaultNodeColor:"#999",defaultNodeType:"circle",defaultEdgeColor:"#ccc",defaultEdgeType:"line",labelFont:"Arial",labelSize:14,labelWeight:"normal",labelColor:{color:"#000"},edgeLabelFont:"Arial",edgeLabelSize:14,edgeLabelWeight:"normal",edgeLabelColor:{attribute:"color"},stagePadding:30,labelDensity:1,labelGridCellSize:100,labelRenderedSizeThreshold:6,nodeReducer:null,edgeReducer:null,zIndex:!1,minCameraRatio:null,maxCameraRatio:null,labelRenderer:o.default,hoverRenderer:n.default,edgeLabelRenderer:s.default,allowInvalidContainer:!1,nodeProgramClasses:{},nodeHoverProgramClasses:{},edgeProgramClasses:{}},e.DEFAULT_NODE_PROGRAM_CLASSES={circle:u.default},e.DEFAULT_EDGE_PROGRAM_CLASSES={arrow:c.default,line:d.default},e.validateSettings=function(t){if("number"!=typeof t.labelDensity||t.labelDensity<0)throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.");var e=t.minCameraRatio,r=t.maxCameraRatio;if("number"==typeof e&&"number"==typeof r&&r<e)throw new Error("Settings: invalid camera ratio boundaries. Expecting `maxCameraRatio` to be greater than `minCameraRatio`.")},e.resolveSettings=function(t){var r=(0,a.assign)({},e.DEFAULT_SETTINGS,t);return r.nodeProgramClasses=(0,a.assign)({},e.DEFAULT_NODE_PROGRAM_CLASSES,r.nodeProgramClasses),r.edgeProgramClasses=(0,a.assign)({},e.DEFAULT_EDGE_PROGRAM_CLASSES,r.edgeProgramClasses),r}},248:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var a in e=arguments[r])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t},o.apply(this,arguments)},n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=s(r(796)),d=s(r(554)),c=s(r(886)),h=s(r(461)),l=r(291),g=r(524),p=r(98),y=r(482),f=s(r(311)),b=r(132),v=r(822);function _(t,e,r){if(!r.hasOwnProperty("x")||!r.hasOwnProperty("y"))throw new Error('Sigma: could not find a valid position (x, y) for node "'.concat(e,'". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?'));return r.color||(r.color=t.defaultNodeColor),r.label||""===r.label||(r.label=null),void 0!==r.label&&null!==r.label?r.label=""+r.label:r.label=null,r.size||(r.size=2),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("highlighted")||(r.highlighted=!1),r.hasOwnProperty("forceLabel")||(r.forceLabel=!1),r.type&&""!==r.type||(r.type=t.defaultNodeType),r.zIndex||(r.zIndex=0),r}function m(t,e,r){return r.color||(r.color=t.defaultEdgeColor),r.label||(r.label=""),r.size||(r.size=.5),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("forceLabel")||(r.forceLabel=!1),r.type&&""!==r.type||(r.type=t.defaultEdgeType),r.zIndex||(r.zIndex=0),r}var w=function(t){function e(e,r,i){void 0===i&&(i={});var a=t.call(this)||this;if(a.elements={},a.canvasContexts={},a.webGLContexts={},a.activeListeners={},a.quadtree=new h.default,a.labelGrid=new p.LabelGrid,a.nodeDataCache={},a.edgeDataCache={},a.nodesWithForcedLabels=[],a.edgesWithForcedLabels=[],a.nodeExtent={x:[0,1],y:[0,1]},a.matrix=(0,b.identity)(),a.invMatrix=(0,b.identity)(),a.correctionRatio=1,a.customBBox=null,a.normalizationFunction=(0,g.createNormalizationFunction)({x:[0,1],y:[0,1]}),a.cameraSizeRatio=1,a.width=0,a.height=0,a.pixelRatio=(0,g.getPixelRatio)(),a.displayedLabels=new Set,a.highlightedNodes=new Set,a.hoveredNode=null,a.hoveredEdge=null,a.renderFrame=null,a.renderHighlightedNodesFrame=null,a.needToProcess=!1,a.needToSoftProcess=!1,a.checkEdgesEventsFrame=null,a.nodePrograms={},a.nodeHoverPrograms={},a.edgePrograms={},a.settings=(0,y.resolveSettings)(i),(0,y.validateSettings)(a.settings),(0,g.validateGraph)(e),!(r instanceof HTMLElement))throw new Error("Sigma: container should be an html element.");for(var o in a.graph=e,a.container=r,a.createWebGLContext("edges",{preserveDrawingBuffer:!0}),a.createCanvasContext("edgeLabels"),a.createWebGLContext("nodes"),a.createCanvasContext("labels"),a.createCanvasContext("hovers"),a.createWebGLContext("hoverNodes"),a.createCanvasContext("mouse"),a.webGLContexts){var n=a.webGLContexts[o];n.blendFunc(n.ONE,n.ONE_MINUS_SRC_ALPHA),n.enable(n.BLEND)}for(var s in a.settings.nodeProgramClasses){var u=a.settings.nodeProgramClasses[s];a.nodePrograms[s]=new u(a.webGLContexts.nodes,a);var l=u;s in a.settings.nodeHoverProgramClasses&&(l=a.settings.nodeHoverProgramClasses[s]),a.nodeHoverPrograms[s]=new l(a.webGLContexts.hoverNodes,a)}for(var s in a.settings.edgeProgramClasses){var v=a.settings.edgeProgramClasses[s];a.edgePrograms[s]=new v(a.webGLContexts.edges,a)}return a.resize(),a.camera=new d.default,a.bindCameraHandlers(),a.mouseCaptor=new c.default(a.elements.mouse,a),a.touchCaptor=new f.default(a.elements.mouse,a),a.bindEventHandlers(),a.bindGraphHandlers(),a.handleSettingsUpdate(),a.process(),a.render(),a}return a(e,t),e.prototype.createCanvas=function(t){var e=(0,g.createElement)("canvas",{position:"absolute"},{class:"sigma-".concat(t)});return this.elements[t]=e,this.container.appendChild(e),e},e.prototype.createCanvasContext=function(t){var e=this.createCanvas(t);return this.canvasContexts[t]=e.getContext("2d",{preserveDrawingBuffer:!1,antialias:!1}),this},e.prototype.createWebGLContext=function(t,e){var r,i=this.createCanvas(t),a=o({preserveDrawingBuffer:!1,antialias:!1},e||{});return(r=i.getContext("webgl2",a))||(r=i.getContext("webgl",a)),r||(r=i.getContext("experimental-webgl",a)),this.webGLContexts[t]=r,this},e.prototype.bindCameraHandlers=function(){var t=this;return this.activeListeners.camera=function(){t._scheduleRefresh()},this.camera.on("updated",this.activeListeners.camera),this},e.prototype.mouseIsOnNode=function(t,e,r){var i=t.x,a=t.y,o=e.x,n=e.y;return i>o-r&&i<o+r&&a>n-r&&a<n+r&&Math.sqrt(Math.pow(i-o,2)+Math.pow(a-n,2))<r},e.prototype.getQuadNodes=function(t){var e=this.viewportToFramedGraph(t);return this.quadtree.point(e.x,1-e.y)},e.prototype.getNodeAtPosition=function(t){for(var e=t.x,r=t.y,i=this.getQuadNodes(t),a=1/0,o=null,n=0,s=i.length;n<s;n++){var u=i[n],d=this.nodeDataCache[u],c=this.framedGraphToViewport(d),h=this.scaleSize(d.size);if(!d.hidden&&this.mouseIsOnNode(t,c,h)){var l=Math.sqrt(Math.pow(e-c.x,2)+Math.pow(r-c.y,2));l<a&&(a=l,o=u)}}return o},e.prototype.bindEventHandlers=function(){var t=this;this.activeListeners.handleResize=function(){t.needToSoftProcess=!0,t._scheduleRefresh()},window.addEventListener("resize",this.activeListeners.handleResize),this.activeListeners.handleMove=function(e){var r={event:e,preventSigmaDefault:function(){e.preventSigmaDefault()}},i=t.getNodeAtPosition(e);if(i&&t.hoveredNode!==i&&!t.nodeDataCache[i].hidden)return t.hoveredNode&&t.emit("leaveNode",o(o({},r),{node:t.hoveredNode})),t.hoveredNode=i,t.emit("enterNode",o(o({},r),{node:i})),void t.scheduleHighlightedNodesRender();if(t.hoveredNode){var a=t.nodeDataCache[t.hoveredNode],n=t.framedGraphToViewport(a),s=t.scaleSize(a.size);if(!t.mouseIsOnNode(e,n,s)){var u=t.hoveredNode;return t.hoveredNode=null,t.emit("leaveNode",o(o({},r),{node:u})),void t.scheduleHighlightedNodesRender()}}!0===t.settings.enableEdgeHoverEvents?t.checkEdgeHoverEvents(r):"debounce"===t.settings.enableEdgeHoverEvents&&(t.checkEdgesEventsFrame||(t.checkEdgesEventsFrame=(0,g.requestFrame)((function(){t.checkEdgeHoverEvents(r),t.checkEdgesEventsFrame=null}))))};var e=function(e){return function(r){var i={event:r,preventSigmaDefault:function(){r.preventSigmaDefault()}},a=r.original.isFakeSigmaMouseEvent?t.getNodeAtPosition(r):t.hoveredNode;if(a)return t.emit("".concat(e,"Node"),o(o({},i),{node:a}));if("wheel"===e?t.settings.enableEdgeWheelEvents:t.settings.enableEdgeClickEvents){var n=t.getEdgeAtPoint(r.x,r.y);if(n)return t.emit("".concat(e,"Edge"),o(o({},i),{edge:n}))}return t.emit("".concat(e,"Stage"),i)}};return this.activeListeners.handleClick=e("click"),this.activeListeners.handleRightClick=e("rightClick"),this.activeListeners.handleDoubleClick=e("doubleClick"),this.activeListeners.handleWheel=e("wheel"),this.activeListeners.handleDown=e("down"),this.mouseCaptor.on("mousemove",this.activeListeners.handleMove),this.mouseCaptor.on("click",this.activeListeners.handleClick),this.mouseCaptor.on("rightClick",this.activeListeners.handleRightClick),this.mouseCaptor.on("doubleClick",this.activeListeners.handleDoubleClick),this.mouseCaptor.on("wheel",this.activeListeners.handleWheel),this.mouseCaptor.on("mousedown",this.activeListeners.handleDown),this},e.prototype.bindGraphHandlers=function(){var t=this,e=this.graph;return this.activeListeners.graphUpdate=function(){t.needToProcess=!0,t._scheduleRefresh()},this.activeListeners.softGraphUpdate=function(){t.needToSoftProcess=!0,t._scheduleRefresh()},this.activeListeners.dropNodeGraphUpdate=function(e){delete t.nodeDataCache[e.key],t.hoveredNode===e.key&&(t.hoveredNode=null),t.activeListeners.graphUpdate()},this.activeListeners.dropEdgeGraphUpdate=function(e){delete t.edgeDataCache[e.key],t.hoveredEdge===e.key&&(t.hoveredEdge=null),t.activeListeners.graphUpdate()},this.activeListeners.clearEdgesGraphUpdate=function(){t.edgeDataCache={},t.hoveredEdge=null,t.activeListeners.graphUpdate()},this.activeListeners.clearGraphUpdate=function(){t.nodeDataCache={},t.hoveredNode=null,t.activeListeners.clearEdgesGraphUpdate()},e.on("nodeAdded",this.activeListeners.graphUpdate),e.on("nodeDropped",this.activeListeners.dropNodeGraphUpdate),e.on("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),e.on("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),e.on("edgeAdded",this.activeListeners.graphUpdate),e.on("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),e.on("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),e.on("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),e.on("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),e.on("cleared",this.activeListeners.clearGraphUpdate),this},e.prototype.unbindGraphHandlers=function(){var t=this.graph;t.removeListener("nodeAdded",this.activeListeners.graphUpdate),t.removeListener("nodeDropped",this.activeListeners.dropNodeGraphUpdate),t.removeListener("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),t.removeListener("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),t.removeListener("edgeAdded",this.activeListeners.graphUpdate),t.removeListener("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),t.removeListener("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),t.removeListener("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),t.removeListener("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),t.removeListener("cleared",this.activeListeners.clearGraphUpdate)},e.prototype.checkEdgeHoverEvents=function(t){var e=this.hoveredNode?null:this.getEdgeAtPoint(t.event.x,t.event.y);return e!==this.hoveredEdge&&(this.hoveredEdge&&this.emit("leaveEdge",o(o({},t),{edge:this.hoveredEdge})),e&&this.emit("enterEdge",o(o({},t),{edge:e})),this.hoveredEdge=e),this},e.prototype.getEdgeAtPoint=function(t,e){var r,i,a=this,o=this.edgeDataCache,s=this.nodeDataCache;if(!(0,v.isPixelColored)(this.webGLContexts.edges,t*this.pixelRatio,e*this.pixelRatio))return null;var u=this.viewportToGraph({x:t,y:e}),d=u.x,c=u.y,h=0;if(this.graph.someEdge((function(t,e,r,i,n,u){var d=n.x,c=n.y,l=u.x,g=u.y;if(o[t].hidden||s[r].hidden||s[i].hidden)return!1;if(d!==l||c!==g){var p=Math.sqrt(Math.pow(l-d,2)+Math.pow(g-c,2)),y=a.graphToViewport({x:d,y:c}),f=y.x,b=y.y,v=a.graphToViewport({x:l,y:g}),_=v.x,m=v.y,w=Math.sqrt(Math.pow(_-f,2)+Math.pow(m-b,2));return h=p/w,!0}})),!h)return null;var l=this.graph.filterEdges((function(t,e,r,i,n,u){return!(o[t].hidden||s[r].hidden||s[i].hidden)&&(!!(0,v.doEdgeCollideWithPoint)(d,c,n.x,n.y,u.x,u.y,o[t].size*h/a.cameraSizeRatio)||void 0)}));if(0===l.length)return null;var g=l[l.length-1],p=-1/0;try{for(var y=n(l),f=y.next();!f.done;f=y.next()){var b=f.value,_=this.graph.getEdgeAttribute(b,"zIndex");_>=p&&(g=b,p=_)}}catch(t){r={error:t}}finally{try{f&&!f.done&&(i=y.return)&&i.call(y)}finally{if(r)throw r.error}}return g},e.prototype.process=function(t){var e=this;void 0===t&&(t=!1);var r=this.graph,i=this.settings,a=this.getDimensions(),o=[1/0,-1/0],n=[1/0,-1/0];this.quadtree.clear(),this.labelGrid.resizeAndClear(a,i.labelGridCellSize),this.highlightedNodes=new Set,this.nodeExtent=(0,g.graphExtent)(r),this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[];var s=new d.default,u=(0,g.matrixFromCamera)(s.getState(),this.getDimensions(),this.getGraphDimensions(),this.getSetting("stagePadding")||0);this.normalizationFunction=(0,g.createNormalizationFunction)(this.customBBox||this.nodeExtent);for(var c={},h=r.nodes(),l=0,p=h.length;l<p;l++){var y=h[l],f=Object.assign({},r.getNodeAttributes(y));i.nodeReducer&&(f=i.nodeReducer(y,f)),c[(v=_(this.settings,y,f)).type]=(c[v.type]||0)+1,this.nodeDataCache[y]=v,this.normalizationFunction.applyTo(v),v.forceLabel&&this.nodesWithForcedLabels.push(y),this.settings.zIndex&&(v.zIndex<o[0]&&(o[0]=v.zIndex),v.zIndex>o[1]&&(o[1]=v.zIndex))}for(var b in this.nodePrograms){if(!this.nodePrograms.hasOwnProperty(b))throw new Error('Sigma: could not find a suitable program for node type "'.concat(b,'"!'));t||this.nodePrograms[b].allocate(c[b]||0),c[b]=0}for(this.settings.zIndex&&o[0]!==o[1]&&(h=(0,g.zIndexOrdering)(o,(function(t){return e.nodeDataCache[t].zIndex}),h)),l=0,p=h.length;l<p;l++){y=h[l];var v=this.nodeDataCache[y];this.quadtree.add(y,v.x,1-v.y,v.size/this.width),"string"!=typeof v.label||v.hidden||this.labelGrid.add(y,v.size,this.framedGraphToViewport(v,{matrix:u}));var w=this.nodePrograms[v.type];if(!w)throw new Error('Sigma: could not find a suitable program for node type "'.concat(v.type,'"!'));w.process(v,v.hidden,c[v.type]++),v.highlighted&&!v.hidden&&this.highlightedNodes.add(y)}this.labelGrid.organize();var k={},x=r.edges();for(l=0,p=x.length;l<p;l++){var E=x[l];f=Object.assign({},r.getEdgeAttributes(E)),i.edgeReducer&&(f=i.edgeReducer(E,f)),k[(v=m(this.settings,0,f)).type]=(k[v.type]||0)+1,this.edgeDataCache[E]=v,v.forceLabel&&!v.hidden&&this.edgesWithForcedLabels.push(E),this.settings.zIndex&&(v.zIndex<n[0]&&(n[0]=v.zIndex),v.zIndex>n[1]&&(n[1]=v.zIndex))}for(var b in this.edgePrograms){if(!this.edgePrograms.hasOwnProperty(b))throw new Error('Sigma: could not find a suitable program for edge type "'.concat(b,'"!'));t||this.edgePrograms[b].allocate(k[b]||0),k[b]=0}for(this.settings.zIndex&&n[0]!==n[1]&&(x=(0,g.zIndexOrdering)(n,(function(t){return e.edgeDataCache[t].zIndex}),x)),l=0,p=x.length;l<p;l++){E=x[l],v=this.edgeDataCache[E];var L=r.extremities(E),A=this.nodeDataCache[L[0]],S=this.nodeDataCache[L[1]],C=v.hidden||A.hidden||S.hidden;this.edgePrograms[v.type].process(A,S,v,C,k[v.type]++)}for(var b in this.edgePrograms){var G=this.edgePrograms[b];t||"function"!=typeof G.computeIndices||G.computeIndices()}return this},e.prototype.handleSettingsUpdate=function(){return this.camera.minRatio=this.settings.minCameraRatio,this.camera.maxRatio=this.settings.maxCameraRatio,this.camera.setState(this.camera.validateState(this.camera.getState())),this},e.prototype._refresh=function(){return this.needToProcess?this.process():this.needToSoftProcess&&this.process(!0),this.needToProcess=!1,this.needToSoftProcess=!1,this.render(),this},e.prototype._scheduleRefresh=function(){var t=this;return this.renderFrame||(this.renderFrame=(0,g.requestFrame)((function(){t._refresh(),t.renderFrame=null}))),this},e.prototype.renderLabels=function(){if(!this.settings.renderLabels)return this;var t=this.camera.getState(),e=this.labelGrid.getLabelsToDisplay(t.ratio,this.settings.labelDensity);(0,u.default)(e,this.nodesWithForcedLabels),this.displayedLabels=new Set;for(var r=this.canvasContexts.labels,i=0,a=e.length;i<a;i++){var n=e[i],s=this.nodeDataCache[n];if(!this.displayedLabels.has(n)&&!s.hidden){var d=this.framedGraphToViewport(s),c=d.x,h=d.y,l=this.scaleSize(s.size);!s.forceLabel&&l<this.settings.labelRenderedSizeThreshold||c<-150||c>this.width+150||h<-50||h>this.height+50||(this.displayedLabels.add(n),this.settings.labelRenderer(r,o(o({key:n},s),{size:l,x:c,y:h}),this.settings))}}return this},e.prototype.renderEdgeLabels=function(){if(!this.settings.renderEdgeLabels)return this;var t=this.canvasContexts.edgeLabels;t.clearRect(0,0,this.width,this.height);for(var e=(0,p.edgeLabelsToDisplayFromNodes)({graph:this.graph,hoveredNode:this.hoveredNode,displayedNodeLabels:this.displayedLabels,highlightedNodes:this.highlightedNodes}).concat(this.edgesWithForcedLabels),r=new Set,i=0,a=e.length;i<a;i++){var n=e[i],s=this.graph.extremities(n),u=this.nodeDataCache[s[0]],d=this.nodeDataCache[s[1]],c=this.edgeDataCache[n];r.has(n)||c.hidden||u.hidden||d.hidden||(this.settings.edgeLabelRenderer(t,o(o({key:n},c),{size:this.scaleSize(c.size)}),o(o(o({key:s[0]},u),this.framedGraphToViewport(u)),{size:this.scaleSize(u.size)}),o(o(o({key:s[1]},d),this.framedGraphToViewport(d)),{size:this.scaleSize(d.size)}),this.settings),r.add(n))}return this},e.prototype.renderHighlightedNodes=function(){var t=this,e=this.canvasContexts.hovers;e.clearRect(0,0,this.width,this.height);var r=[];this.hoveredNode&&!this.nodeDataCache[this.hoveredNode].hidden&&r.push(this.hoveredNode),this.highlightedNodes.forEach((function(e){e!==t.hoveredNode&&r.push(e)})),r.forEach((function(r){return function(r){var i=t.nodeDataCache[r],a=t.framedGraphToViewport(i),n=a.x,s=a.y,u=t.scaleSize(i.size);t.settings.hoverRenderer(e,o(o({key:r},i),{size:u,x:n,y:s}),t.settings)}(r)}));var i={};for(var a in r.forEach((function(e){var r=t.nodeDataCache[e].type;i[r]=(i[r]||0)+1})),this.nodeHoverPrograms)this.nodeHoverPrograms[a].allocate(i[a]||0),i[a]=0;for(var a in r.forEach((function(e){var r=t.nodeDataCache[e];t.nodeHoverPrograms[r.type].process(r,r.hidden,i[r.type]++)})),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.nodeHoverPrograms){var n=this.nodeHoverPrograms[a];n.bind(),n.bufferData(),n.render({matrix:this.matrix,width:this.width,height:this.height,ratio:this.camera.ratio,correctionRatio:this.correctionRatio/this.camera.ratio,scalingRatio:this.pixelRatio})}},e.prototype.scheduleHighlightedNodesRender=function(){var t=this;this.renderHighlightedNodesFrame||this.renderFrame||(this.renderHighlightedNodesFrame=(0,g.requestFrame)((function(){t.renderHighlightedNodesFrame=null,t.renderHighlightedNodes(),t.renderEdgeLabels()})))},e.prototype.render=function(){var t=this;this.emit("beforeRender");var e=function(){return t.emit("afterRender"),t};if(this.renderFrame&&((0,g.cancelFrame)(this.renderFrame),this.renderFrame=null,this.needToProcess=!1,this.needToSoftProcess=!1),this.resize(),this.clear(),this.updateCachedValues(),!this.graph.order)return e();var r=this.mouseCaptor,i=this.camera.isAnimated()||r.isMoving||r.draggedEvents||r.currentWheelDirection,a=this.camera.getState(),o=this.getDimensions(),n=this.getGraphDimensions(),s=this.getSetting("stagePadding")||0;for(var u in this.matrix=(0,g.matrixFromCamera)(a,o,n,s),this.invMatrix=(0,g.matrixFromCamera)(a,o,n,s,!0),this.correctionRatio=(0,g.getMatrixImpact)(this.matrix,a,o),this.nodePrograms)(d=this.nodePrograms[u]).bind(),d.bufferData(),d.render({matrix:this.matrix,width:this.width,height:this.height,ratio:a.ratio,correctionRatio:this.correctionRatio/a.ratio,scalingRatio:this.pixelRatio});if(!this.settings.hideEdgesOnMove||!i)for(var u in this.edgePrograms){var d;(d=this.edgePrograms[u]).bind(),d.bufferData(),d.render({matrix:this.matrix,width:this.width,height:this.height,ratio:a.ratio,correctionRatio:this.correctionRatio/a.ratio,scalingRatio:this.pixelRatio})}return this.settings.hideLabelsOnMove&&i||(this.renderLabels(),this.renderEdgeLabels(),this.renderHighlightedNodes()),e()},e.prototype.updateCachedValues=function(){var t=this.camera.getState().ratio;this.cameraSizeRatio=Math.sqrt(t)},e.prototype.getCamera=function(){return this.camera},e.prototype.getContainer=function(){return this.container},e.prototype.getGraph=function(){return this.graph},e.prototype.setGraph=function(t){t!==this.graph&&(this.unbindGraphHandlers(),this.nodeDataCache={},this.edgeDataCache={},this.displayedLabels.clear(),this.highlightedNodes.clear(),this.hoveredNode=null,this.hoveredEdge=null,this.nodesWithForcedLabels.length=0,this.edgesWithForcedLabels.length=0,null!==this.checkEdgesEventsFrame&&((0,g.cancelFrame)(this.checkEdgesEventsFrame),this.checkEdgesEventsFrame=null),this.graph=t,this.bindGraphHandlers(),this.process(),this.render())},e.prototype.getMouseCaptor=function(){return this.mouseCaptor},e.prototype.getTouchCaptor=function(){return this.touchCaptor},e.prototype.getDimensions=function(){return{width:this.width,height:this.height}},e.prototype.getGraphDimensions=function(){var t=this.customBBox||this.nodeExtent;return{width:t.x[1]-t.x[0]||1,height:t.y[1]-t.y[0]||1}},e.prototype.getNodeDisplayData=function(t){var e=this.nodeDataCache[t];return e?Object.assign({},e):void 0},e.prototype.getEdgeDisplayData=function(t){var e=this.edgeDataCache[t];return e?Object.assign({},e):void 0},e.prototype.getSettings=function(){return o({},this.settings)},e.prototype.getSetting=function(t){return this.settings[t]},e.prototype.setSetting=function(t,e){return this.settings[t]=e,(0,y.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.updateSetting=function(t,e){return this.settings[t]=e(this.settings[t]),(0,y.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.resize=function(){var t=this.width,e=this.height;if(this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.pixelRatio=(0,g.getPixelRatio)(),0===this.width){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.width=1}if(0===this.height){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.height=1}if(t===this.width&&e===this.height)return this;for(var r in this.emit("resize"),this.elements){var i=this.elements[r];i.style.width=this.width+"px",i.style.height=this.height+"px"}for(var r in this.canvasContexts)this.elements[r].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[r].setAttribute("height",this.height*this.pixelRatio+"px"),1!==this.pixelRatio&&this.canvasContexts[r].scale(this.pixelRatio,this.pixelRatio);for(var r in this.webGLContexts)this.elements[r].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[r].setAttribute("height",this.height*this.pixelRatio+"px"),this.webGLContexts[r].viewport(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio);return this},e.prototype.clear=function(){return this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.canvasContexts.labels.clearRect(0,0,this.width,this.height),this.canvasContexts.hovers.clearRect(0,0,this.width,this.height),this.canvasContexts.edgeLabels.clearRect(0,0,this.width,this.height),this},e.prototype.refresh=function(){return this.needToProcess=!0,this._refresh(),this},e.prototype.scheduleRefresh=function(){return this.needToProcess=!0,this._scheduleRefresh(),this},e.prototype.getViewportZoomedState=function(t,e){var r=this.camera.getState(),i=r.ratio,a=r.angle,o=r.x,n=r.y,s=e/i,u={x:this.width/2,y:this.height/2},d=this.viewportToFramedGraph(t),c=this.viewportToFramedGraph(u);return{angle:a,x:(d.x-c.x)*(1-s)+o,y:(d.y-c.y)*(1-s)+n,ratio:e}},e.prototype.viewRectangle=function(){var t=0*this.width/8,e=0*this.height/8,r=this.viewportToFramedGraph({x:0-t,y:0-e}),i=this.viewportToFramedGraph({x:this.width+t,y:0-e}),a=this.viewportToFramedGraph({x:0,y:this.height+e});return{x1:r.x,y1:r.y,x2:i.x,y2:i.y,height:i.y-a.y}},e.prototype.framedGraphToViewport=function(t,e){void 0===e&&(e={});var r=!!e.cameraState||!!e.viewportDimensions||!!e.graphDimensions,i=e.matrix?e.matrix:r?(0,g.matrixFromCamera)(e.cameraState||this.camera.getState(),e.viewportDimensions||this.getDimensions(),e.graphDimensions||this.getGraphDimensions(),e.padding||this.getSetting("stagePadding")||0):this.matrix,a=(0,b.multiplyVec2)(i,t);return{x:(1+a.x)*this.width/2,y:(1-a.y)*this.height/2}},e.prototype.viewportToFramedGraph=function(t,e){void 0===e&&(e={});var r=!!e.cameraState||!!e.viewportDimensions||!e.graphDimensions,i=e.matrix?e.matrix:r?(0,g.matrixFromCamera)(e.cameraState||this.camera.getState(),e.viewportDimensions||this.getDimensions(),e.graphDimensions||this.getGraphDimensions(),e.padding||this.getSetting("stagePadding")||0,!0):this.invMatrix,a=(0,b.multiplyVec2)(i,{x:t.x/this.width*2-1,y:1-t.y/this.height*2});return isNaN(a.x)&&(a.x=0),isNaN(a.y)&&(a.y=0),a},e.prototype.viewportToGraph=function(t,e){return void 0===e&&(e={}),this.normalizationFunction.inverse(this.viewportToFramedGraph(t,e))},e.prototype.graphToViewport=function(t,e){return void 0===e&&(e={}),this.framedGraphToViewport(this.normalizationFunction(t),e)},e.prototype.getBBox=function(){return(0,g.graphExtent)(this.graph)},e.prototype.getCustomBBox=function(){return this.customBBox},e.prototype.setCustomBBox=function(t){return this.customBBox=t,this._scheduleRefresh(),this},e.prototype.kill=function(){this.emit("kill"),this.removeAllListeners(),this.camera.removeListener("updated",this.activeListeners.camera),window.removeEventListener("resize",this.activeListeners.handleResize),this.mouseCaptor.kill(),this.touchCaptor.kill(),this.unbindGraphHandlers(),this.quadtree=new h.default,this.nodeDataCache={},this.edgeDataCache={},this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[],this.highlightedNodes.clear(),this.renderFrame&&((0,g.cancelFrame)(this.renderFrame),this.renderFrame=null),this.renderHighlightedNodesFrame&&((0,g.cancelFrame)(this.renderHighlightedNodesFrame),this.renderHighlightedNodesFrame=null);for(var t=this.container;t.firstChild;)t.removeChild(t.firstChild)},e.prototype.scaleSize=function(t){return t/this.cameraSizeRatio},e.prototype.getCanvases=function(){return o({},this.elements)},e}(l.TypedEventEmitter);e.default=w},291:function(t,e,r){"use strict";var i,a=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.TypedEventEmitter=void 0;var o=function(t){function e(){var e=t.call(this)||this;return e.rawEmitter=e,e}return a(e,t),e}(r(187).EventEmitter);e.TypedEventEmitter=o},227:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.animateNodes=e.ANIMATE_DEFAULTS=void 0;var a=r(524),o=i(r(941));e.ANIMATE_DEFAULTS={easing:"quadraticInOut",duration:150},e.animateNodes=function(t,r,i,n){var s=Object.assign({},e.ANIMATE_DEFAULTS,i),u="function"==typeof s.easing?s.easing:o.default[s.easing],d=Date.now(),c={};for(var h in r){var l=r[h];for(var g in c[h]={},l)c[h][g]=t.getNodeAttribute(h,g)}var p=null,y=function(){p=null;var e=(Date.now()-d)/s.duration;if(e>=1){for(var i in r){var o=r[i];for(var h in o)t.setNodeAttribute(i,h,o[h])}"function"==typeof n&&n()}else{for(var i in e=u(e),r){o=r[i];var l=c[i];for(var h in o)t.setNodeAttribute(i,h,o[h]*e+l[h]*(1-e))}p=(0,a.requestFrame)(y)}};return y(),function(){p&&(0,a.cancelFrame)(p)}}},109:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HTML_COLORS=void 0,e.HTML_COLORS={black:"#000000",silver:"#C0C0C0",gray:"#808080",grey:"#808080",white:"#FFFFFF",maroon:"#800000",red:"#FF0000",purple:"#800080",fuchsia:"#FF00FF",green:"#008000",lime:"#00FF00",olive:"#808000",yellow:"#FFFF00",navy:"#000080",blue:"#0000FF",teal:"#008080",aqua:"#00FFFF",darkblue:"#00008B",mediumblue:"#0000CD",darkgreen:"#006400",darkcyan:"#008B8B",deepskyblue:"#00BFFF",darkturquoise:"#00CED1",mediumspringgreen:"#00FA9A",springgreen:"#00FF7F",cyan:"#00FFFF",midnightblue:"#191970",dodgerblue:"#1E90FF",lightseagreen:"#20B2AA",forestgreen:"#228B22",seagreen:"#2E8B57",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",limegreen:"#32CD32",mediumseagreen:"#3CB371",turquoise:"#40E0D0",royalblue:"#4169E1",steelblue:"#4682B4",darkslateblue:"#483D8B",mediumturquoise:"#48D1CC",indigo:"#4B0082",darkolivegreen:"#556B2F",cadetblue:"#5F9EA0",cornflowerblue:"#6495ED",rebeccapurple:"#663399",mediumaquamarine:"#66CDAA",dimgray:"#696969",dimgrey:"#696969",slateblue:"#6A5ACD",olivedrab:"#6B8E23",slategray:"#708090",slategrey:"#708090",lightslategray:"#778899",lightslategrey:"#778899",mediumslateblue:"#7B68EE",lawngreen:"#7CFC00",chartreuse:"#7FFF00",aquamarine:"#7FFFD4",skyblue:"#87CEEB",lightskyblue:"#87CEFA",blueviolet:"#8A2BE2",darkred:"#8B0000",darkmagenta:"#8B008B",saddlebrown:"#8B4513",darkseagreen:"#8FBC8F",lightgreen:"#90EE90",mediumpurple:"#9370DB",darkviolet:"#9400D3",palegreen:"#98FB98",darkorchid:"#9932CC",yellowgreen:"#9ACD32",sienna:"#A0522D",brown:"#A52A2A",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",lightblue:"#ADD8E6",greenyellow:"#ADFF2F",paleturquoise:"#AFEEEE",lightsteelblue:"#B0C4DE",powderblue:"#B0E0E6",firebrick:"#B22222",darkgoldenrod:"#B8860B",mediumorchid:"#BA55D3",rosybrown:"#BC8F8F",darkkhaki:"#BDB76B",mediumvioletred:"#C71585",indianred:"#CD5C5C",peru:"#CD853F",chocolate:"#D2691E",tan:"#D2B48C",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",thistle:"#D8BFD8",orchid:"#DA70D6",goldenrod:"#DAA520",palevioletred:"#DB7093",crimson:"#DC143C",gainsboro:"#DCDCDC",plum:"#DDA0DD",burlywood:"#DEB887",lightcyan:"#E0FFFF",lavender:"#E6E6FA",darksalmon:"#E9967A",violet:"#EE82EE",palegoldenrod:"#EEE8AA",lightcoral:"#F08080",khaki:"#F0E68C",aliceblue:"#F0F8FF",honeydew:"#F0FFF0",azure:"#F0FFFF",sandybrown:"#F4A460",wheat:"#F5DEB3",beige:"#F5F5DC",whitesmoke:"#F5F5F5",mintcream:"#F5FFFA",ghostwhite:"#F8F8FF",salmon:"#FA8072",antiquewhite:"#FAEBD7",linen:"#FAF0E6",lightgoldenrodyellow:"#FAFAD2",oldlace:"#FDF5E6",magenta:"#FF00FF",deeppink:"#FF1493",orangered:"#FF4500",tomato:"#FF6347",hotpink:"#FF69B4",coral:"#FF7F50",darkorange:"#FF8C00",lightsalmon:"#FFA07A",orange:"#FFA500",lightpink:"#FFB6C1",pink:"#FFC0CB",gold:"#FFD700",peachpuff:"#FFDAB9",navajowhite:"#FFDEAD",moccasin:"#FFE4B5",bisque:"#FFE4C4",mistyrose:"#FFE4E1",blanchedalmond:"#FFEBCD",papayawhip:"#FFEFD5",lavenderblush:"#FFF0F5",seashell:"#FFF5EE",cornsilk:"#FFF8DC",lemonchiffon:"#FFFACD",floralwhite:"#FFFAF0",snow:"#FFFAFA",lightyellow:"#FFFFE0",ivory:"#FFFFF0"}},941:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.cubicInOut=e.cubicOut=e.cubicIn=e.quadraticInOut=e.quadraticOut=e.quadraticIn=e.linear=void 0,e.linear=function(t){return t},e.quadraticIn=function(t){return t*t},e.quadraticOut=function(t){return t*(2-t)},e.quadraticInOut=function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)},e.cubicIn=function(t){return t*t*t},e.cubicOut=function(t){return--t*t*t+1},e.cubicInOut=function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)};var r={linear:e.linear,quadraticIn:e.quadraticIn,quadraticOut:e.quadraticOut,quadraticInOut:e.quadraticInOut,cubicIn:e.cubicIn,cubicOut:e.cubicOut,cubicInOut:e.cubicInOut};e.default=r},822:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.doEdgeCollideWithPoint=e.isPixelColored=void 0,e.isPixelColored=function(t,e,r){var i=new Uint8Array(4);return t.readPixels(e,t.drawingBufferHeight-r,1,1,t.RGBA,t.UNSIGNED_BYTE,i),i[3]>0},e.doEdgeCollideWithPoint=function(t,e,r,i,a,o,n){return!(t<r-n&&t<a-n||e<i-n&&e<o-n||t>r+n&&t>a+n||e>i+n&&e>o+n||!(Math.abs((a-r)*(i-e)-(r-t)*(o-i))/Math.sqrt(Math.pow(a-r,2)+Math.pow(o-i,2))<n/2))}},524:function(t,e,r){"use strict";var i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,a,o=r.call(t),n=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)n.push(i.value)}catch(t){a={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return n},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.validateGraph=e.canUse32BitsIndices=e.extractPixel=e.getMatrixImpact=e.matrixFromCamera=e.getCorrectionRatio=e.floatColor=e.floatArrayColor=e.parseColor=e.zIndexOrdering=e.createNormalizationFunction=e.graphExtent=e.getPixelRatio=e.createElement=e.cancelFrame=e.requestFrame=e.assignDeep=e.assign=e.isPlainObject=void 0;var o=a(r(186)),n=r(132),s=r(109);function u(t){return"object"==typeof t&&null!==t&&t.constructor===Object}e.isPlainObject=u,e.assign=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];t=t||{};for(var i=0,a=e.length;i<a;i++){var o=e[i];o&&Object.assign(t,o)}return t},e.assignDeep=function t(e){for(var r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];e=e||{};for(var a=0,o=r.length;a<o;a++){var n=r[a];if(n)for(var s in n)u(n[s])?e[s]=t(e[s],n[s]):e[s]=n[s]}return e},e.requestFrame="undefined"!=typeof requestAnimationFrame?function(t){return requestAnimationFrame(t)}:function(t){return setTimeout(t,0)},e.cancelFrame="undefined"!=typeof cancelAnimationFrame?function(t){return cancelAnimationFrame(t)}:function(t){return clearTimeout(t)},e.createElement=function(t,e,r){var i=document.createElement(t);if(e)for(var a in e)i.style[a]=e[a];if(r)for(var a in r)i.setAttribute(a,r[a]);return i},e.getPixelRatio=function(){return void 0!==window.devicePixelRatio?window.devicePixelRatio:1},e.graphExtent=function(t){if(!t.order)return{x:[0,1],y:[0,1]};var e=1/0,r=-1/0,i=1/0,a=-1/0;return t.forEachNode((function(t,o){var n=o.x,s=o.y;n<e&&(e=n),n>r&&(r=n),s<i&&(i=s),s>a&&(a=s)})),{x:[e,r],y:[i,a]}},e.createNormalizationFunction=function(t){var e=i(t.x,2),r=e[0],a=e[1],o=i(t.y,2),n=o[0],s=o[1],u=Math.max(a-r,s-n),d=(a+r)/2,c=(s+n)/2;(0===u||Math.abs(u)===1/0||isNaN(u))&&(u=1),isNaN(d)&&(d=0),isNaN(c)&&(c=0);var h=function(t){return{x:.5+(t.x-d)/u,y:.5+(t.y-c)/u}};return h.applyTo=function(t){t.x=.5+(t.x-d)/u,t.y=.5+(t.y-c)/u},h.inverse=function(t){return{x:d+u*(t.x-.5),y:c+u*(t.y-.5)}},h.ratio=u,h},e.zIndexOrdering=function(t,e,r){return r.sort((function(t,r){var i=e(t)||0,a=e(r)||0;return i<a?-1:i>a?1:0}))};var d=new Int8Array(4),c=new Int32Array(d.buffer,0,1),h=new Float32Array(d.buffer,0,1),l=/^\s*rgba?\s*\(/,g=/^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;function p(t){var e=0,r=0,i=0,a=1;if("#"===t[0])4===t.length?(e=parseInt(t.charAt(1)+t.charAt(1),16),r=parseInt(t.charAt(2)+t.charAt(2),16),i=parseInt(t.charAt(3)+t.charAt(3),16)):(e=parseInt(t.charAt(1)+t.charAt(2),16),r=parseInt(t.charAt(3)+t.charAt(4),16),i=parseInt(t.charAt(5)+t.charAt(6),16)),9===t.length&&(a=parseInt(t.charAt(7)+t.charAt(8),16)/255);else if(l.test(t)){var o=t.match(g);o&&(e=+o[1],r=+o[2],i=+o[3],o[4]&&(a=+o[4]))}return{r:e,g:r,b:i,a}}e.parseColor=p;var y={};for(var f in s.HTML_COLORS)y[f]=b(s.HTML_COLORS[f]),y[s.HTML_COLORS[f]]=y[f];function b(t){if(void 0!==y[t])return y[t];var e=p(t),r=e.r,i=e.g,a=e.b,o=e.a;o=255*o|0,c[0]=4278190079&(o<<24|a<<16|i<<8|r);var n=h[0];return y[t]=n,n}function v(t,e){var r=t.height/t.width,i=e.height/e.width;return r<1&&i>1||r>1&&i<1?1:Math.min(Math.max(i,1/i),Math.max(1/r,r))}e.floatArrayColor=function(t){var e=p(t=s.HTML_COLORS[t]||t),r=e.r,i=e.g,a=e.b,o=e.a;return new Float32Array([r/255,i/255,a/255,o])},e.floatColor=b,e.getCorrectionRatio=v,e.matrixFromCamera=function(t,e,r,i,a){var o=t.angle,s=t.ratio,u=t.x,d=t.y,c=e.width,h=e.height,l=(0,n.identity)(),g=Math.min(c,h)-2*i,p=v(e,r);return a?((0,n.multiply)(l,(0,n.translate)((0,n.identity)(),u,d)),(0,n.multiply)(l,(0,n.scale)((0,n.identity)(),s)),(0,n.multiply)(l,(0,n.rotate)((0,n.identity)(),o)),(0,n.multiply)(l,(0,n.scale)((0,n.identity)(),c/g/2/p,h/g/2/p))):((0,n.multiply)(l,(0,n.scale)((0,n.identity)(),g/c*2*p,g/h*2*p)),(0,n.multiply)(l,(0,n.rotate)((0,n.identity)(),-o)),(0,n.multiply)(l,(0,n.scale)((0,n.identity)(),1/s)),(0,n.multiply)(l,(0,n.translate)((0,n.identity)(),-u,-d))),l},e.getMatrixImpact=function(t,e,r){var i=(0,n.multiplyVec2)(t,{x:Math.cos(e.angle),y:Math.sin(e.angle)},0),a=i.x,o=i.y;return 1/Math.sqrt(Math.pow(a,2)+Math.pow(o,2))/r.width},e.extractPixel=function(t,e,r,i){var a=i||new Uint8Array(4);return t.readPixels(e,r,1,1,t.RGBA,t.UNSIGNED_BYTE,a),a},e.canUse32BitsIndices=function(t){return"undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||!!t.getExtension("OES_element_index_uint")},e.validateGraph=function(t){if(!(0,o.default)(t))throw new Error("Sigma: invalid graph instance.");t.forEachNode((function(t,e){if(!Number.isFinite(e.x)||!Number.isFinite(e.y))throw new Error("Sigma: Coordinates of node ".concat(t," are invalid. A node must have a numeric 'x' and 'y' attribute."))}))}},132:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.multiplyVec2=e.multiply=e.translate=e.rotate=e.scale=e.identity=void 0,e.identity=function(){return Float32Array.of(1,0,0,0,1,0,0,0,1)},e.scale=function(t,e,r){return t[0]=e,t[4]="number"==typeof r?r:e,t},e.rotate=function(t,e){var r=Math.sin(e),i=Math.cos(e);return t[0]=i,t[1]=r,t[3]=-r,t[4]=i,t},e.translate=function(t,e,r){return t[6]=e,t[7]=r,t},e.multiply=function(t,e){var r=t[0],i=t[1],a=t[2],o=t[3],n=t[4],s=t[5],u=t[6],d=t[7],c=t[8],h=e[0],l=e[1],g=e[2],p=e[3],y=e[4],f=e[5],b=e[6],v=e[7],_=e[8];return t[0]=h*r+l*o+g*u,t[1]=h*i+l*n+g*d,t[2]=h*a+l*s+g*c,t[3]=p*r+y*o+f*u,t[4]=p*i+y*n+f*d,t[5]=p*a+y*s+f*c,t[6]=b*r+v*o+_*u,t[7]=b*i+v*n+_*d,t[8]=b*a+v*s+_*c,t},e.multiplyVec2=function(t,e,r){void 0===r&&(r=1);var i=t[0],a=t[1],o=t[3],n=t[4],s=t[6],u=t[7],d=e.x,c=e.y;return{x:d*i+c*o+s*r,y:d*a+c*n+u*r}}},829:(t,e,r)=>{"use strict";r.r(e),r.d(e,{SigmaGraphCreator:()=>u});var i=r(698),a=r.n(i),o=r(26),n=r.n(o);const s=JSON.parse('{"attributes":{},"nodes":[{"key":"1","attributes":{"id":1,"route_id":5.701845630362371,"train_id":1}},{"key":"2","attributes":{"id":2,"route_id":0.18128408675612495,"train_id":1}},{"key":"3","attributes":{"id":3,"route_id":16.377882450009952,"train_id":1}},{"key":"4","attributes":{"id":4,"route_id":16.06338982558116,"train_id":1}},{"key":"5","attributes":{"id":5,"route_id":13.018556948886742,"train_id":1}},{"key":"6","attributes":{"id":6,"route_id":2.088315585813267,"train_id":1}},{"key":"7","attributes":{"id":7,"route_id":10.17487971780228,"train_id":1}},{"key":"8","attributes":{"id":8,"route_id":14.98371754888213,"train_id":1}},{"key":"9","attributes":{"id":9,"route_id":9.205876360603847,"train_id":1}},{"key":"10","attributes":{"id":10,"route_id":5.510622841116504,"train_id":1}},{"key":"11","attributes":{"id":11,"route_id":3.6105215317989336,"train_id":1}},{"key":"12","attributes":{"id":12,"route_id":10.313807844787593,"train_id":1}},{"key":"13","attributes":{"id":13,"route_id":13.268627415808774,"train_id":1}},{"key":"14","attributes":{"id":14,"route_id":3.600438366275764,"train_id":1}},{"key":"15","attributes":{"id":15,"route_id":2.661198553006324,"train_id":1}},{"key":"16","attributes":{"id":16,"route_id":10.908741876693949,"train_id":1}},{"key":"17","attributes":{"id":17,"route_id":1.4235183209186526,"train_id":1}},{"key":"18","attributes":{"id":18,"route_id":1.6730178462083216,"train_id":2}},{"key":"19","attributes":{"id":19,"route_id":13.818223511242945,"train_id":2}},{"key":"20","attributes":{"id":20,"route_id":2.8882845677134084,"train_id":2}},{"key":"21","attributes":{"id":21,"route_id":5.728006541603887,"train_id":2}},{"key":"22","attributes":{"id":22,"route_id":10.599465137731121,"train_id":2}},{"key":"23","attributes":{"id":23,"route_id":16.653343486059804,"train_id":2}},{"key":"24","attributes":{"id":24,"route_id":16.046149002636607,"train_id":2}},{"key":"25","attributes":{"id":25,"route_id":13.574999119904062,"train_id":2}},{"key":"26","attributes":{"id":26,"route_id":6.5221916882254565,"train_id":2}},{"key":"27","attributes":{"id":27,"route_id":2.043829647068814,"train_id":2}},{"key":"28","attributes":{"id":28,"route_id":0.3725735024436596,"train_id":2}},{"key":"29","attributes":{"id":29,"route_id":5.64786758451459,"train_id":2}},{"key":"30","attributes":{"id":30,"route_id":1.430499147033531,"train_id":2}},{"key":"31","attributes":{"id":31,"route_id":16.42460086431888,"train_id":2}},{"key":"32","attributes":{"id":32,"route_id":5.6653636919892945,"train_id":2}},{"key":"33","attributes":{"id":33,"route_id":5.056892134409702,"train_id":2}},{"key":"34","attributes":{"id":34,"route_id":2.603817359753566,"train_id":2}},{"key":"35","attributes":{"id":35,"route_id":5.4452927389470736,"train_id":3}},{"key":"36","attributes":{"id":36,"route_id":11.97921882476904,"train_id":3}},{"key":"37","attributes":{"id":37,"route_id":6.830085799445413,"train_id":3}},{"key":"38","attributes":{"id":38,"route_id":12.030468831779265,"train_id":3}},{"key":"39","attributes":{"id":39,"route_id":0.5550437581070113,"train_id":3}},{"key":"40","attributes":{"id":40,"route_id":1.426492873903134,"train_id":3}},{"key":"41","attributes":{"id":41,"route_id":7.288147305303681,"train_id":3}},{"key":"42","attributes":{"id":42,"route_id":16.950695882944952,"train_id":3}},{"key":"43","attributes":{"id":43,"route_id":13.295421596399875,"train_id":3}},{"key":"44","attributes":{"id":44,"route_id":8.298292302806273,"train_id":3}},{"key":"45","attributes":{"id":45,"route_id":16.47788527203875,"train_id":3}},{"key":"46","attributes":{"id":46,"route_id":5.897403109918823,"train_id":3}},{"key":"47","attributes":{"id":47,"route_id":15.122184363725008,"train_id":3}},{"key":"48","attributes":{"id":48,"route_id":0.43758554430550856,"train_id":3}},{"key":"49","attributes":{"id":49,"route_id":8.081829438137245,"train_id":3}},{"key":"50","attributes":{"id":50,"route_id":14.448381750785437,"train_id":3}},{"key":"51","attributes":{"id":51,"route_id":10.084457169408601,"train_id":3}},{"key":"52","attributes":{"id":52,"route_id":5.353249429345031,"train_id":3}},{"key":"53","attributes":{"id":53,"route_id":13.112450653299728,"train_id":3}},{"key":"54","attributes":{"id":54,"route_id":6.949205302927691,"train_id":4}},{"key":"55","attributes":{"id":55,"route_id":2.718403685095116,"train_id":4}},{"key":"56","attributes":{"id":56,"route_id":14.12495373338922,"train_id":4}},{"key":"57","attributes":{"id":57,"route_id":10.301567646726305,"train_id":4}},{"key":"58","attributes":{"id":58,"route_id":17.829288459918267,"train_id":4}},{"key":"59","attributes":{"id":59,"route_id":4.991458290591152,"train_id":4}},{"key":"60","attributes":{"id":60,"route_id":14.692519613016993,"train_id":4}},{"key":"61","attributes":{"id":61,"route_id":0.6085434793973161,"train_id":4}},{"key":"62","attributes":{"id":62,"route_id":8.227553877343334,"train_id":4}},{"key":"63","attributes":{"id":63,"route_id":3.393975672231469,"train_id":4}},{"key":"64","attributes":{"id":64,"route_id":5.135353191578039,"train_id":4}},{"key":"65","attributes":{"id":65,"route_id":7.54230323649123,"train_id":4}},{"key":"66","attributes":{"id":66,"route_id":11.944135405267907,"train_id":4}},{"key":"67","attributes":{"id":67,"route_id":3.0117214124361382,"train_id":4}},{"key":"68","attributes":{"id":68,"route_id":10.641713789591824,"train_id":4}},{"key":"69","attributes":{"id":69,"route_id":17.527097086531512,"train_id":4}},{"key":"70","attributes":{"id":70,"route_id":12.32103342776552,"train_id":4}},{"key":"71","attributes":{"id":71,"route_id":8.634726422198074,"train_id":4}},{"key":"72","attributes":{"id":72,"route_id":9.69411111948771,"train_id":5}},{"key":"73","attributes":{"id":73,"route_id":8.744712146517022,"train_id":5}},{"key":"74","attributes":{"id":74,"route_id":8.780098636005473,"train_id":5}},{"key":"75","attributes":{"id":75,"route_id":1.9500884908938616,"train_id":5}},{"key":"76","attributes":{"id":76,"route_id":15.746394512359059,"train_id":5}},{"key":"77","attributes":{"id":77,"route_id":1.648523909162754,"train_id":5}},{"key":"78","attributes":{"id":78,"route_id":2.816638921437172,"train_id":5}},{"key":"79","attributes":{"id":79,"route_id":7.2152953529568205,"train_id":5}},{"key":"80","attributes":{"id":80,"route_id":5.656955024290154,"train_id":5}},{"key":"81","attributes":{"id":81,"route_id":1.8849989299761374,"train_id":5}},{"key":"82","attributes":{"id":82,"route_id":17.179249933161888,"train_id":5}},{"key":"83","attributes":{"id":83,"route_id":3.6825997092417833,"train_id":5}},{"key":"84","attributes":{"id":84,"route_id":15.876027628772768,"train_id":5}},{"key":"85","attributes":{"id":85,"route_id":15.244382254940971,"train_id":5}},{"key":"86","attributes":{"id":86,"route_id":11.081610152122758,"train_id":5}},{"key":"87","attributes":{"id":87,"route_id":11.464932703610124,"train_id":5}},{"key":"88","attributes":{"id":88,"route_id":4.807749109882018,"train_id":5}},{"key":"89","attributes":{"id":89,"route_id":7.266759755059445,"train_id":5}},{"key":"90","attributes":{"id":90,"route_id":7.846073482477546,"train_id":6}},{"key":"91","attributes":{"id":91,"route_id":11.990642458515868,"train_id":6}},{"key":"92","attributes":{"id":92,"route_id":3.3017043360606912,"train_id":6}},{"key":"93","attributes":{"id":93,"route_id":0.9034853390917874,"train_id":6}},{"key":"94","attributes":{"id":94,"route_id":2.279176941635061,"train_id":6}},{"key":"95","attributes":{"id":95,"route_id":6.7143445121708645,"train_id":6}},{"key":"96","attributes":{"id":96,"route_id":1.577604935724537,"train_id":6}},{"key":"97","attributes":{"id":97,"route_id":9.91037926639488,"train_id":6}},{"key":"98","attributes":{"id":98,"route_id":6.7827127811189385,"train_id":6}},{"key":"99","attributes":{"id":99,"route_id":10.834753746582876,"train_id":6}},{"key":"100","attributes":{"id":100,"route_id":9.854117128672108,"train_id":6}},{"key":"101","attributes":{"id":101,"route_id":1.6679290113568221,"train_id":6}},{"key":"102","attributes":{"id":102,"route_id":13.687821120160585,"train_id":6}},{"key":"103","attributes":{"id":103,"route_id":8.17489864963915,"train_id":6}},{"key":"104","attributes":{"id":104,"route_id":11.889369785546158,"train_id":6}},{"key":"105","attributes":{"id":105,"route_id":6.900934834866089,"train_id":6}},{"key":"106","attributes":{"id":106,"route_id":3.46567354565777,"train_id":7}},{"key":"107","attributes":{"id":107,"route_id":17.06526400113294,"train_id":7}},{"key":"108","attributes":{"id":108,"route_id":11.543812191512071,"train_id":7}},{"key":"109","attributes":{"id":109,"route_id":3.8332894752221276,"train_id":7}},{"key":"110","attributes":{"id":110,"route_id":8.438695013606726,"train_id":7}},{"key":"111","attributes":{"id":111,"route_id":1.375954692819966,"train_id":7}},{"key":"112","attributes":{"id":112,"route_id":0.5277223109540361,"train_id":7}},{"key":"113","attributes":{"id":113,"route_id":1.7278834438268964,"train_id":7}},{"key":"114","attributes":{"id":114,"route_id":17.667315728081128,"train_id":7}},{"key":"115","attributes":{"id":115,"route_id":12.681682366783887,"train_id":7}},{"key":"116","attributes":{"id":116,"route_id":7.170536400736766,"train_id":7}},{"key":"117","attributes":{"id":117,"route_id":15.218062244403983,"train_id":7}},{"key":"118","attributes":{"id":118,"route_id":10.390813738993925,"train_id":7}},{"key":"119","attributes":{"id":119,"route_id":13.581190555388643,"train_id":7}},{"key":"120","attributes":{"id":120,"route_id":17.474457976984866,"train_id":7}},{"key":"121","attributes":{"id":121,"route_id":10.01052700722445,"train_id":7}},{"key":"122","attributes":{"id":122,"route_id":11.77652136696387,"train_id":7}},{"key":"123","attributes":{"id":123,"route_id":3.6985405617417264,"train_id":7}},{"key":"124","attributes":{"id":124,"route_id":7.86029497993279,"train_id":8}},{"key":"125","attributes":{"id":125,"route_id":12.423036108269233,"train_id":8}},{"key":"126","attributes":{"id":126,"route_id":8.41531203609372,"train_id":8}},{"key":"127","attributes":{"id":127,"route_id":5.476138563831412,"train_id":8}},{"key":"128","attributes":{"id":128,"route_id":17.561524838223228,"train_id":8}},{"key":"129","attributes":{"id":129,"route_id":8.952035224956097,"train_id":8}},{"key":"130","attributes":{"id":130,"route_id":17.88396435895932,"train_id":8}},{"key":"131","attributes":{"id":131,"route_id":15.467171477654896,"train_id":8}},{"key":"132","attributes":{"id":132,"route_id":8.752525129015517,"train_id":8}},{"key":"133","attributes":{"id":133,"route_id":6.432553027653954,"train_id":8}},{"key":"134","attributes":{"id":134,"route_id":16.88279093795653,"train_id":8}},{"key":"135","attributes":{"id":135,"route_id":5.503083719192099,"train_id":8}},{"key":"136","attributes":{"id":136,"route_id":0.23542657964172697,"train_id":8}},{"key":"137","attributes":{"id":137,"route_id":2.1903805472971007,"train_id":8}},{"key":"138","attributes":{"id":138,"route_id":10.392765057486582,"train_id":8}},{"key":"139","attributes":{"id":139,"route_id":4.60100083963914,"train_id":8}},{"key":"140","attributes":{"id":140,"route_id":6.199285714809823,"train_id":8}},{"key":"141","attributes":{"id":141,"route_id":10.28722545823195,"train_id":8}},{"key":"142","attributes":{"id":142,"route_id":4.479397850300504,"train_id":9}},{"key":"143","attributes":{"id":143,"route_id":7.935791782607211,"train_id":9}},{"key":"144","attributes":{"id":144,"route_id":14.485891093171269,"train_id":9}},{"key":"145","attributes":{"id":145,"route_id":14.231980283083558,"train_id":9}},{"key":"146","attributes":{"id":146,"route_id":4.837812968287135,"train_id":9}},{"key":"147","attributes":{"id":147,"route_id":2.3165541571017947,"train_id":9}},{"key":"148","attributes":{"id":148,"route_id":0.46252905628414354,"train_id":9}},{"key":"149","attributes":{"id":149,"route_id":12.555044014690239,"train_id":9}},{"key":"150","attributes":{"id":150,"route_id":9.499138537675922,"train_id":9}},{"key":"151","attributes":{"id":151,"route_id":13.222605798943938,"train_id":9}},{"key":"152","attributes":{"id":152,"route_id":7.403631583055329,"train_id":9}},{"key":"153","attributes":{"id":153,"route_id":11.857465924780815,"train_id":9}},{"key":"154","attributes":{"id":154,"route_id":7.793404992575795,"train_id":9}},{"key":"155","attributes":{"id":155,"route_id":10.512629339303778,"train_id":9}},{"key":"156","attributes":{"id":156,"route_id":9.117708723067533,"train_id":9}},{"key":"157","attributes":{"id":157,"route_id":15.997592495045762,"train_id":9}},{"key":"158","attributes":{"id":158,"route_id":5.710624370314857,"train_id":10}},{"key":"159","attributes":{"id":159,"route_id":12.248941701913582,"train_id":10}},{"key":"160","attributes":{"id":160,"route_id":11.453753917013076,"train_id":10}},{"key":"161","attributes":{"id":161,"route_id":12.371313134208716,"train_id":10}},{"key":"162","attributes":{"id":162,"route_id":8.819055903135482,"train_id":10}},{"key":"163","attributes":{"id":163,"route_id":2.0909453606673645,"train_id":10}},{"key":"164","attributes":{"id":164,"route_id":3.702096710984323,"train_id":10}},{"key":"165","attributes":{"id":165,"route_id":1.7991614496007702,"train_id":10}},{"key":"166","attributes":{"id":166,"route_id":14.545520872170428,"train_id":10}},{"key":"167","attributes":{"id":167,"route_id":6.295687355835236,"train_id":10}},{"key":"168","attributes":{"id":168,"route_id":3.6391169019732974,"train_id":10}},{"key":"169","attributes":{"id":169,"route_id":1.1785559457940809,"train_id":10}},{"key":"170","attributes":{"id":170,"route_id":8.727769993345863,"train_id":10}},{"key":"171","attributes":{"id":171,"route_id":3.723940994151549,"train_id":10}},{"key":"172","attributes":{"id":172,"route_id":9.42634650227983,"train_id":10}},{"key":"173","attributes":{"id":173,"route_id":7.271609988920982,"train_id":11}},{"key":"174","attributes":{"id":174,"route_id":15.040067537202356,"train_id":11}},{"key":"175","attributes":{"id":175,"route_id":9.301814184823133,"train_id":11}},{"key":"176","attributes":{"id":176,"route_id":1.844863414834301,"train_id":11}},{"key":"177","attributes":{"id":177,"route_id":0.1510567287734006,"train_id":11}},{"key":"178","attributes":{"id":178,"route_id":5.762379585500284,"train_id":11}},{"key":"179","attributes":{"id":179,"route_id":7.025377424062331,"train_id":11}},{"key":"180","attributes":{"id":180,"route_id":12.459750584080938,"train_id":11}},{"key":"181","attributes":{"id":181,"route_id":9.372605326136656,"train_id":11}},{"key":"182","attributes":{"id":182,"route_id":15.21470022008647,"train_id":11}},{"key":"183","attributes":{"id":183,"route_id":3.84840717823801,"train_id":11}},{"key":"184","attributes":{"id":184,"route_id":1.6631516594194746,"train_id":11}},{"key":"185","attributes":{"id":185,"route_id":18.995979332739985,"train_id":11}},{"key":"186","attributes":{"id":186,"route_id":17.897622565835377,"train_id":11}},{"key":"187","attributes":{"id":187,"route_id":4.964299160941944,"train_id":11}},{"key":"188","attributes":{"id":188,"route_id":18.67946116615026,"train_id":11}},{"key":"189","attributes":{"id":189,"route_id":2.622053675293734,"train_id":11}},{"key":"190","attributes":{"id":190,"route_id":5.949935931478366,"train_id":11}},{"key":"191","attributes":{"id":191,"route_id":10.368299062895822,"train_id":11}},{"key":"192","attributes":{"id":192,"route_id":0.6444445300787693,"train_id":12}},{"key":"193","attributes":{"id":193,"route_id":12.30327818759653,"train_id":12}},{"key":"194","attributes":{"id":194,"route_id":2.7536111369563345,"train_id":12}},{"key":"195","attributes":{"id":195,"route_id":10.8796714711513,"train_id":12}},{"key":"196","attributes":{"id":196,"route_id":0.04160927535534653,"train_id":12}},{"key":"197","attributes":{"id":197,"route_id":3.377164905339728,"train_id":12}},{"key":"198","attributes":{"id":198,"route_id":1.6183646945246977,"train_id":12}},{"key":"199","attributes":{"id":199,"route_id":0.16670846076480506,"train_id":12}},{"key":"200","attributes":{"id":200,"route_id":1.1718947622731746,"train_id":12}},{"key":"201","attributes":{"id":201,"route_id":14.21362976751087,"train_id":12}},{"key":"202","attributes":{"id":202,"route_id":11.194722086210838,"train_id":12}},{"key":"203","attributes":{"id":203,"route_id":0.9558398122187617,"train_id":12}},{"key":"204","attributes":{"id":204,"route_id":9.004272606315999,"train_id":12}},{"key":"205","attributes":{"id":205,"route_id":7.443657454294965,"train_id":12}},{"key":"206","attributes":{"id":206,"route_id":6.544948581759923,"train_id":12}},{"key":"207","attributes":{"id":207,"route_id":8.08702695500964,"train_id":13}},{"key":"208","attributes":{"id":208,"route_id":2.8254437555973615,"train_id":13}},{"key":"209","attributes":{"id":209,"route_id":5.27249191658493,"train_id":13}},{"key":"210","attributes":{"id":210,"route_id":8.919270291621725,"train_id":13}},{"key":"211","attributes":{"id":211,"route_id":2.247004683652247,"train_id":13}},{"key":"212","attributes":{"id":212,"route_id":5.551658059520614,"train_id":13}},{"key":"213","attributes":{"id":213,"route_id":8.762289172751988,"train_id":13}},{"key":"214","attributes":{"id":214,"route_id":5.548578829589975,"train_id":13}},{"key":"215","attributes":{"id":215,"route_id":0.026069261912226027,"train_id":13}},{"key":"216","attributes":{"id":216,"route_id":6.627618932457652,"train_id":13}},{"key":"217","attributes":{"id":217,"route_id":0.3523503343534653,"train_id":13}},{"key":"218","attributes":{"id":218,"route_id":8.7988603125521,"train_id":13}},{"key":"219","attributes":{"id":219,"route_id":1.3024050851818274,"train_id":13}},{"key":"220","attributes":{"id":220,"route_id":9.635709452650513,"train_id":13}},{"key":"221","attributes":{"id":221,"route_id":3.5088507064347363,"train_id":13}},{"key":"222","attributes":{"id":222,"route_id":0.8516136683095705,"train_id":13}},{"key":"223","attributes":{"id":223,"route_id":6.788915068908697,"train_id":13}},{"key":"224","attributes":{"id":224,"route_id":11.421696966695286,"train_id":14}},{"key":"225","attributes":{"id":225,"route_id":5.4214093678531965,"train_id":14}},{"key":"226","attributes":{"id":226,"route_id":18.452917932477487,"train_id":14}},{"key":"227","attributes":{"id":227,"route_id":18.505884697085545,"train_id":14}},{"key":"228","attributes":{"id":228,"route_id":1.5178017135735684,"train_id":14}},{"key":"229","attributes":{"id":229,"route_id":9.665679484311637,"train_id":14}},{"key":"230","attributes":{"id":230,"route_id":14.079921038722738,"train_id":14}},{"key":"231","attributes":{"id":231,"route_id":13.514194156182628,"train_id":14}},{"key":"232","attributes":{"id":232,"route_id":10.734078348285443,"train_id":14}},{"key":"233","attributes":{"id":233,"route_id":12.962026846347479,"train_id":14}},{"key":"234","attributes":{"id":234,"route_id":12.443118620219964,"train_id":14}},{"key":"235","attributes":{"id":235,"route_id":9.174181879397791,"train_id":14}},{"key":"236","attributes":{"id":236,"route_id":2.328028381141834,"train_id":14}},{"key":"237","attributes":{"id":237,"route_id":16.226071373087073,"train_id":14}},{"key":"238","attributes":{"id":238,"route_id":12.887289136301607,"train_id":14}},{"key":"239","attributes":{"id":239,"route_id":8.381733605934494,"train_id":14}},{"key":"240","attributes":{"id":240,"route_id":14.343183646407926,"train_id":14}},{"key":"241","attributes":{"id":241,"route_id":6.972838704889466,"train_id":14}},{"key":"242","attributes":{"id":242,"route_id":5.301997103483542,"train_id":14}},{"key":"243","attributes":{"id":243,"route_id":4.733675574942913,"train_id":15}},{"key":"244","attributes":{"id":244,"route_id":5.628029424764045,"train_id":15}},{"key":"245","attributes":{"id":245,"route_id":5.2504159419897185,"train_id":15}},{"key":"246","attributes":{"id":246,"route_id":5.5699063553311765,"train_id":15}},{"key":"247","attributes":{"id":247,"route_id":3.122787241869509,"train_id":15}},{"key":"248","attributes":{"id":248,"route_id":6.006381600926459,"train_id":15}},{"key":"249","attributes":{"id":249,"route_id":1.9870867356209532,"train_id":15}},{"key":"250","attributes":{"id":250,"route_id":14.979196289608103,"train_id":15}},{"key":"251","attributes":{"id":251,"route_id":0.8589878368065296,"train_id":15}},{"key":"252","attributes":{"id":252,"route_id":6.2094329550645755,"train_id":15}},{"key":"253","attributes":{"id":253,"route_id":4.694894343463,"train_id":15}},{"key":"254","attributes":{"id":254,"route_id":13.775941413621027,"train_id":15}},{"key":"255","attributes":{"id":255,"route_id":11.570519494824996,"train_id":15}},{"key":"256","attributes":{"id":256,"route_id":13.774830886052863,"train_id":15}},{"key":"257","attributes":{"id":257,"route_id":9.902736298504788,"train_id":15}},{"key":"258","attributes":{"id":258,"route_id":8.935307541985813,"train_id":16}},{"key":"259","attributes":{"id":259,"route_id":7.633481113194419,"train_id":16}},{"key":"260","attributes":{"id":260,"route_id":3.060416900631593,"train_id":16}},{"key":"261","attributes":{"id":261,"route_id":2.5514613695054624,"train_id":16}},{"key":"262","attributes":{"id":262,"route_id":3.773484303407958,"train_id":16}},{"key":"263","attributes":{"id":263,"route_id":8.16000558912609,"train_id":16}},{"key":"264","attributes":{"id":264,"route_id":1.331391094360097,"train_id":16}},{"key":"265","attributes":{"id":265,"route_id":0.4025398600837726,"train_id":16}},{"key":"266","attributes":{"id":266,"route_id":3.820022316713799,"train_id":16}},{"key":"267","attributes":{"id":267,"route_id":2.0299304646570757,"train_id":16}},{"key":"268","attributes":{"id":268,"route_id":11.832029818210646,"train_id":16}},{"key":"269","attributes":{"id":269,"route_id":3.6142513264876497,"train_id":16}},{"key":"270","attributes":{"id":270,"route_id":7.794990138735775,"train_id":16}},{"key":"271","attributes":{"id":271,"route_id":0.33211422887890585,"train_id":16}},{"key":"272","attributes":{"id":272,"route_id":2.806160482210618,"train_id":16}},{"key":"273","attributes":{"id":273,"route_id":12.583680057493611,"train_id":17}},{"key":"274","attributes":{"id":274,"route_id":2.679008134019866,"train_id":17}},{"key":"275","attributes":{"id":275,"route_id":4.608842808430201,"train_id":17}},{"key":"276","attributes":{"id":276,"route_id":10.150063285843544,"train_id":17}},{"key":"277","attributes":{"id":277,"route_id":2.5434579582420547,"train_id":17}},{"key":"278","attributes":{"id":278,"route_id":4.414064528168142,"train_id":17}},{"key":"279","attributes":{"id":279,"route_id":14.609061955218705,"train_id":17}},{"key":"280","attributes":{"id":280,"route_id":6.810475184399475,"train_id":17}},{"key":"281","attributes":{"id":281,"route_id":4.722227216681566,"train_id":17}},{"key":"282","attributes":{"id":282,"route_id":13.544450575837594,"train_id":17}},{"key":"283","attributes":{"id":283,"route_id":9.250864086467082,"train_id":17}},{"key":"284","attributes":{"id":284,"route_id":3.770960978506701,"train_id":17}},{"key":"285","attributes":{"id":285,"route_id":12.023187991224246,"train_id":17}},{"key":"286","attributes":{"id":286,"route_id":3.8130404926770414,"train_id":17}},{"key":"287","attributes":{"id":287,"route_id":6.388283156481101,"train_id":17}},{"key":"288","attributes":{"id":288,"route_id":15.52529762026467,"train_id":18}},{"key":"289","attributes":{"id":289,"route_id":9.366024852199606,"train_id":18}},{"key":"290","attributes":{"id":290,"route_id":8.859671450905456,"train_id":18}},{"key":"291","attributes":{"id":291,"route_id":6.90278205452327,"train_id":18}},{"key":"292","attributes":{"id":292,"route_id":13.975430893176206,"train_id":18}},{"key":"293","attributes":{"id":293,"route_id":14.970909342350625,"train_id":18}},{"key":"294","attributes":{"id":294,"route_id":7.980482459963812,"train_id":18}},{"key":"295","attributes":{"id":295,"route_id":12.597750135005919,"train_id":18}},{"key":"296","attributes":{"id":296,"route_id":8.179337843300925,"train_id":18}},{"key":"297","attributes":{"id":297,"route_id":1.5062960113160848,"train_id":18}},{"key":"298","attributes":{"id":298,"route_id":10.750583358852746,"train_id":18}},{"key":"299","attributes":{"id":299,"route_id":14.92741445443886,"train_id":18}},{"key":"300","attributes":{"id":300,"route_id":14.183859271565998,"train_id":18}},{"key":"301","attributes":{"id":301,"route_id":3.8213263834942115,"train_id":18}},{"key":"302","attributes":{"id":302,"route_id":6.456091349695884,"train_id":18}},{"key":"303","attributes":{"id":303,"route_id":17.054364759329587,"train_id":18}},{"key":"304","attributes":{"id":304,"route_id":2.1513807689707884,"train_id":18}},{"key":"305","attributes":{"id":305,"route_id":4.069593077178318,"train_id":18}},{"key":"306","attributes":{"id":306,"route_id":5.432497650982246,"train_id":19}},{"key":"307","attributes":{"id":307,"route_id":11.52058569807739,"train_id":19}},{"key":"308","attributes":{"id":308,"route_id":5.478084035963434,"train_id":19}},{"key":"309","attributes":{"id":309,"route_id":1.6744460256480629,"train_id":19}},{"key":"310","attributes":{"id":310,"route_id":13.976201198591188,"train_id":19}},{"key":"311","attributes":{"id":311,"route_id":1.9466263833748911,"train_id":19}},{"key":"312","attributes":{"id":312,"route_id":10.636601288453686,"train_id":19}},{"key":"313","attributes":{"id":313,"route_id":2.0521213253890522,"train_id":19}},{"key":"314","attributes":{"id":314,"route_id":1.9957763334986822,"train_id":19}},{"key":"315","attributes":{"id":315,"route_id":1.1872371269052735,"train_id":19}},{"key":"316","attributes":{"id":316,"route_id":10.060860975909307,"train_id":19}},{"key":"317","attributes":{"id":317,"route_id":15.125902652865836,"train_id":19}},{"key":"318","attributes":{"id":318,"route_id":7.451565070174048,"train_id":19}},{"key":"319","attributes":{"id":319,"route_id":3.4931158039727457,"train_id":19}},{"key":"320","attributes":{"id":320,"route_id":1.0592542898600534,"train_id":19}},{"key":"321","attributes":{"id":321,"route_id":0.31086185505046515,"train_id":19}},{"key":"322","attributes":{"id":322,"route_id":15.613679202688818,"train_id":20}},{"key":"323","attributes":{"id":323,"route_id":0.2774899362094594,"train_id":20}},{"key":"324","attributes":{"id":324,"route_id":12.871410729830437,"train_id":20}},{"key":"325","attributes":{"id":325,"route_id":9.290478446651534,"train_id":20}},{"key":"326","attributes":{"id":326,"route_id":14.16673991079314,"train_id":20}},{"key":"327","attributes":{"id":327,"route_id":0.6705980055780891,"train_id":20}},{"key":"328","attributes":{"id":328,"route_id":7.128266529097196,"train_id":20}},{"key":"329","attributes":{"id":329,"route_id":11.053395810920403,"train_id":20}},{"key":"330","attributes":{"id":330,"route_id":5.915787908733005,"train_id":20}},{"key":"331","attributes":{"id":331,"route_id":7.170006966379642,"train_id":20}},{"key":"332","attributes":{"id":332,"route_id":12.645690726462117,"train_id":20}},{"key":"333","attributes":{"id":333,"route_id":9.335428578351742,"train_id":20}},{"key":"334","attributes":{"id":334,"route_id":11.52880459641187,"train_id":20}},{"key":"335","attributes":{"id":335,"route_id":7.969820638548018,"train_id":20}},{"key":"336","attributes":{"id":336,"route_id":0.33342124999888156,"train_id":20}},{"key":"337","attributes":{"id":337,"route_id":3.0963483702883927,"train_id":20}},{"key":"338","attributes":{"id":338,"route_id":8.792017471124074,"train_id":21}},{"key":"339","attributes":{"id":339,"route_id":10.26365354089815,"train_id":21}},{"key":"340","attributes":{"id":340,"route_id":7.922045128077318,"train_id":21}},{"key":"341","attributes":{"id":341,"route_id":8.162245699170493,"train_id":21}},{"key":"342","attributes":{"id":342,"route_id":11.89612229915969,"train_id":21}},{"key":"343","attributes":{"id":343,"route_id":3.0928023847205055,"train_id":21}},{"key":"344","attributes":{"id":344,"route_id":3.907854688574084,"train_id":21}},{"key":"345","attributes":{"id":345,"route_id":13.580577795491166,"train_id":21}},{"key":"346","attributes":{"id":346,"route_id":10.875306331513123,"train_id":21}},{"key":"347","attributes":{"id":347,"route_id":11.10283414226606,"train_id":21}},{"key":"348","attributes":{"id":348,"route_id":6.674118263191241,"train_id":21}},{"key":"349","attributes":{"id":349,"route_id":3.616125480126434,"train_id":21}},{"key":"350","attributes":{"id":350,"route_id":9.477183096576056,"train_id":21}},{"key":"351","attributes":{"id":351,"route_id":1.0190025909809142,"train_id":21}},{"key":"352","attributes":{"id":352,"route_id":5.678218269242418,"train_id":21}},{"key":"353","attributes":{"id":353,"route_id":6.024309343082112,"train_id":22}},{"key":"354","attributes":{"id":354,"route_id":6.356708405239646,"train_id":22}},{"key":"355","attributes":{"id":355,"route_id":0.12611846792195225,"train_id":22}},{"key":"356","attributes":{"id":356,"route_id":0.09123400705715401,"train_id":22}},{"key":"357","attributes":{"id":357,"route_id":5.245303417001578,"train_id":22}},{"key":"358","attributes":{"id":358,"route_id":5.696359377093431,"train_id":22}},{"key":"359","attributes":{"id":359,"route_id":0.7559268497801714,"train_id":22}},{"key":"360","attributes":{"id":360,"route_id":18.88410505085303,"train_id":22}},{"key":"361","attributes":{"id":361,"route_id":6.211337144853097,"train_id":22}},{"key":"362","attributes":{"id":362,"route_id":1.00780271286795,"train_id":22}},{"key":"363","attributes":{"id":363,"route_id":17.753432018200648,"train_id":22}},{"key":"364","attributes":{"id":364,"route_id":15.185375031153889,"train_id":22}},{"key":"365","attributes":{"id":365,"route_id":2.733083791234227,"train_id":22}},{"key":"366","attributes":{"id":366,"route_id":9.318239225795205,"train_id":22}},{"key":"367","attributes":{"id":367,"route_id":10.984936266261716,"train_id":22}},{"key":"368","attributes":{"id":368,"route_id":10.816314806984508,"train_id":22}},{"key":"369","attributes":{"id":369,"route_id":11.403154681396234,"train_id":22}},{"key":"370","attributes":{"id":370,"route_id":0.7561329794043532,"train_id":22}},{"key":"371","attributes":{"id":371,"route_id":8.44699177742628,"train_id":22}},{"key":"372","attributes":{"id":372,"route_id":14.57738813217852,"train_id":23}},{"key":"373","attributes":{"id":373,"route_id":14.288166508705757,"train_id":23}},{"key":"374","attributes":{"id":374,"route_id":2.6724074437087815,"train_id":23}},{"key":"375","attributes":{"id":375,"route_id":14.990438711095898,"train_id":23}},{"key":"376","attributes":{"id":376,"route_id":15.893526519225905,"train_id":23}},{"key":"377","attributes":{"id":377,"route_id":14.972965225650025,"train_id":23}},{"key":"378","attributes":{"id":378,"route_id":15.747209386382625,"train_id":23}},{"key":"379","attributes":{"id":379,"route_id":4.610600215407953,"train_id":23}},{"key":"380","attributes":{"id":380,"route_id":7.107072379654468,"train_id":23}},{"key":"381","attributes":{"id":381,"route_id":2.9343530424108835,"train_id":23}},{"key":"382","attributes":{"id":382,"route_id":9.710885555321003,"train_id":23}},{"key":"383","attributes":{"id":383,"route_id":6.785489747237406,"train_id":23}},{"key":"384","attributes":{"id":384,"route_id":11.639538392115735,"train_id":23}},{"key":"385","attributes":{"id":385,"route_id":10.215926094877968,"train_id":23}},{"key":"386","attributes":{"id":386,"route_id":9.370951746605655,"train_id":23}},{"key":"387","attributes":{"id":387,"route_id":2.3076211397741098,"train_id":23}},{"key":"388","attributes":{"id":388,"route_id":7.373556178355858,"train_id":24}},{"key":"389","attributes":{"id":389,"route_id":8.244303762325412,"train_id":24}},{"key":"390","attributes":{"id":390,"route_id":3.4017165802551452,"train_id":24}},{"key":"391","attributes":{"id":391,"route_id":12.694747620857749,"train_id":24}},{"key":"392","attributes":{"id":392,"route_id":12.243177646305087,"train_id":24}},{"key":"393","attributes":{"id":393,"route_id":9.587507257101812,"train_id":24}},{"key":"394","attributes":{"id":394,"route_id":13.566970076770588,"train_id":24}},{"key":"395","attributes":{"id":395,"route_id":14.479540050071533,"train_id":24}},{"key":"396","attributes":{"id":396,"route_id":5.663769433090967,"train_id":24}},{"key":"397","attributes":{"id":397,"route_id":12.74533743640868,"train_id":24}},{"key":"398","attributes":{"id":398,"route_id":14.163968474076784,"train_id":24}},{"key":"399","attributes":{"id":399,"route_id":9.32499953854765,"train_id":24}},{"key":"400","attributes":{"id":400,"route_id":13.241467881367747,"train_id":24}},{"key":"401","attributes":{"id":401,"route_id":11.186828167626071,"train_id":24}},{"key":"402","attributes":{"id":402,"route_id":14.942750260747651,"train_id":24}},{"key":"403","attributes":{"id":403,"route_id":17.08483064405174,"train_id":25}},{"key":"404","attributes":{"id":404,"route_id":5.182869683699082,"train_id":25}},{"key":"405","attributes":{"id":405,"route_id":15.434844138705595,"train_id":25}},{"key":"406","attributes":{"id":406,"route_id":5.937349997182086,"train_id":25}},{"key":"407","attributes":{"id":407,"route_id":9.124611810065197,"train_id":25}},{"key":"408","attributes":{"id":408,"route_id":5.841588399795507,"train_id":25}},{"key":"409","attributes":{"id":409,"route_id":6.425014416616682,"train_id":25}},{"key":"410","attributes":{"id":410,"route_id":6.66574035792889,"train_id":25}},{"key":"411","attributes":{"id":411,"route_id":18.866110315100713,"train_id":25}},{"key":"412","attributes":{"id":412,"route_id":8.721352770679722,"train_id":25}},{"key":"413","attributes":{"id":413,"route_id":8.410215570929738,"train_id":25}},{"key":"414","attributes":{"id":414,"route_id":10.580055268947081,"train_id":25}},{"key":"415","attributes":{"id":415,"route_id":0.09022985932102356,"train_id":25}},{"key":"416","attributes":{"id":416,"route_id":18.9630456363538,"train_id":25}},{"key":"417","attributes":{"id":417,"route_id":18.57374279121476,"train_id":25}},{"key":"418","attributes":{"id":418,"route_id":11.776406947957007,"train_id":25}},{"key":"419","attributes":{"id":419,"route_id":1.0350521564503954,"train_id":25}},{"key":"420","attributes":{"id":420,"route_id":3.5202575885407623,"train_id":25}},{"key":"421","attributes":{"id":421,"route_id":6.1632104433163635,"train_id":25}},{"key":"422","attributes":{"id":422,"route_id":14.495640384317014,"train_id":26}},{"key":"423","attributes":{"id":423,"route_id":8.733622801759498,"train_id":26}},{"key":"424","attributes":{"id":424,"route_id":9.124387845765154,"train_id":26}},{"key":"425","attributes":{"id":425,"route_id":12.528421027090367,"train_id":26}},{"key":"426","attributes":{"id":426,"route_id":7.571437614843588,"train_id":26}},{"key":"427","attributes":{"id":427,"route_id":0.14695704742693882,"train_id":26}},{"key":"428","attributes":{"id":428,"route_id":7.168385940096914,"train_id":26}},{"key":"429","attributes":{"id":429,"route_id":1.3987906582694554,"train_id":26}},{"key":"430","attributes":{"id":430,"route_id":13.263622930986571,"train_id":26}},{"key":"431","attributes":{"id":431,"route_id":8.74590643278992,"train_id":26}},{"key":"432","attributes":{"id":432,"route_id":5.966552627214659,"train_id":26}},{"key":"433","attributes":{"id":433,"route_id":13.420606406492432,"train_id":26}},{"key":"434","attributes":{"id":434,"route_id":10.175462682712322,"train_id":26}},{"key":"435","attributes":{"id":435,"route_id":1.8155503345401725,"train_id":26}},{"key":"436","attributes":{"id":436,"route_id":0.8662904632474655,"train_id":26}},{"key":"437","attributes":{"id":437,"route_id":1.4401155388619498,"train_id":27}},{"key":"438","attributes":{"id":438,"route_id":5.786485913089739,"train_id":27}},{"key":"439","attributes":{"id":439,"route_id":1.607993367301122,"train_id":27}},{"key":"440","attributes":{"id":440,"route_id":0.20061159744306756,"train_id":27}},{"key":"441","attributes":{"id":441,"route_id":16.365865558995516,"train_id":27}},{"key":"442","attributes":{"id":442,"route_id":10.682435356248163,"train_id":27}},{"key":"443","attributes":{"id":443,"route_id":11.045686960557948,"train_id":27}},{"key":"444","attributes":{"id":444,"route_id":15.364640473990178,"train_id":27}},{"key":"445","attributes":{"id":445,"route_id":10.719429242799,"train_id":27}},{"key":"446","attributes":{"id":446,"route_id":10.763115781657593,"train_id":27}},{"key":"447","attributes":{"id":447,"route_id":8.782203314712259,"train_id":27}},{"key":"448","attributes":{"id":448,"route_id":3.8930240757658385,"train_id":27}},{"key":"449","attributes":{"id":449,"route_id":7.1340712544922535,"train_id":27}},{"key":"450","attributes":{"id":450,"route_id":13.400856627164659,"train_id":27}},{"key":"451","attributes":{"id":451,"route_id":15.807233463667526,"train_id":27}},{"key":"452","attributes":{"id":452,"route_id":10.509126939751077,"train_id":27}},{"key":"453","attributes":{"id":453,"route_id":5.409704113903175,"train_id":27}},{"key":"454","attributes":{"id":454,"route_id":8.701145244654715,"train_id":28}},{"key":"455","attributes":{"id":455,"route_id":15.630156972239112,"train_id":28}},{"key":"456","attributes":{"id":456,"route_id":0.11387509828877773,"train_id":28}},{"key":"457","attributes":{"id":457,"route_id":5.34839897039389,"train_id":28}},{"key":"458","attributes":{"id":458,"route_id":4.113784357482115,"train_id":28}},{"key":"459","attributes":{"id":459,"route_id":8.48183596106496,"train_id":28}},{"key":"460","attributes":{"id":460,"route_id":11.098768204253165,"train_id":28}},{"key":"461","attributes":{"id":461,"route_id":1.24187984632447,"train_id":28}},{"key":"462","attributes":{"id":462,"route_id":0.21905184801430178,"train_id":28}},{"key":"463","attributes":{"id":463,"route_id":1.1341324069056626,"train_id":28}},{"key":"464","attributes":{"id":464,"route_id":1.0218360529756363,"train_id":28}},{"key":"465","attributes":{"id":465,"route_id":5.492016753453868,"train_id":28}},{"key":"466","attributes":{"id":466,"route_id":13.21449705072062,"train_id":28}},{"key":"467","attributes":{"id":467,"route_id":16.51875569597492,"train_id":28}},{"key":"468","attributes":{"id":468,"route_id":4.8701235570921115,"train_id":28}},{"key":"469","attributes":{"id":469,"route_id":6.288134259047695,"train_id":28}},{"key":"470","attributes":{"id":470,"route_id":11.786093616171602,"train_id":28}},{"key":"471","attributes":{"id":471,"route_id":10.672941851506833,"train_id":28}},{"key":"472","attributes":{"id":472,"route_id":10.457913533107273,"train_id":29}},{"key":"473","attributes":{"id":473,"route_id":12.35067428748222,"train_id":29}},{"key":"474","attributes":{"id":474,"route_id":5.262671846554702,"train_id":29}},{"key":"475","attributes":{"id":475,"route_id":2.920936428573387,"train_id":29}},{"key":"476","attributes":{"id":476,"route_id":16.17935872725045,"train_id":29}},{"key":"477","attributes":{"id":477,"route_id":11.16499954093749,"train_id":29}},{"key":"478","attributes":{"id":478,"route_id":1.6763084449173435,"train_id":29}},{"key":"479","attributes":{"id":479,"route_id":7.426071977042371,"train_id":29}},{"key":"480","attributes":{"id":480,"route_id":0.35012527470321464,"train_id":29}},{"key":"481","attributes":{"id":481,"route_id":9.446777247980686,"train_id":29}},{"key":"482","attributes":{"id":482,"route_id":9.446564716106398,"train_id":29}},{"key":"483","attributes":{"id":483,"route_id":4.718469824579656,"train_id":29}},{"key":"484","attributes":{"id":484,"route_id":12.10141395517911,"train_id":29}},{"key":"485","attributes":{"id":485,"route_id":5.173545701059214,"train_id":29}},{"key":"486","attributes":{"id":486,"route_id":14.82526045190787,"train_id":29}},{"key":"487","attributes":{"id":487,"route_id":3.35726805149348,"train_id":29}},{"key":"488","attributes":{"id":488,"route_id":0.5728489441387314,"train_id":29}},{"key":"489","attributes":{"id":489,"route_id":12.174995198741781,"train_id":30}},{"key":"490","attributes":{"id":490,"route_id":9.002955873213867,"train_id":30}},{"key":"491","attributes":{"id":491,"route_id":3.9663800591594307,"train_id":30}},{"key":"492","attributes":{"id":492,"route_id":3.9151873721031456,"train_id":30}},{"key":"493","attributes":{"id":493,"route_id":17.444722584255754,"train_id":30}},{"key":"494","attributes":{"id":494,"route_id":16.253843647964818,"train_id":30}},{"key":"495","attributes":{"id":495,"route_id":14.042737153163172,"train_id":30}},{"key":"496","attributes":{"id":496,"route_id":4.270501849817331,"train_id":30}},{"key":"497","attributes":{"id":497,"route_id":12.378826531907535,"train_id":30}},{"key":"498","attributes":{"id":498,"route_id":13.795047890990567,"train_id":30}},{"key":"499","attributes":{"id":499,"route_id":17.482519374680276,"train_id":30}},{"key":"500","attributes":{"id":500,"route_id":3.4879361292218345,"train_id":30}},{"key":"501","attributes":{"id":501,"route_id":0.6824628756738855,"train_id":30}},{"key":"502","attributes":{"id":502,"route_id":10.028064351735337,"train_id":30}},{"key":"503","attributes":{"id":503,"route_id":0.4675058256665223,"train_id":30}},{"key":"504","attributes":{"id":504,"route_id":12.4992511364606,"train_id":30}},{"key":"505","attributes":{"id":505,"route_id":8.576148334372462,"train_id":30}},{"key":"506","attributes":{"id":506,"route_id":9.285827559940756,"train_id":30}}],"edges":[{"source":"356","target":"376","attributes":{"source":356,"target":376,"type":"arrow","value":1}},{"source":"236","target":"473","attributes":{"source":236,"target":473,"type":"arrow","value":1}},{"source":"105","target":"408","attributes":{"source":105,"target":408,"type":"arrow","value":1}},{"source":"288","target":"366","attributes":{"source":288,"target":366,"type":"arrow","value":1}},{"source":"52","target":"365","attributes":{"source":52,"target":365,"type":"arrow","value":1}},{"source":"189","target":"212","attributes":{"source":189,"target":212,"type":"arrow","value":1}},{"source":"454","target":"310","attributes":{"source":454,"target":310,"type":"arrow","value":1}},{"source":"450","target":"104","attributes":{"source":450,"target":104,"type":"arrow","value":1}},{"source":"393","target":"501","attributes":{"source":393,"target":501,"type":"arrow","value":1}},{"source":"437","target":"257","attributes":{"source":437,"target":257,"type":"arrow","value":1}},{"source":"68","target":"260","attributes":{"source":68,"target":260,"type":"arrow","value":1}},{"source":"196","target":"249","attributes":{"source":196,"target":249,"type":"arrow","value":1}},{"source":"57","target":"14","attributes":{"source":57,"target":14,"type":"arrow","value":1}},{"source":"196","target":"33","attributes":{"source":196,"target":33,"type":"arrow","value":1}},{"source":"15","target":"99","attributes":{"source":15,"target":99,"type":"arrow","value":1}},{"source":"489","target":"58","attributes":{"source":489,"target":58,"type":"arrow","value":1}},{"source":"211","target":"203","attributes":{"source":211,"target":203,"type":"arrow","value":1}},{"source":"280","target":"115","attributes":{"source":280,"target":115,"type":"arrow","value":1}},{"source":"285","target":"79","attributes":{"source":285,"target":79,"type":"arrow","value":1}},{"source":"385","target":"271","attributes":{"source":385,"target":271,"type":"arrow","value":1}},{"source":"13","target":"413","attributes":{"source":13,"target":413,"type":"arrow","value":1}},{"source":"138","target":"114","attributes":{"source":138,"target":114,"type":"arrow","value":1}},{"source":"499","target":"315","attributes":{"source":499,"target":315,"type":"arrow","value":1}},{"source":"446","target":"321","attributes":{"source":446,"target":321,"type":"arrow","value":1}},{"source":"399","target":"321","attributes":{"source":399,"target":321,"type":"arrow","value":1}},{"source":"337","target":"200","attributes":{"source":337,"target":200,"type":"arrow","value":1}},{"source":"398","target":"459","attributes":{"source":398,"target":459,"type":"arrow","value":1}},{"source":"454","target":"166","attributes":{"source":454,"target":166,"type":"arrow","value":1}},{"source":"368","target":"344","attributes":{"source":368,"target":344,"type":"arrow","value":1}},{"source":"245","target":"500","attributes":{"source":245,"target":500,"type":"arrow","value":1}},{"source":"214","target":"45","attributes":{"source":214,"target":45,"type":"arrow","value":1}},{"source":"227","target":"11","attributes":{"source":227,"target":11,"type":"arrow","value":1}},{"source":"346","target":"213","attributes":{"source":346,"target":213,"type":"arrow","value":1}},{"source":"314","target":"5","attributes":{"source":314,"target":5,"type":"arrow","value":1}},{"source":"346","target":"320","attributes":{"source":346,"target":320,"type":"arrow","value":1}},{"source":"421","target":"244","attributes":{"source":421,"target":244,"type":"arrow","value":1}},{"source":"492","target":"415","attributes":{"source":492,"target":415,"type":"arrow","value":1}},{"source":"323","target":"462","attributes":{"source":323,"target":462,"type":"arrow","value":1}},{"source":"236","target":"40","attributes":{"source":236,"target":40,"type":"arrow","value":1}},{"source":"293","target":"168","attributes":{"source":293,"target":168,"type":"arrow","value":1}},{"source":"302","target":"350","attributes":{"source":302,"target":350,"type":"arrow","value":1}},{"source":"25","target":"418","attributes":{"source":25,"target":418,"type":"arrow","value":1}},{"source":"378","target":"342","attributes":{"source":378,"target":342,"type":"arrow","value":1}},{"source":"386","target":"103","attributes":{"source":386,"target":103,"type":"arrow","value":1}},{"source":"7","target":"122","attributes":{"source":7,"target":122,"type":"arrow","value":1}},{"source":"112","target":"133","attributes":{"source":112,"target":133,"type":"arrow","value":1}},{"source":"45","target":"51","attributes":{"source":45,"target":51,"type":"arrow","value":1}},{"source":"349","target":"71","attributes":{"source":349,"target":71,"type":"arrow","value":1}},{"source":"319","target":"15","attributes":{"source":319,"target":15,"type":"arrow","value":1}},{"source":"455","target":"82","attributes":{"source":455,"target":82,"type":"arrow","value":1}},{"source":"329","target":"443","attributes":{"source":329,"target":443,"type":"arrow","value":1}},{"source":"389","target":"324","attributes":{"source":389,"target":324,"type":"arrow","value":1}},{"source":"55","target":"19","attributes":{"source":55,"target":19,"type":"arrow","value":1}},{"source":"307","target":"290","attributes":{"source":307,"target":290,"type":"arrow","value":1}},{"source":"385","target":"256","attributes":{"source":385,"target":256,"type":"arrow","value":1}},{"source":"243","target":"52","attributes":{"source":243,"target":52,"type":"arrow","value":1}},{"source":"481","target":"224","attributes":{"source":481,"target":224,"type":"arrow","value":1}},{"source":"177","target":"157","attributes":{"source":177,"target":157,"type":"arrow","value":1}},{"source":"243","target":"143","attributes":{"source":243,"target":143,"type":"arrow","value":1}},{"source":"397","target":"420","attributes":{"source":397,"target":420,"type":"arrow","value":1}},{"source":"90","target":"200","attributes":{"source":90,"target":200,"type":"arrow","value":1}},{"source":"131","target":"473","attributes":{"source":131,"target":473,"type":"arrow","value":1}},{"source":"213","target":"123","attributes":{"source":213,"target":123,"type":"arrow","value":1}},{"source":"379","target":"325","attributes":{"source":379,"target":325,"type":"arrow","value":1}},{"source":"220","target":"235","attributes":{"source":220,"target":235,"type":"arrow","value":1}},{"source":"300","target":"503","attributes":{"source":300,"target":503,"type":"arrow","value":1}},{"source":"175","target":"242","attributes":{"source":175,"target":242,"type":"arrow","value":1}},{"source":"493","target":"255","attributes":{"source":493,"target":255,"type":"arrow","value":1}},{"source":"180","target":"472","attributes":{"source":180,"target":472,"type":"arrow","value":1}},{"source":"288","target":"65","attributes":{"source":288,"target":65,"type":"arrow","value":1}},{"source":"309","target":"2","attributes":{"source":309,"target":2,"type":"arrow","value":1}},{"source":"295","target":"417","attributes":{"source":295,"target":417,"type":"arrow","value":1}},{"source":"406","target":"1","attributes":{"source":406,"target":1,"type":"arrow","value":1}},{"source":"189","target":"138","attributes":{"source":189,"target":138,"type":"arrow","value":1}},{"source":"185","target":"125","attributes":{"source":185,"target":125,"type":"arrow","value":1}},{"source":"406","target":"10","attributes":{"source":406,"target":10,"type":"arrow","value":1}},{"source":"431","target":"470","attributes":{"source":431,"target":470,"type":"arrow","value":1}},{"source":"317","target":"232","attributes":{"source":317,"target":232,"type":"arrow","value":1}},{"source":"342","target":"108","attributes":{"source":342,"target":108,"type":"arrow","value":1}},{"source":"66","target":"141","attributes":{"source":66,"target":141,"type":"arrow","value":1}},{"source":"406","target":"126","attributes":{"source":406,"target":126,"type":"arrow","value":1}},{"source":"273","target":"206","attributes":{"source":273,"target":206,"type":"arrow","value":1}},{"source":"273","target":"487","attributes":{"source":273,"target":487,"type":"arrow","value":1}},{"source":"463","target":"26","attributes":{"source":463,"target":26,"type":"arrow","value":1}},{"source":"63","target":"15","attributes":{"source":63,"target":15,"type":"arrow","value":1}},{"source":"35","target":"11","attributes":{"source":35,"target":11,"type":"arrow","value":1}},{"source":"339","target":"335","attributes":{"source":339,"target":335,"type":"arrow","value":1}},{"source":"134","target":"173","attributes":{"source":134,"target":173,"type":"arrow","value":1}},{"source":"296","target":"434","attributes":{"source":296,"target":434,"type":"arrow","value":1}},{"source":"52","target":"424","attributes":{"source":52,"target":424,"type":"arrow","value":1}},{"source":"336","target":"454","attributes":{"source":336,"target":454,"type":"arrow","value":1}},{"source":"6","target":"48","attributes":{"source":6,"target":48,"type":"arrow","value":1}},{"source":"261","target":"225","attributes":{"source":261,"target":225,"type":"arrow","value":1}},{"source":"475","target":"484","attributes":{"source":475,"target":484,"type":"arrow","value":1}},{"source":"347","target":"206","attributes":{"source":347,"target":206,"type":"arrow","value":1}},{"source":"129","target":"220","attributes":{"source":129,"target":220,"type":"arrow","value":1}},{"source":"409","target":"315","attributes":{"source":409,"target":315,"type":"arrow","value":1}},{"source":"335","target":"75","attributes":{"source":335,"target":75,"type":"arrow","value":1}},{"source":"332","target":"241","attributes":{"source":332,"target":241,"type":"arrow","value":1}},{"source":"324","target":"312","attributes":{"source":324,"target":312,"type":"arrow","value":1}},{"source":"39","target":"190","attributes":{"source":39,"target":190,"type":"arrow","value":1}},{"source":"161","target":"450","attributes":{"source":161,"target":450,"type":"arrow","value":1}},{"source":"423","target":"307","attributes":{"source":423,"target":307,"type":"arrow","value":1}},{"source":"372","target":"14","attributes":{"source":372,"target":14,"type":"arrow","value":1}},{"source":"171","target":"98","attributes":{"source":171,"target":98,"type":"arrow","value":1}},{"source":"258","target":"18","attributes":{"source":258,"target":18,"type":"arrow","value":1}},{"source":"161","target":"319","attributes":{"source":161,"target":319,"type":"arrow","value":1}},{"source":"139","target":"498","attributes":{"source":139,"target":498,"type":"arrow","value":1}},{"source":"417","target":"445","attributes":{"source":417,"target":445,"type":"arrow","value":1}},{"source":"55","target":"146","attributes":{"source":55,"target":146,"type":"arrow","value":1}},{"source":"494","target":"385","attributes":{"source":494,"target":385,"type":"arrow","value":1}},{"source":"231","target":"54","attributes":{"source":231,"target":54,"type":"arrow","value":1}},{"source":"395","target":"217","attributes":{"source":395,"target":217,"type":"arrow","value":1}},{"source":"247","target":"57","attributes":{"source":247,"target":57,"type":"arrow","value":1}},{"source":"103","target":"367","attributes":{"source":103,"target":367,"type":"arrow","value":1}},{"source":"248","target":"71","attributes":{"source":248,"target":71,"type":"arrow","value":1}},{"source":"250","target":"219","attributes":{"source":250,"target":219,"type":"arrow","value":1}},{"source":"225","target":"49","attributes":{"source":225,"target":49,"type":"arrow","value":1}},{"source":"64","target":"498","attributes":{"source":64,"target":498,"type":"arrow","value":1}},{"source":"427","target":"438","attributes":{"source":427,"target":438,"type":"arrow","value":1}},{"source":"429","target":"213","attributes":{"source":429,"target":213,"type":"arrow","value":1}},{"source":"220","target":"54","attributes":{"source":220,"target":54,"type":"arrow","value":1}},{"source":"446","target":"73","attributes":{"source":446,"target":73,"type":"arrow","value":1}},{"source":"213","target":"275","attributes":{"source":213,"target":275,"type":"arrow","value":1}},{"source":"187","target":"260","attributes":{"source":187,"target":260,"type":"arrow","value":1}},{"source":"500","target":"60","attributes":{"source":500,"target":60,"type":"arrow","value":1}},{"source":"422","target":"493","attributes":{"source":422,"target":493,"type":"arrow","value":1}},{"source":"321","target":"77","attributes":{"source":321,"target":77,"type":"arrow","value":1}},{"source":"488","target":"163","attributes":{"source":488,"target":163,"type":"arrow","value":1}},{"source":"268","target":"136","attributes":{"source":268,"target":136,"type":"arrow","value":1}},{"source":"428","target":"209","attributes":{"source":428,"target":209,"type":"arrow","value":1}},{"source":"336","target":"130","attributes":{"source":336,"target":130,"type":"arrow","value":1}},{"source":"484","target":"328","attributes":{"source":484,"target":328,"type":"arrow","value":1}},{"source":"23","target":"461","attributes":{"source":23,"target":461,"type":"arrow","value":1}},{"source":"66","target":"210","attributes":{"source":66,"target":210,"type":"arrow","value":1}},{"source":"501","target":"141","attributes":{"source":501,"target":141,"type":"arrow","value":1}},{"source":"463","target":"498","attributes":{"source":463,"target":498,"type":"arrow","value":1}},{"source":"110","target":"33","attributes":{"source":110,"target":33,"type":"arrow","value":1}},{"source":"43","target":"101","attributes":{"source":43,"target":101,"type":"arrow","value":1}},{"source":"436","target":"92","attributes":{"source":436,"target":92,"type":"arrow","value":1}},{"source":"306","target":"490","attributes":{"source":306,"target":490,"type":"arrow","value":1}},{"source":"494","target":"224","attributes":{"source":494,"target":224,"type":"arrow","value":1}},{"source":"176","target":"157","attributes":{"source":176,"target":157,"type":"arrow","value":1}},{"source":"23","target":"181","attributes":{"source":23,"target":181,"type":"arrow","value":1}},{"source":"84","target":"405","attributes":{"source":84,"target":405,"type":"arrow","value":1}},{"source":"55","target":"371","attributes":{"source":55,"target":371,"type":"arrow","value":1}},{"source":"330","target":"464","attributes":{"source":330,"target":464,"type":"arrow","value":1}},{"source":"420","target":"264","attributes":{"source":420,"target":264,"type":"arrow","value":1}},{"source":"231","target":"216","attributes":{"source":231,"target":216,"type":"arrow","value":1}},{"source":"219","target":"108","attributes":{"source":219,"target":108,"type":"arrow","value":1}},{"source":"299","target":"208","attributes":{"source":299,"target":208,"type":"arrow","value":1}},{"source":"427","target":"130","attributes":{"source":427,"target":130,"type":"arrow","value":1}},{"source":"157","target":"120","attributes":{"source":157,"target":120,"type":"arrow","value":1}},{"source":"25","target":"478","attributes":{"source":25,"target":478,"type":"arrow","value":1}},{"source":"417","target":"270","attributes":{"source":417,"target":270,"type":"arrow","value":1}},{"source":"255","target":"92","attributes":{"source":255,"target":92,"type":"arrow","value":1}},{"source":"338","target":"357","attributes":{"source":338,"target":357,"type":"arrow","value":1}},{"source":"362","target":"459","attributes":{"source":362,"target":459,"type":"arrow","value":1}},{"source":"461","target":"473","attributes":{"source":461,"target":473,"type":"arrow","value":1}},{"source":"184","target":"310","attributes":{"source":184,"target":310,"type":"arrow","value":1}},{"source":"229","target":"495","attributes":{"source":229,"target":495,"type":"arrow","value":1}},{"source":"307","target":"380","attributes":{"source":307,"target":380,"type":"arrow","value":1}},{"source":"117","target":"359","attributes":{"source":117,"target":359,"type":"arrow","value":1}},{"source":"212","target":"182","attributes":{"source":212,"target":182,"type":"arrow","value":1}},{"source":"3","target":"373","attributes":{"source":3,"target":373,"type":"arrow","value":1}},{"source":"346","target":"375","attributes":{"source":346,"target":375,"type":"arrow","value":1}},{"source":"156","target":"97","attributes":{"source":156,"target":97,"type":"arrow","value":1}},{"source":"173","target":"130","attributes":{"source":173,"target":130,"type":"arrow","value":1}},{"source":"58","target":"152","attributes":{"source":58,"target":152,"type":"arrow","value":1}},{"source":"332","target":"449","attributes":{"source":332,"target":449,"type":"arrow","value":1}},{"source":"164","target":"318","attributes":{"source":164,"target":318,"type":"arrow","value":1}},{"source":"62","target":"310","attributes":{"source":62,"target":310,"type":"arrow","value":1}},{"source":"132","target":"218","attributes":{"source":132,"target":218,"type":"arrow","value":1}},{"source":"193","target":"155","attributes":{"source":193,"target":155,"type":"arrow","value":1}},{"source":"268","target":"5","attributes":{"source":268,"target":5,"type":"arrow","value":1}},{"source":"62","target":"438","attributes":{"source":62,"target":438,"type":"arrow","value":1}},{"source":"367","target":"377","attributes":{"source":367,"target":377,"type":"arrow","value":1}},{"source":"71","target":"270","attributes":{"source":71,"target":270,"type":"arrow","value":1}},{"source":"450","target":"47","attributes":{"source":450,"target":47,"type":"arrow","value":1}},{"source":"46","target":"235","attributes":{"source":46,"target":235,"type":"arrow","value":1}},{"source":"161","target":"464","attributes":{"source":161,"target":464,"type":"arrow","value":1}},{"source":"343","target":"467","attributes":{"source":343,"target":467,"type":"arrow","value":1}},{"source":"377","target":"105","attributes":{"source":377,"target":105,"type":"arrow","value":1}},{"source":"186","target":"40","attributes":{"source":186,"target":40,"type":"arrow","value":1}},{"source":"169","target":"83","attributes":{"source":169,"target":83,"type":"arrow","value":1}},{"source":"211","target":"485","attributes":{"source":211,"target":485,"type":"arrow","value":1}},{"source":"417","target":"90","attributes":{"source":417,"target":90,"type":"arrow","value":1}},{"source":"212","target":"302","attributes":{"source":212,"target":302,"type":"arrow","value":1}},{"source":"236","target":"297","attributes":{"source":236,"target":297,"type":"arrow","value":1}},{"source":"358","target":"126","attributes":{"source":358,"target":126,"type":"arrow","value":1}},{"source":"445","target":"361","attributes":{"source":445,"target":361,"type":"arrow","value":1}},{"source":"488","target":"319","attributes":{"source":488,"target":319,"type":"arrow","value":1}},{"source":"140","target":"494","attributes":{"source":140,"target":494,"type":"arrow","value":1}},{"source":"273","target":"51","attributes":{"source":273,"target":51,"type":"arrow","value":1}},{"source":"99","target":"311","attributes":{"source":99,"target":311,"type":"arrow","value":1}},{"source":"311","target":"126","attributes":{"source":311,"target":126,"type":"arrow","value":1}},{"source":"491","target":"355","attributes":{"source":491,"target":355,"type":"arrow","value":1}},{"source":"366","target":"494","attributes":{"source":366,"target":494,"type":"arrow","value":1}},{"source":"332","target":"33","attributes":{"source":332,"target":33,"type":"arrow","value":1}},{"source":"241","target":"19","attributes":{"source":241,"target":19,"type":"arrow","value":1}},{"source":"456","target":"254","attributes":{"source":456,"target":254,"type":"arrow","value":1}},{"source":"262","target":"392","attributes":{"source":262,"target":392,"type":"arrow","value":1}},{"source":"422","target":"318","attributes":{"source":422,"target":318,"type":"arrow","value":1}},{"source":"168","target":"196","attributes":{"source":168,"target":196,"type":"arrow","value":1}},{"source":"242","target":"433","attributes":{"source":242,"target":433,"type":"arrow","value":1}},{"source":"4","target":"455","attributes":{"source":4,"target":455,"type":"arrow","value":1}},{"source":"231","target":"506","attributes":{"source":231,"target":506,"type":"arrow","value":1}},{"source":"255","target":"430","attributes":{"source":255,"target":430,"type":"arrow","value":1}},{"source":"34","target":"322","attributes":{"source":34,"target":322,"type":"arrow","value":1}},{"source":"259","target":"465","attributes":{"source":259,"target":465,"type":"arrow","value":1}},{"source":"111","target":"378","attributes":{"source":111,"target":378,"type":"arrow","value":1}},{"source":"302","target":"31","attributes":{"source":302,"target":31,"type":"arrow","value":1}},{"source":"20","target":"391","attributes":{"source":20,"target":391,"type":"arrow","value":1}},{"source":"388","target":"227","attributes":{"source":388,"target":227,"type":"arrow","value":1}},{"source":"13","target":"319","attributes":{"source":13,"target":319,"type":"arrow","value":1}},{"source":"171","target":"50","attributes":{"source":171,"target":50,"type":"arrow","value":1}},{"source":"35","target":"199","attributes":{"source":35,"target":199,"type":"arrow","value":1}},{"source":"396","target":"40","attributes":{"source":396,"target":40,"type":"arrow","value":1}},{"source":"304","target":"173","attributes":{"source":304,"target":173,"type":"arrow","value":1}},{"source":"190","target":"319","attributes":{"source":190,"target":319,"type":"arrow","value":1}},{"source":"428","target":"499","attributes":{"source":428,"target":499,"type":"arrow","value":1}},{"source":"375","target":"18","attributes":{"source":375,"target":18,"type":"arrow","value":1}},{"source":"487","target":"444","attributes":{"source":487,"target":444,"type":"arrow","value":1}},{"source":"420","target":"484","attributes":{"source":420,"target":484,"type":"arrow","value":1}},{"source":"54","target":"276","attributes":{"source":54,"target":276,"type":"arrow","value":1}},{"source":"414","target":"465","attributes":{"source":414,"target":465,"type":"arrow","value":1}},{"source":"175","target":"237","attributes":{"source":175,"target":237,"type":"arrow","value":1}},{"source":"332","target":"300","attributes":{"source":332,"target":300,"type":"arrow","value":1}},{"source":"407","target":"484","attributes":{"source":407,"target":484,"type":"arrow","value":1}},{"source":"328","target":"20","attributes":{"source":328,"target":20,"type":"arrow","value":1}},{"source":"201","target":"236","attributes":{"source":201,"target":236,"type":"arrow","value":1}},{"source":"377","target":"43","attributes":{"source":377,"target":43,"type":"arrow","value":1}},{"source":"38","target":"438","attributes":{"source":38,"target":438,"type":"arrow","value":1}},{"source":"134","target":"83","attributes":{"source":134,"target":83,"type":"arrow","value":1}},{"source":"111","target":"175","attributes":{"source":111,"target":175,"type":"arrow","value":1}},{"source":"403","target":"469","attributes":{"source":403,"target":469,"type":"arrow","value":1}},{"source":"111","target":"15","attributes":{"source":111,"target":15,"type":"arrow","value":1}},{"source":"405","target":"141","attributes":{"source":405,"target":141,"type":"arrow","value":1}},{"source":"92","target":"15","attributes":{"source":92,"target":15,"type":"arrow","value":1}},{"source":"438","target":"47","attributes":{"source":438,"target":47,"type":"arrow","value":1}},{"source":"12","target":"203","attributes":{"source":12,"target":203,"type":"arrow","value":1}},{"source":"120","target":"286","attributes":{"source":120,"target":286,"type":"arrow","value":1}},{"source":"241","target":"21","attributes":{"source":241,"target":21,"type":"arrow","value":1}},{"source":"54","target":"95","attributes":{"source":54,"target":95,"type":"arrow","value":1}},{"source":"155","target":"168","attributes":{"source":155,"target":168,"type":"arrow","value":1}},{"source":"472","target":"333","attributes":{"source":472,"target":333,"type":"arrow","value":1}},{"source":"333","target":"246","attributes":{"source":333,"target":246,"type":"arrow","value":1}},{"source":"455","target":"346","attributes":{"source":455,"target":346,"type":"arrow","value":1}},{"source":"85","target":"470","attributes":{"source":85,"target":470,"type":"arrow","value":1}},{"source":"141","target":"325","attributes":{"source":141,"target":325,"type":"arrow","value":1}},{"source":"104","target":"383","attributes":{"source":104,"target":383,"type":"arrow","value":1}},{"source":"425","target":"141","attributes":{"source":425,"target":141,"type":"arrow","value":1}},{"source":"95","target":"379","attributes":{"source":95,"target":379,"type":"arrow","value":1}},{"source":"184","target":"137","attributes":{"source":184,"target":137,"type":"arrow","value":1}},{"source":"183","target":"115","attributes":{"source":183,"target":115,"type":"arrow","value":1}},{"source":"324","target":"144","attributes":{"source":324,"target":144,"type":"arrow","value":1}},{"source":"186","target":"292","attributes":{"source":186,"target":292,"type":"arrow","value":1}},{"source":"41","target":"394","attributes":{"source":41,"target":394,"type":"arrow","value":1}},{"source":"374","target":"162","attributes":{"source":374,"target":162,"type":"arrow","value":1}},{"source":"447","target":"467","attributes":{"source":447,"target":467,"type":"arrow","value":1}},{"source":"216","target":"2","attributes":{"source":216,"target":2,"type":"arrow","value":1}},{"source":"437","target":"451","attributes":{"source":437,"target":451,"type":"arrow","value":1}},{"source":"372","target":"400","attributes":{"source":372,"target":400,"type":"arrow","value":1}},{"source":"294","target":"92","attributes":{"source":294,"target":92,"type":"arrow","value":1}},{"source":"142","target":"275","attributes":{"source":142,"target":275,"type":"arrow","value":1}},{"source":"485","target":"51","attributes":{"source":485,"target":51,"type":"arrow","value":1}},{"source":"371","target":"289","attributes":{"source":371,"target":289,"type":"arrow","value":1}},{"source":"441","target":"364","attributes":{"source":441,"target":364,"type":"arrow","value":1}},{"source":"360","target":"413","attributes":{"source":360,"target":413,"type":"arrow","value":1}},{"source":"150","target":"349","attributes":{"source":150,"target":349,"type":"arrow","value":1}},{"source":"402","target":"253","attributes":{"source":402,"target":253,"type":"arrow","value":1}},{"source":"3","target":"211","attributes":{"source":3,"target":211,"type":"arrow","value":1}},{"source":"274","target":"5","attributes":{"source":274,"target":5,"type":"arrow","value":1}},{"source":"222","target":"496","attributes":{"source":222,"target":496,"type":"arrow","value":1}},{"source":"183","target":"214","attributes":{"source":183,"target":214,"type":"arrow","value":1}},{"source":"339","target":"300","attributes":{"source":339,"target":300,"type":"arrow","value":1}},{"source":"109","target":"439","attributes":{"source":109,"target":439,"type":"arrow","value":1}},{"source":"27","target":"426","attributes":{"source":27,"target":426,"type":"arrow","value":1}},{"source":"233","target":"201","attributes":{"source":233,"target":201,"type":"arrow","value":1}},{"source":"187","target":"349","attributes":{"source":187,"target":349,"type":"arrow","value":1}},{"source":"62","target":"183","attributes":{"source":62,"target":183,"type":"arrow","value":1}},{"source":"90","target":"364","attributes":{"source":90,"target":364,"type":"arrow","value":1}},{"source":"375","target":"30","attributes":{"source":375,"target":30,"type":"arrow","value":1}},{"source":"30","target":"330","attributes":{"source":30,"target":330,"type":"arrow","value":1}},{"source":"491","target":"459","attributes":{"source":491,"target":459,"type":"arrow","value":1}},{"source":"485","target":"22","attributes":{"source":485,"target":22,"type":"arrow","value":1}},{"source":"349","target":"236","attributes":{"source":349,"target":236,"type":"arrow","value":1}},{"source":"446","target":"36","attributes":{"source":446,"target":36,"type":"arrow","value":1}},{"source":"374","target":"482","attributes":{"source":374,"target":482,"type":"arrow","value":1}},{"source":"456","target":"114","attributes":{"source":456,"target":114,"type":"arrow","value":1}},{"source":"158","target":"363","attributes":{"source":158,"target":363,"type":"arrow","value":1}},{"source":"194","target":"82","attributes":{"source":194,"target":82,"type":"arrow","value":1}},{"source":"178","target":"345","attributes":{"source":178,"target":345,"type":"arrow","value":1}},{"source":"174","target":"267","attributes":{"source":174,"target":267,"type":"arrow","value":1}},{"source":"101","target":"250","attributes":{"source":101,"target":250,"type":"arrow","value":1}},{"source":"400","target":"204","attributes":{"source":400,"target":204,"type":"arrow","value":1}},{"source":"448","target":"221","attributes":{"source":448,"target":221,"type":"arrow","value":1}},{"source":"140","target":"172","attributes":{"source":140,"target":172,"type":"arrow","value":1}},{"source":"17","target":"357","attributes":{"source":17,"target":357,"type":"arrow","value":1}},{"source":"65","target":"285","attributes":{"source":65,"target":285,"type":"arrow","value":1}},{"source":"25","target":"301","attributes":{"source":25,"target":301,"type":"arrow","value":1}},{"source":"125","target":"371","attributes":{"source":125,"target":371,"type":"arrow","value":1}},{"source":"357","target":"238","attributes":{"source":357,"target":238,"type":"arrow","value":1}},{"source":"224","target":"501","attributes":{"source":224,"target":501,"type":"arrow","value":1}},{"source":"76","target":"329","attributes":{"source":76,"target":329,"type":"arrow","value":1}},{"source":"294","target":"357","attributes":{"source":294,"target":357,"type":"arrow","value":1}},{"source":"160","target":"86","attributes":{"source":160,"target":86,"type":"arrow","value":1}},{"source":"313","target":"90","attributes":{"source":313,"target":90,"type":"arrow","value":1}},{"source":"196","target":"250","attributes":{"source":196,"target":250,"type":"arrow","value":1}},{"source":"72","target":"71","attributes":{"source":72,"target":71,"type":"arrow","value":1}},{"source":"169","target":"415","attributes":{"source":169,"target":415,"type":"arrow","value":1}},{"source":"87","target":"164","attributes":{"source":87,"target":164,"type":"arrow","value":1}},{"source":"317","target":"118","attributes":{"source":317,"target":118,"type":"arrow","value":1}},{"source":"147","target":"438","attributes":{"source":147,"target":438,"type":"arrow","value":1}},{"source":"268","target":"395","attributes":{"source":268,"target":395,"type":"arrow","value":1}},{"source":"172","target":"286","attributes":{"source":172,"target":286,"type":"arrow","value":1}},{"source":"327","target":"281","attributes":{"source":327,"target":281,"type":"arrow","value":1}},{"source":"456","target":"21","attributes":{"source":456,"target":21,"type":"arrow","value":1}},{"source":"132","target":"491","attributes":{"source":132,"target":491,"type":"arrow","value":1}},{"source":"418","target":"143","attributes":{"source":418,"target":143,"type":"arrow","value":1}},{"source":"60","target":"445","attributes":{"source":60,"target":445,"type":"arrow","value":1}},{"source":"77","target":"20","attributes":{"source":77,"target":20,"type":"arrow","value":1}},{"source":"316","target":"79","attributes":{"source":316,"target":79,"type":"arrow","value":1}},{"source":"498","target":"342","attributes":{"source":498,"target":342,"type":"arrow","value":1}},{"source":"55","target":"367","attributes":{"source":55,"target":367,"type":"arrow","value":1}},{"source":"429","target":"358","attributes":{"source":429,"target":358,"type":"arrow","value":1}},{"source":"398","target":"443","attributes":{"source":398,"target":443,"type":"arrow","value":1}},{"source":"241","target":"328","attributes":{"source":241,"target":328,"type":"arrow","value":1}},{"source":"439","target":"69","attributes":{"source":439,"target":69,"type":"arrow","value":1}},{"source":"450","target":"93","attributes":{"source":450,"target":93,"type":"arrow","value":1}},{"source":"328","target":"283","attributes":{"source":328,"target":283,"type":"arrow","value":1}},{"source":"84","target":"381","attributes":{"source":84,"target":381,"type":"arrow","value":1}},{"source":"95","target":"474","attributes":{"source":95,"target":474,"type":"arrow","value":1}},{"source":"337","target":"89","attributes":{"source":337,"target":89,"type":"arrow","value":1}},{"source":"264","target":"59","attributes":{"source":264,"target":59,"type":"arrow","value":1}},{"source":"164","target":"320","attributes":{"source":164,"target":320,"type":"arrow","value":1}},{"source":"94","target":"197","attributes":{"source":94,"target":197,"type":"arrow","value":1}},{"source":"29","target":"448","attributes":{"source":29,"target":448,"type":"arrow","value":1}},{"source":"49","target":"257","attributes":{"source":49,"target":257,"type":"arrow","value":1}},{"source":"198","target":"92","attributes":{"source":198,"target":92,"type":"arrow","value":1}},{"source":"115","target":"6","attributes":{"source":115,"target":6,"type":"arrow","value":1}},{"source":"159","target":"352","attributes":{"source":159,"target":352,"type":"arrow","value":1}},{"source":"223","target":"481","attributes":{"source":223,"target":481,"type":"arrow","value":1}},{"source":"78","target":"43","attributes":{"source":78,"target":43,"type":"arrow","value":1}},{"source":"300","target":"269","attributes":{"source":300,"target":269,"type":"arrow","value":1}},{"source":"43","target":"385","attributes":{"source":43,"target":385,"type":"arrow","value":1}},{"source":"6","target":"329","attributes":{"source":6,"target":329,"type":"arrow","value":1}},{"source":"91","target":"72","attributes":{"source":91,"target":72,"type":"arrow","value":1}},{"source":"375","target":"106","attributes":{"source":375,"target":106,"type":"arrow","value":1}},{"source":"4","target":"7","attributes":{"source":4,"target":7,"type":"arrow","value":1}},{"source":"383","target":"355","attributes":{"source":383,"target":355,"type":"arrow","value":1}},{"source":"457","target":"10","attributes":{"source":457,"target":10,"type":"arrow","value":1}},{"source":"214","target":"435","attributes":{"source":214,"target":435,"type":"arrow","value":1}},{"source":"289","target":"268","attributes":{"source":289,"target":268,"type":"arrow","value":1}},{"source":"68","target":"215","attributes":{"source":68,"target":215,"type":"arrow","value":1}},{"source":"461","target":"489","attributes":{"source":461,"target":489,"type":"arrow","value":1}},{"source":"155","target":"406","attributes":{"source":155,"target":406,"type":"arrow","value":1}},{"source":"190","target":"360","attributes":{"source":190,"target":360,"type":"arrow","value":1}},{"source":"125","target":"197","attributes":{"source":125,"target":197,"type":"arrow","value":1}},{"source":"379","target":"289","attributes":{"source":379,"target":289,"type":"arrow","value":1}},{"source":"309","target":"187","attributes":{"source":309,"target":187,"type":"arrow","value":1}},{"source":"103","target":"29","attributes":{"source":103,"target":29,"type":"arrow","value":1}},{"source":"488","target":"127","attributes":{"source":488,"target":127,"type":"arrow","value":1}},{"source":"26","target":"129","attributes":{"source":26,"target":129,"type":"arrow","value":1}},{"source":"291","target":"485","attributes":{"source":291,"target":485,"type":"arrow","value":1}},{"source":"428","target":"503","attributes":{"source":428,"target":503,"type":"arrow","value":1}},{"source":"120","target":"20","attributes":{"source":120,"target":20,"type":"arrow","value":1}},{"source":"101","target":"286","attributes":{"source":101,"target":286,"type":"arrow","value":1}},{"source":"238","target":"311","attributes":{"source":238,"target":311,"type":"arrow","value":1}},{"source":"30","target":"351","attributes":{"source":30,"target":351,"type":"arrow","value":1}},{"source":"498","target":"5","attributes":{"source":498,"target":5,"type":"arrow","value":1}},{"source":"197","target":"107","attributes":{"source":197,"target":107,"type":"arrow","value":1}},{"source":"175","target":"136","attributes":{"source":175,"target":136,"type":"arrow","value":1}},{"source":"479","target":"222","attributes":{"source":479,"target":222,"type":"arrow","value":1}},{"source":"378","target":"261","attributes":{"source":378,"target":261,"type":"arrow","value":1}},{"source":"499","target":"342","attributes":{"source":499,"target":342,"type":"arrow","value":1}},{"source":"255","target":"86","attributes":{"source":255,"target":86,"type":"arrow","value":1}},{"source":"22","target":"237","attributes":{"source":22,"target":237,"type":"arrow","value":1}},{"source":"346","target":"387","attributes":{"source":346,"target":387,"type":"arrow","value":1}},{"source":"352","target":"398","attributes":{"source":352,"target":398,"type":"arrow","value":1}},{"source":"409","target":"481","attributes":{"source":409,"target":481,"type":"arrow","value":1}},{"source":"174","target":"264","attributes":{"source":174,"target":264,"type":"arrow","value":1}},{"source":"194","target":"119","attributes":{"source":194,"target":119,"type":"arrow","value":1}},{"source":"131","target":"87","attributes":{"source":131,"target":87,"type":"arrow","value":1}},{"source":"310","target":"146","attributes":{"source":310,"target":146,"type":"arrow","value":1}},{"source":"3","target":"216","attributes":{"source":3,"target":216,"type":"arrow","value":1}},{"source":"94","target":"153","attributes":{"source":94,"target":153,"type":"arrow","value":1}},{"source":"19","target":"308","attributes":{"source":19,"target":308,"type":"arrow","value":1}},{"source":"448","target":"352","attributes":{"source":448,"target":352,"type":"arrow","value":1}},{"source":"437","target":"461","attributes":{"source":437,"target":461,"type":"arrow","value":1}},{"source":"65","target":"115","attributes":{"source":65,"target":115,"type":"arrow","value":1}},{"source":"108","target":"163","attributes":{"source":108,"target":163,"type":"arrow","value":1}},{"source":"100","target":"1","attributes":{"source":100,"target":1,"type":"arrow","value":1}},{"source":"362","target":"278","attributes":{"source":362,"target":278,"type":"arrow","value":1}},{"source":"63","target":"453","attributes":{"source":63,"target":453,"type":"arrow","value":1}},{"source":"64","target":"233","attributes":{"source":64,"target":233,"type":"arrow","value":1}},{"source":"65","target":"417","attributes":{"source":65,"target":417,"type":"arrow","value":1}},{"source":"94","target":"479","attributes":{"source":94,"target":479,"type":"arrow","value":1}},{"source":"48","target":"143","attributes":{"source":48,"target":143,"type":"arrow","value":1}},{"source":"357","target":"31","attributes":{"source":357,"target":31,"type":"arrow","value":1}},{"source":"208","target":"238","attributes":{"source":208,"target":238,"type":"arrow","value":1}},{"source":"488","target":"483","attributes":{"source":488,"target":483,"type":"arrow","value":1}},{"source":"129","target":"262","attributes":{"source":129,"target":262,"type":"arrow","value":1}},{"source":"452","target":"238","attributes":{"source":452,"target":238,"type":"arrow","value":1}},{"source":"90","target":"34","attributes":{"source":90,"target":34,"type":"arrow","value":1}},{"source":"301","target":"419","attributes":{"source":301,"target":419,"type":"arrow","value":1}},{"source":"23","target":"46","attributes":{"source":23,"target":46,"type":"arrow","value":1}},{"source":"309","target":"75","attributes":{"source":309,"target":75,"type":"arrow","value":1}},{"source":"231","target":"48","attributes":{"source":231,"target":48,"type":"arrow","value":1}},{"source":"497","target":"180","attributes":{"source":497,"target":180,"type":"arrow","value":1}},{"source":"200","target":"110","attributes":{"source":200,"target":110,"type":"arrow","value":1}},{"source":"213","target":"407","attributes":{"source":213,"target":407,"type":"arrow","value":1}},{"source":"336","target":"95","attributes":{"source":336,"target":95,"type":"arrow","value":1}},{"source":"104","target":"48","attributes":{"source":104,"target":48,"type":"arrow","value":1}},{"source":"397","target":"486","attributes":{"source":397,"target":486,"type":"arrow","value":1}},{"source":"346","target":"272","attributes":{"source":346,"target":272,"type":"arrow","value":1}},{"source":"236","target":"441","attributes":{"source":236,"target":441,"type":"arrow","value":1}},{"source":"275","target":"365","attributes":{"source":275,"target":365,"type":"arrow","value":1}},{"source":"78","target":"378","attributes":{"source":78,"target":378,"type":"arrow","value":1}},{"source":"74","target":"325","attributes":{"source":74,"target":325,"type":"arrow","value":1}},{"source":"62","target":"465","attributes":{"source":62,"target":465,"type":"arrow","value":1}},{"source":"345","target":"489","attributes":{"source":345,"target":489,"type":"arrow","value":1}},{"source":"228","target":"416","attributes":{"source":228,"target":416,"type":"arrow","value":1}},{"source":"61","target":"17","attributes":{"source":61,"target":17,"type":"arrow","value":1}},{"source":"214","target":"72","attributes":{"source":214,"target":72,"type":"arrow","value":1}},{"source":"10","target":"435","attributes":{"source":10,"target":435,"type":"arrow","value":1}},{"source":"208","target":"190","attributes":{"source":208,"target":190,"type":"arrow","value":1}},{"source":"341","target":"381","attributes":{"source":341,"target":381,"type":"arrow","value":1}},{"source":"460","target":"160","attributes":{"source":460,"target":160,"type":"arrow","value":1}},{"source":"61","target":"32","attributes":{"source":61,"target":32,"type":"arrow","value":1}},{"source":"410","target":"460","attributes":{"source":410,"target":460,"type":"arrow","value":1}},{"source":"431","target":"56","attributes":{"source":431,"target":56,"type":"arrow","value":1}},{"source":"314","target":"259","attributes":{"source":314,"target":259,"type":"arrow","value":1}},{"source":"404","target":"61","attributes":{"source":404,"target":61,"type":"arrow","value":1}},{"source":"294","target":"276","attributes":{"source":294,"target":276,"type":"arrow","value":1}},{"source":"464","target":"245","attributes":{"source":464,"target":245,"type":"arrow","value":1}},{"source":"64","target":"20","attributes":{"source":64,"target":20,"type":"arrow","value":1}},{"source":"248","target":"436","attributes":{"source":248,"target":436,"type":"arrow","value":1}},{"source":"457","target":"199","attributes":{"source":457,"target":199,"type":"arrow","value":1}},{"source":"37","target":"51","attributes":{"source":37,"target":51,"type":"arrow","value":1}},{"source":"442","target":"11","attributes":{"source":442,"target":11,"type":"arrow","value":1}},{"source":"282","target":"252","attributes":{"source":282,"target":252,"type":"arrow","value":1}},{"source":"397","target":"445","attributes":{"source":397,"target":445,"type":"arrow","value":1}},{"source":"104","target":"374","attributes":{"source":104,"target":374,"type":"arrow","value":1}},{"source":"227","target":"20","attributes":{"source":227,"target":20,"type":"arrow","value":1}},{"source":"487","target":"39","attributes":{"source":487,"target":39,"type":"arrow","value":1}},{"source":"226","target":"401","attributes":{"source":226,"target":401,"type":"arrow","value":1}},{"source":"480","target":"348","attributes":{"source":480,"target":348,"type":"arrow","value":1}},{"source":"59","target":"399","attributes":{"source":59,"target":399,"type":"arrow","value":1}},{"source":"138","target":"361","attributes":{"source":138,"target":361,"type":"arrow","value":1}},{"source":"98","target":"341","attributes":{"source":98,"target":341,"type":"arrow","value":1}},{"source":"332","target":"58","attributes":{"source":332,"target":58,"type":"arrow","value":1}},{"source":"299","target":"156","attributes":{"source":299,"target":156,"type":"arrow","value":1}},{"source":"57","target":"450","attributes":{"source":57,"target":450,"type":"arrow","value":1}},{"source":"81","target":"70","attributes":{"source":81,"target":70,"type":"arrow","value":1}},{"source":"319","target":"205","attributes":{"source":319,"target":205,"type":"arrow","value":1}},{"source":"86","target":"369","attributes":{"source":86,"target":369,"type":"arrow","value":1}},{"source":"21","target":"311","attributes":{"source":21,"target":311,"type":"arrow","value":1}},{"source":"247","target":"229","attributes":{"source":247,"target":229,"type":"arrow","value":1}},{"source":"97","target":"354","attributes":{"source":97,"target":354,"type":"arrow","value":1}},{"source":"500","target":"403","attributes":{"source":500,"target":403,"type":"arrow","value":1}},{"source":"126","target":"82","attributes":{"source":126,"target":82,"type":"arrow","value":1}},{"source":"221","target":"349","attributes":{"source":221,"target":349,"type":"arrow","value":1}},{"source":"234","target":"146","attributes":{"source":234,"target":146,"type":"arrow","value":1}},{"source":"345","target":"131","attributes":{"source":345,"target":131,"type":"arrow","value":1}},{"source":"94","target":"331","attributes":{"source":94,"target":331,"type":"arrow","value":1}},{"source":"449","target":"471","attributes":{"source":449,"target":471,"type":"arrow","value":1}},{"source":"123","target":"390","attributes":{"source":123,"target":390,"type":"arrow","value":1}},{"source":"322","target":"12","attributes":{"source":322,"target":12,"type":"arrow","value":1}},{"source":"443","target":"20","attributes":{"source":443,"target":20,"type":"arrow","value":1}},{"source":"53","target":"247","attributes":{"source":53,"target":247,"type":"arrow","value":1}},{"source":"216","target":"191","attributes":{"source":216,"target":191,"type":"arrow","value":1}},{"source":"70","target":"290","attributes":{"source":70,"target":290,"type":"arrow","value":1}},{"source":"245","target":"176","attributes":{"source":245,"target":176,"type":"arrow","value":1}},{"source":"280","target":"439","attributes":{"source":280,"target":439,"type":"arrow","value":1}},{"source":"301","target":"243","attributes":{"source":301,"target":243,"type":"arrow","value":1}},{"source":"391","target":"118","attributes":{"source":391,"target":118,"type":"arrow","value":1}},{"source":"239","target":"450","attributes":{"source":239,"target":450,"type":"arrow","value":1}},{"source":"200","target":"56","attributes":{"source":200,"target":56,"type":"arrow","value":1}},{"source":"53","target":"458","attributes":{"source":53,"target":458,"type":"arrow","value":1}},{"source":"89","target":"410","attributes":{"source":89,"target":410,"type":"arrow","value":1}},{"source":"455","target":"375","attributes":{"source":455,"target":375,"type":"arrow","value":1}},{"source":"451","target":"205","attributes":{"source":451,"target":205,"type":"arrow","value":1}},{"source":"341","target":"269","attributes":{"source":341,"target":269,"type":"arrow","value":1}},{"source":"222","target":"373","attributes":{"source":222,"target":373,"type":"arrow","value":1}},{"source":"82","target":"60","attributes":{"source":82,"target":60,"type":"arrow","value":1}},{"source":"424","target":"330","attributes":{"source":424,"target":330,"type":"arrow","value":1}},{"source":"30","target":"485","attributes":{"source":30,"target":485,"type":"arrow","value":1}},{"source":"10","target":"209","attributes":{"source":10,"target":209,"type":"arrow","value":1}},{"source":"335","target":"122","attributes":{"source":335,"target":122,"type":"arrow","value":1}},{"source":"142","target":"452","attributes":{"source":142,"target":452,"type":"arrow","value":1}},{"source":"367","target":"410","attributes":{"source":367,"target":410,"type":"arrow","value":1}},{"source":"191","target":"141","attributes":{"source":191,"target":141,"type":"arrow","value":1}},{"source":"390","target":"225","attributes":{"source":390,"target":225,"type":"arrow","value":1}},{"source":"372","target":"69","attributes":{"source":372,"target":69,"type":"arrow","value":1}},{"source":"431","target":"175","attributes":{"source":431,"target":175,"type":"arrow","value":1}},{"source":"421","target":"228","attributes":{"source":421,"target":228,"type":"arrow","value":1}},{"source":"191","target":"84","attributes":{"source":191,"target":84,"type":"arrow","value":1}},{"source":"495","target":"404","attributes":{"source":495,"target":404,"type":"arrow","value":1}},{"source":"413","target":"130","attributes":{"source":413,"target":130,"type":"arrow","value":1}},{"source":"292","target":"492","attributes":{"source":292,"target":492,"type":"arrow","value":1}},{"source":"448","target":"374","attributes":{"source":448,"target":374,"type":"arrow","value":1}},{"source":"265","target":"374","attributes":{"source":265,"target":374,"type":"arrow","value":1}},{"source":"91","target":"276","attributes":{"source":91,"target":276,"type":"arrow","value":1}},{"source":"392","target":"433","attributes":{"source":392,"target":433,"type":"arrow","value":1}},{"source":"408","target":"203","attributes":{"source":408,"target":203,"type":"arrow","value":1}}]}');class u{constructor(t){this.rootelement=t,this.sigmaContainer=document.createElement("div"),this.sigmaContainer.setAttribute("style","height:100%;"),this.rootelement.appendChild(this.sigmaContainer)}createSigmaGraph(){const t=new(a());var e;t.import(s);var r=0;t.nodes().forEach(((i,a)=>{let o=t.getNodeAttribute(i,"train_id");void 0===e||e!==o?(e=o,r=0):r++,t.setNodeAttribute(i,"x",r),t.setNodeAttribute(i,"y",o);let n="Train:"+o+" Route:"+t.getNodeAttribute(i,"route_id");t.mergeNodeAttributes(i,{label:n})})),this.renderer=new(n())(t,this.sigmaContainer,{allowInvalidContainer:!0})}resizeSigmaGraph(){void 0!==this.renderer?this.renderer.refresh():console.log("graph doesn't exist!")}destroySigmaGraph(){void 0!==this.renderer&&(this.renderer.clear(),this.renderer.kill(),this.rootelement.removeChild(this.sigmaContainer))}}}},e={};function r(i){var a=e[i];if(void 0!==a)return a.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r(695)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,